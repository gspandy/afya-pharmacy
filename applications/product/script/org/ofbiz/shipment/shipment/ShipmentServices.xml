<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional
	information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except
	in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to
	in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
	the License for the specific language governing permissions and limitations under the License. -->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">
    <!-- Shipment services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="issueInventoryToShipment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create Shipment" use-transaction="true">

        <entity-condition list="itemIssuances" entity-name="ItemIssuance">
            <condition-list combine="and">
                <condition-expr field-name="shipmentId" from-field="parameters.shipmentId"></condition-expr>
                <condition-expr field-name="shipmentItemSeqId"
                                from-field="parameters.shipmentItemSeqId"></condition-expr>
            </condition-list>
        </entity-condition>
        <log level="always" message="${itemIssuances}"/>
        <set field="totalQuantityIssued" type="BigDecimal" value="0"></set>
        <iterate list="itemIssuances" entry="itemIssuance">
            <calculate field="totalQuantityIssued" type="BigDecimal">
                <calcop field="itemIssuance.quantity" operator="get"/>
                <calcop field="totalQuantityIssued" operator="get"/>
            </calculate>
        </iterate>
        <log level="error" message="Total Quantity Issued ${totalQuantityIssued}"></log>

        <entity-one entity-name="ShipmentItem" value-field="shipmentItem"/>
        <set field="shipmentQty" type="BigDecimal" from="shipmentItem.quantity"></set>

        <log level="error" message="Total Quantity left to Issue ${shipmentQty}"></log>
        <set field="qtyToIssue" type="BigDecimal" value="0"></set>
        <calculate field="qtyToIssue">
            <calcop operator="subtract">
                <calcop field="shipmentQty" operator="get"/>
                <calcop field="totalQuantityIssued" operator="get"/>
            </calcop>
        </calculate>

        <entity-one entity-name="InventoryItem" value-field="inventoryItem"/>
        <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" value="SERIALIZED_INV_ITEM">
            <set field="qtyToIssue" value="1"/>
        </if-compare>

        <if-compare field="qtyToIssue" value="0" operator="greater" type="BigDecimal">

            <if-compare-field field="qtyToIssue" operator="greater" to-field="inventoryItem.availableToPromiseTotal">
                <set field="qtyToIssue" from="inventoryItem.availableToPromiseTotal"/>
            </if-compare-field>

            <set field="parameters.quantity" value="${qtyToIssue}"></set>
            <call-service in-map-name="parameters" service-name="createItemIssuance" include-user-login="true"
                          require-new-transaction="false">
                <result-to-field result-name="itemIssuanceId"/>
            </call-service>
            <set field="createDetailMap.inventoryItemId" from="parameters.inventoryItemId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="createDetailMap.shipmentId" from="parameters.shipmentId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="createDetailMap.shipmentItemSeqId" from="parameters.shipmentItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="createDetailMap.itemIssuanceId" from="itemIssuanceId" set-if-empty="true" set-if-null="false"/>
            <calculate decimal-scale="2" field="createDetailMap.availableToPromiseDiff" rounding-mode="HalfEven"
                       type="BigDecimal">
                <calcop field="qtyToIssue" operator="negative"/>
            </calculate>
            <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="createInventoryItemDetail" success-code="success"/>
            <clear-field field="createDetailMap"/>

            <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" value="SERIALIZED_INV_ITEM">
                <set field="inventoryItemMap.inventoryItemId" from-field="parameters.inventoryItemId"/>
                <set field="inventoryItemMap.statusId" value="INV_BEING_TRANS_PRM"/>
                <call-service break-on-error="true" error-code="error" in-map-name="inventoryItemMap"
                              include-user-login="true" require-new-transaction="false"
                              service-name="updateInventoryItem" success-code="success"/>
                <clear-field field="inventoryItemMap"/>
            </if-compare>
            <!---->
        </if-compare>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="createShipment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create Shipment" use-transaction="true">
        <make-value entity-name="Shipment" value-field="newEntity"/>
        <if-not-empty field="parameters.shipmentTypeId">
            <if-compare field="parameters.shipmentTypeId" operator="contains" type="String" value="PURCHASE_SHIPMENT">
                <set field="parameters.statusId" set-if-empty="true" set-if-null="false" type="PlainString"
                     value="PURCH_SHIP_CREATED"/>
                <else>
                    <set field="parameters.statusId" set-if-empty="true" set-if-null="false" type="PlainString"
                         value="SHIPMENT_INPUT"/>
                </else>
            </if-compare>
            <if-compare field="parameters.shipmentTypeId" operator="contains" type="String" value="INC">
                <set field="parameters.statusId" set-if-empty="true" set-if-null="false" type="PlainString"
                     value="PURCH_SHIP_CREATED"/>
            </if-compare>
            <if-compare field="parameters.shipmentTypeId" operator="contains" type="String" value="SALES_RETURN">
                <set field="parameters.statusId" set-if-empty="true" set-if-null="false" type="PlainString"
                     value="PURCH_SHIP_CREATED"/>
            </if-compare>
            <if-compare field="parameters.shipmentTypeId" operator="equals" type="String" value="TRANSFER">
                <set field="parameters.statusId" set-if-empty="true" set-if-null="false" type="PlainString"
                     value="SHIPMENT_PICKED"/>
            </if-compare>
        </if-not-empty>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <if-not-empty field="parameters.shipmentId">
            <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
            <else>
                <sequenced-id field="newEntity.shipmentId" get-long-only="false" sequence-name="Shipment"/>
            </else>
        </if-not-empty>
        <field-to-result field="newEntity.shipmentId" result-name="shipmentId"/>
        <!-- set the created and lastModified info -->
        <now-timestamp field="newEntity.createdDate"/>
        <set field="newEntity.createdByUserLogin" from="userLogin.userLoginId" set-if-empty="true" set-if-null="false"/>
        <now-timestamp field="newEntity.lastModifiedDate"/>
        <set field="newEntity.lastModifiedByUserLogin" from="userLogin.userLoginId" set-if-empty="true"
             set-if-null="false"/>
        <!-- if needed create some WorkEfforts and remember their IDs: estimatedShipDate: estimatedShipWorkEffId estimatedArrivalDate: estimatedArrivalWorkEffId -->
        <if-not-empty field="parameters.estimatedShipDate">
            <set field="shipWorkEffortMap.workEffortName" set-if-empty="true" set-if-null="false"
                 value="Shipment #${newEntity.shipmentId} ${newEntity.primaryOrderId} Ship"/>
            <set field="shipWorkEffortMap.workEffortTypeId" set-if-empty="true" set-if-null="false" value="EVENT"/>
            <set field="shipWorkEffortMap.currentStatusId" set-if-empty="true" set-if-null="false"
                 value="CAL_TENTATIVE"/>
            <set field="shipWorkEffortMap.estimatedStartDate" from="parameters.estimatedShipDate" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipWorkEffortMap.estimatedCompletionDate" from="parameters.estimatedShipDate"
                 set-if-empty="true" set-if-null="false"/>
            <set field="shipWorkEffortMap.facilityId" from="parameters.originFacilityId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipWorkEffortMap.quickAssignPartyId" from="userLogin.partyId" set-if-empty="true"
                 set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipWorkEffortMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="createWorkEffort" success-code="success">
                <result-to-field field="newEntity.estimatedShipWorkEffId" result-name="workEffortId"/>
            </call-service>
            <if-not-empty field="newEntity.partyIdFrom">
                <set field="assignPartyToWorkEffortShip.workEffortId" from="newEntity.estimatedShipWorkEffId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="assignPartyToWorkEffortShip.partyId" from="newEntity.partyIdFrom" set-if-empty="true"
                     set-if-null="false"/>
                <set field="assignPartyToWorkEffortShip.roleTypeId" set-if-empty="true" set-if-null="false"
                     value="CAL_ATTENDEE"/>
                <set field="assignPartyToWorkEffortShip.statusId" set-if-empty="true" set-if-null="false"
                     value="CAL_SENT"/>
                <call-service break-on-error="true" error-code="error" in-map-name="assignPartyToWorkEffortShip"
                              include-user-login="true"
                              require-new-transaction="false" service-name="assignPartyToWorkEffort"
                              success-code="success"/>
            </if-not-empty>
        </if-not-empty>
        <if-not-empty field="parameters.estimatedArrivalDate">
            <set field="arrivalWorkEffortMap.workEffortName" set-if-empty="true" set-if-null="false"
                 value="Shipment #${newEntity.shipmentId} ${newEntity.primaryOrderId} Arrival"/>
            <set field="arrivalWorkEffortMap.workEffortTypeId" set-if-empty="true" set-if-null="false" value="EVENT"/>
            <set field="arrivalWorkEffortMap.currentStatusId" set-if-empty="true" set-if-null="false"
                 value="CAL_TENTATIVE"/>
            <set field="arrivalWorkEffortMap.estimatedStartDate" from="parameters.estimatedArrivalDate"
                 set-if-empty="true" set-if-null="false"/>
            <set field="arrivalWorkEffortMap.estimatedCompletionDate" from="parameters.estimatedArrivalDate"
                 set-if-empty="true" set-if-null="false"/>
            <set field="arrivalWorkEffortMap.facilityId" from="parameters.destinationFacilityId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="arrivalWorkEffortMap.quickAssignPartyId" from="userLogin.partyId" set-if-empty="true"
                 set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="arrivalWorkEffortMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="createWorkEffort" success-code="success">
                <result-to-field field="newEntity.estimatedArrivalWorkEffId" result-name="workEffortId"/>
            </call-service>
            <if-not-empty field="newEntity.partyIdTo">
                <set field="assignPartyToWorkEffortArrival.workEffortId" from="newEntity.estimatedArrivalWorkEffId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="assignPartyToWorkEffortArrival.partyId" from="newEntity.partyIdTo" set-if-empty="true"
                     set-if-null="false"/>
                <set field="assignPartyToWorkEffortArrival.roleTypeId" set-if-empty="true" set-if-null="false"
                     value="CAL_ATTENDEE"/>
                <set field="assignPartyToWorkEffortArrival.statusId" set-if-empty="true" set-if-null="false"
                     value="CAL_SENT"/>
                <call-service break-on-error="true" error-code="error" in-map-name="assignPartyToWorkEffortArrival"
                              include-user-login="true"
                              require-new-transaction="false" service-name="assignPartyToWorkEffort"
                              success-code="success"/>
            </if-not-empty>
        </if-not-empty>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <!-- get the ShipmentStatus history started -->
        <if-not-empty field="newEntity.statusId">
            <make-value entity-name="ShipmentStatus" value-field="newStatusValue"/>
            <set field="newStatusValue.statusId" from="newEntity.statusId" set-if-empty="true" set-if-null="false"/>
            <set field="newStatusValue.shipmentId" from="newEntity.shipmentId" set-if-empty="true" set-if-null="false"/>
            <now-timestamp field="newStatusValue.statusDate"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newStatusValue"/>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="updateShipment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update Shipment" use-transaction="true">

        <log level="always" message=" Update Shipment ${parameters}"/>
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Update Shipment"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusDelivered"/>
        <make-value entity-name="Shipment" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" use-cache="false" value-field="lookedUpValue"/>
        <!-- put the type in return map so that service consumer knows what type of shipment was updated -->
        <field-to-result field="lookedUpValue.shipmentTypeId" result-name="shipmentTypeId"/>
        <if-not-empty field="parameters.statusId">
            <if-compare-field field="parameters.statusId" operator="not-equals" to-field="lookedUpValue.statusId"
                              type="String">
                <!-- make sure a StatusValidChange record exists, if not return error -->
                <!--<entity-one entity-name="StatusValidChange" value-field="checkStatusValidChange" auto-field-map="false"> <field-map from-field="lookedUpValue.statusId" field-name="statusId"/>
					<field-map from-field="parameters.statusId" field-name="statusIdTo"/> </entity-one> -->
                <!--<if-empty field="checkStatusValidChange"> <string-to-list string="ERROR: Changing the status from ${lookedUpValue.statusId} to ${parameters.statusId} is
					not allowed." list="error_list"/> </if-empty> -->
                <entity-one auto-field-map="true" entity-name="ShipmentStatus" use-cache="false"
                            value-field="shipmentStatus"/>
                <if-empty field="shipmentStatus">
                    <make-value entity-name="ShipmentStatus" value-field="newStatusValue"/>
                    <set field="newStatusValue.statusId" from="parameters.statusId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="newStatusValue.shipmentId" from="parameters.shipmentId" set-if-empty="true"
                         set-if-null="false"/>
                    <now-timestamp field="newStatusValue.statusDate"/>
                    <if-empty field="parameters.eventDate">
                        <now-timestamp field="newStatusValue.statusDate"/>
                        <else>
                            <set field="newStatusValue.statusDate" from="parameters.eventDate" set-if-empty="true"
                                 set-if-null="false"/>
                        </else>
                    </if-empty>
                    <create-value do-cache-clear="true" or-store="false" value-field="newStatusValue"/>
                    <else>
                        <if-empty field="parameters.eventDate">
                            <now-timestamp field="shipmentStatus.statusDate"/>
                            <else>
                                <set field="shipmentStatus.statusDate" from="parameters.eventDate" set-if-empty="true"
                                     set-if-null="false"/>
                            </else>
                        </if-empty>
                        <store-value do-cache-clear="true" value-field="shipmentStatus"/>
                    </else>
                </if-empty>
            </if-compare-field>
        </if-not-empty>
        <!-- now finally check for errors -->
        <check-errors error-code="error" error-list-name="error_list"/>
        <!-- Check that the Order Item exists -->
        <!-- Check the pickup and delivery dates for changes and update the corresponding WorkEfforts -->
        <if>
            <condition>
                <or>
                    <and>
                        <not>
                            <if-empty field="parameters.estimatedShipDate"/>
                        </not>
                        <if-compare-field field="parameters.estimatedShipDate" operator="not-equals"
                                          to-field="lookedUpValue.estimatedShipDate" type="String"/>
                    </and>
                    <and>
                        <not>
                            <if-empty field="parameters.originFacilityId"/>
                        </not>
                        <if-compare-field field="parameters.originFacilityId" operator="not-equals"
                                          to-field="lookedUpValue.originFacilityId" type="String"/>
                    </and>
                    <and>
                        <not>
                            <if-empty field="parameters.statusId"/>
                        </not>
                        <if-compare-field field="parameters.statusId" operator="not-equals"
                                          to-field="lookedUpValue.statusId" type="String"/>
                        <or>
                            <if-compare field="parameters.statusId" operator="equals" type="String"
                                        value="SHIPMENT_CANCELLED"/>
                            <if-compare field="parameters.statusId" operator="equals" type="String"
                                        value="SHIPMENT_PACKED"/>
                            <if-compare field="parameters.statusId" operator="equals" type="String"
                                        value="SHIPMENT_SHIPPED"/>
                        </or>
                    </and>
                </or>
            </condition>
            <then>
                <entity-one auto-field-map="false" entity-name="WorkEffort" use-cache="false" value-field="estShipWe">
                    <field-map field-name="workEffortId" from-field="lookedUpValue.estimatedShipWorkEffId"/>
                </entity-one>
                <if-not-empty field="estShipWe">
                    <set field="estShipWe.estimatedStartDate" from="parameters.estimatedShipDate" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="estShipWe.estimatedCompletionDate" from="parameters.estimatedShipDate"
                         set-if-empty="true" set-if-null="false"/>
                    <set field="estShipWe.facilityId" from="parameters.originFacilityId" set-if-empty="true"
                         set-if-null="false"/>
                    <if>
                        <condition>
                            <and>
                                <not>
                                    <if-empty field="parameters.statusId"/>
                                </not>
                                <if-compare-field field="parameters.statusId" operator="not-equals"
                                                  to-field="lookedUpValue.statusId" type="String"/>
                            </and>
                        </condition>
                        <then>
                            <if-compare field="parameters.statusId" operator="equals" type="String"
                                        value="SHIPMENT_CANCELLED">
                                <set field="estShipWe.currentStatusId" set-if-empty="true" set-if-null="false"
                                     value="CAL_CANCELLED"/>
                            </if-compare>
                            <if-compare field="parameters.statusId" operator="equals" type="String"
                                        value="SHIPMENT_PACKED">
                                <set field="estShipWe.currentStatusId" set-if-empty="true" set-if-null="false"
                                     value="CAL_CONFIRMED"/>
                            </if-compare>
                            <if-compare field="parameters.statusId" operator="equals" type="String"
                                        value="SHIPMENT_SHIPPED">
                                <set field="estShipWe.currentStatusId" set-if-empty="true" set-if-null="false"
                                     value="CAL_COMPLETED"/>
                            </if-compare>
                        </then>
                    </if>
                    <set-service-fields map="estShipWe" service-name="updateWorkEffort" to-map="estShipWeUpdMap"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="estShipWeUpdMap"
                                  include-user-login="true" require-new-transaction="false"
                                  service-name="updateWorkEffort" success-code="success"/>
                </if-not-empty>
            </then>
        </if>
        <if>
            <condition>
                <or>
                    <and>
                        <not>
                            <if-empty field="parameters.estimatedArrivalDate"/>
                        </not>
                        <if-compare-field field="parameters.estimatedArrivalDate" operator="not-equals"
                                          to-field="lookedUpValue.estimatedArrivalDate" type="String"/>
                    </and>
                    <and>
                        <not>
                            <if-empty field="parameters.destinationFacilityId"/>
                        </not>
                        <if-compare-field field="parameters.destinationFacilityId" operator="not-equals"
                                          to-field="lookedUpValue.destinationFacilityId" type="String"/>
                    </and>
                </or>
            </condition>
            <then>
                <!-- <find-by-primary-key entity-name="WorkEffort" map="estimatedArrivalWorkEffortMap" value-field="estimatedArrivalWorkEffort"/> -->
                <entity-one auto-field-map="false" entity-name="WorkEffort" use-cache="false"
                            value-field="estimatedArrivalWorkEffort">
                    <field-map field-name="workEffortId" from-field="lookedUpValue.estimatedArrivalWorkEffId"/>
                </entity-one>
                <if-not-empty field="estimatedArrivalWorkEffort">
                    <set field="estimatedArrivalWorkEffort.estimatedStartDate" from="parameters.estimatedArrivalDate"
                         set-if-empty="true" set-if-null="false"/>
                    <set field="estimatedArrivalWorkEffort.estimatedCompletionDate"
                         from="parameters.estimatedArrivalDate" set-if-empty="true" set-if-null="false"/>
                    <set field="estimatedArrivalWorkEffort.facilityId" from="parameters.destinationFacilityId"
                         set-if-empty="true" set-if-null="false"/>
                    <set-service-fields map="estimatedArrivalWorkEffort" service-name="updateWorkEffort"
                                        to-map="estimatedArrivalWorkEffortUpdMap"/>
                    <call-service break-on-error="true" error-code="error"
                                  in-map-name="estimatedArrivalWorkEffortUpdMap" include-user-login="true"
                                  require-new-transaction="false" service-name="updateWorkEffort"
                                  success-code="success"/>
                </if-not-empty>
            </then>
        </if>
        <!-- if the partyIdTo or partyIdFrom has changed, add WEPAs -->
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="parameters.partyIdFrom"/>
                    </not>
                    <if-compare-field field="parameters.partyIdFrom" operator="not-equals"
                                      to-field="lookedUpValue.partyIdFrom" type="String"/>
                    <not>
                        <if-empty field="lookedUpValue.estimatedShipWorkEffId"/>
                    </not>
                </and>
            </condition>
            <then>
                <set field="assignPartyToWorkEffortShip.workEffortId" from="lookedUpValue.estimatedShipWorkEffId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="assignPartyToWorkEffortShip.partyId" from="parameters.partyIdFrom" set-if-empty="true"
                     set-if-null="false"/>
                <find-by-and entity-name="WorkEffortPartyAssignment" list="existingShipWepas"
                             map="assignPartyToWorkEffortShip" use-cache="false" use-iterator="false"/>
                <filter-list-by-date from-field-name="fromDate" list="existingShipWepas" thru-field-name="thruDate"/>
                <if-empty field="existingShipWepas">
                    <set field="assignPartyToWorkEffortShip.roleTypeId" set-if-empty="true" set-if-null="false"
                         value="CAL_ATTENDEE"/>
                    <set field="assignPartyToWorkEffortShip.statusId" set-if-empty="true" set-if-null="false"
                         value="CAL_SENT"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="assignPartyToWorkEffortShip"
                                  include-user-login="true"
                                  require-new-transaction="false" service-name="assignPartyToWorkEffort"
                                  success-code="success"/>
                </if-empty>
            </then>
        </if>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="parameters.partyIdTo"/>
                    </not>
                    <if-compare-field field="parameters.partyIdTo" operator="not-equals"
                                      to-field="lookedUpValue.partyIdTo" type="String"/>
                    <not>
                        <if-empty field="lookedUpValue.estimatedArrivalWorkEffId"/>
                    </not>
                </and>
            </condition>
            <then>
                <set field="assignPartyToWorkEffortArrival.workEffortId" from="lookedUpValue.estimatedArrivalWorkEffId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="assignPartyToWorkEffortArrival.partyId" from="parameters.partyIdTo" set-if-empty="true"
                     set-if-null="false"/>
                <find-by-and entity-name="WorkEffortPartyAssignment" list="existingArrivalWepas"
                             map="assignPartyToWorkEffortArrival" use-cache="false"
                             use-iterator="false"/>
                <filter-list-by-date from-field-name="fromDate" list="existingArrivalWepas" thru-field-name="thruDate"/>
                <if-empty field="existingArrivalWepas">
                    <set field="assignPartyToWorkEffortArrival.roleTypeId" set-if-empty="true" set-if-null="false"
                         value="CAL_ATTENDEE"/>
                    <set field="assignPartyToWorkEffortArrival.statusId" set-if-empty="true" set-if-null="false"
                         value="CAL_SENT"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="assignPartyToWorkEffortArrival"
                                  include-user-login="true"
                                  require-new-transaction="false" service-name="assignPartyToWorkEffort"
                                  success-code="success"/>
                </if-empty>
            </then>
        </if>
        <!-- finally before setting nonpk fields, set the oldStatusId, oldPrimaryOrderId, oldOriginFacilityId, oldDestinationFacilityId -->
        <field-to-result field="lookedUpValue.statusId" result-name="oldStatusId"/>
        <field-to-result field="lookedUpValue.primaryOrderId" result-name="oldPrimaryOrderId"/>
        <field-to-result field="lookedUpValue.originFacilityId" result-name="oldOriginFacilityId"/>
        <field-to-result field="lookedUpValue.destinationFacilityId" result-name="oldDestinationFacilityId"/>
        <!-- now that all changes have been checked, set the nonpks -->
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <now-timestamp field="lookedUpValue.lastModifiedDate"/>
        <set field="lookedUpValue.lastModifiedByUserLogin" from="userLogin.userLoginId" set-if-empty="true"
             set-if-null="false"/>
        <field-to-result field="lookedUpValue.shipmentId" result-name="shipmentId"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="deleteShipment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Delete Shipment" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Delete Shipment"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="createShipmentForReturn"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create Shipment based on ReturnHeader" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ReturnHeader" use-cache="false" value-field="returnHeader">
            <field-map field-name="returnId" from-field="parameters.returnId"/>
        </entity-one>
        <set field="shipmentCtx.partyIdFrom" from="returnHeader.fromPartyId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentCtx.partyIdTo" from="returnHeader.toPartyId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentCtx.originContactMechId" from="returnHeader.originContactMechId" set-if-empty="true"
             set-if-null="false"/>
        <set field="shipmentCtx.destinationFacilityId" from="returnHeader.destinationFacilityId" set-if-empty="true"
             set-if-null="false"/>
        <set field="shipmentCtx.primaryReturnId" from="returnHeader.returnId" set-if-empty="true" set-if-null="false"/>
        <!-- later different behavior for customer vs. returns would happen here -->
        <if>
            <condition>
                <if-compare field="returnHeader.returnHeaderTypeId" operator="equals" type="String"
                            value="CUSTOMER_RETURN"/>
            </condition>
            <then>
                <set field="shipmentCtx.shipmentTypeId" set-if-empty="true" set-if-null="false" value="SALES_RETURN"/>
                <set field="shipmentCtx.statusId" set-if-empty="true" set-if-null="false" value="PURCH_SHIP_CREATED"/>
                <!-- we may later need different status codes for return shipments -->
            </then>
            <else-if>
                <condition>
                    <if-compare field="returnHeader.returnHeaderTypeId" operator="equals" type="String"
                                value="VENDOR_RETURN"/>
                </condition>
                <then>
                    <set field="shipmentCtx.shipmentTypeId" set-if-empty="true" set-if-null="false"
                         value="PURCHASE_RETURN"/>
                    <set field="shipmentCtx.statusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_INPUT"/>
                </then>
            </else-if>
            <else>
                <add-error error-list-name="error_list">
                    <fail-message message="${returnHeader.returnHeaderTypeId} is not supported"/>
                </add-error>
                <check-errors error-code="error" error-list-name="error_list"/>
            </else>
        </if>
        <call-service break-on-error="true" error-code="error" in-map-name="shipmentCtx" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createShipment" success-code="success">
            <result-to-field result-name="shipmentId"/>
        </call-service>
        <field-to-result field="shipmentId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createShipmentAndItemsForReturn" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create Shipment and ShipmentItems based on ReturnHeader and ReturnItems"
                   use-transaction="true">
        <set-service-fields map="parameters" service-name="createShipmentForReturn" to-map="shipmentCtx"/>
        <call-service break-on-error="true" error-code="error" in-map-name="shipmentCtx" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createShipmentForReturn" success-code="success">
            <result-to-field result-name="shipmentId"/>
        </call-service>
        <check-errors error-code="error" error-list-name="error_list"/>
        <log level="info" message="Created new shipment ${shipmentId}"/>
        <entity-condition distinct="false" entity-name="ReturnItem" filter-by-date="false" list="returnItems"
                          use-cache="false">
            <condition-expr field-name="returnId" from-field="parameters.returnId" ignore="false" ignore-case="false"
                            ignore-if-empty="false"
                            ignore-if-null="false" operator="equals"/>
        </entity-condition>
        <iterate entry="returnItem" list="returnItems">
            <clear-field field="shipItemCtx"/>
            <set field="shipItemCtx.shipmentId" from="shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.productId" from="returnItem.productId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.quantity" from="returnItem.returnQuantity" set-if-empty="true" set-if-null="false"/>
            <log level="info" message="calling create shipment item with ${shipItemCtx}"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipItemCtx" include-user-login="true"
                          require-new-transaction="false"
                          service-name="createShipmentItem" success-code="success">
                <result-to-field result-name="shipmentItemSeqId"/>
            </call-service>
            <clear-field field="shipItemCtx"/>
            <set field="shipItemCtx.shipmentId" from="shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.shipmentItemSeqId" from="shipmentItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipItemCtx.returnId" from="returnItem.returnId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.returnItemSeqId" from="returnItem.returnItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipItemCtx.quantity" from="returnItem.returnQuantity" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipItemCtx" include-user-login="true"
                          require-new-transaction="false"
                          service-name="createReturnItemShipment" success-code="success"/>
        </iterate>
        <field-to-result field="shipmentId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createShipmentAndItemsForVendorReturn"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create Shipment and ShipmentItems based on primaryReturnId for Vendor return"
                   use-transaction="true">
        <set-service-fields map="parameters" service-name="createShipment" to-map="shipmentCtx"/>
        <call-service break-on-error="true" error-code="error" in-map-name="shipmentCtx" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createShipment" success-code="success">
            <result-to-field result-name="shipmentId"/>
        </call-service>
        <check-errors error-code="error" error-list-name="error_list"/>
        <log level="info" message="Created new shipment ${shipmentId}"/>
        <entity-condition distinct="false" entity-name="ReturnItem" filter-by-date="false" list="returnItems"
                          use-cache="false">
            <condition-expr field-name="returnId" from-field="parameters.primaryReturnId" ignore="false"
                            ignore-case="false" ignore-if-empty="false"
                            ignore-if-null="false" operator="equals"/>
        </entity-condition>
        <iterate entry="returnItem" list="returnItems">
            <clear-field field="shipItemCtx"/>
            <set field="shipItemCtx.shipmentId" from="shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.productId" from="returnItem.productId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.quantity" from="returnItem.returnQuantity" set-if-empty="true" set-if-null="false"/>
            <log level="info" message="calling create shipment item with ${shipItemCtx}"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipItemCtx" include-user-login="true"
                          require-new-transaction="false"
                          service-name="createShipmentItem" success-code="success">
                <result-to-field result-name="shipmentItemSeqId"/>
            </call-service>
            <clear-field field="shipItemCtx"/>
            <set field="shipItemCtx.shipmentId" from="shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.shipmentItemSeqId" from="shipmentItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipItemCtx.returnId" from="returnItem.returnId" set-if-empty="true" set-if-null="false"/>
            <set field="shipItemCtx.returnItemSeqId" from="returnItem.returnItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipItemCtx.quantity" from="returnItem.returnQuantity" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipItemCtx" include-user-login="true"
                          require-new-transaction="false"
                          service-name="createReturnItemShipment" success-code="success"/>
        </iterate>
        <field-to-result field="shipmentId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="setShipmentSettingsFromPrimaryOrder" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Set Shipment Settings From Primary Order" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false"
             value="Set Shipment Settings From Primary Order"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!-- on Shipment set partyIdFrom, partyIdTo (vendorPartyId), originContactMechId, destinationContactMechId, estimatedShipCost -->
        <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="shipment"/>
        <if-empty field="shipment.primaryOrderId">
            <!-- No primaryOrderId specified, don't do anything -->
            <log level="info"
                 message="Not running setShipmentSettingsFromPrimaryOrder, primaryOrderId is empty for shipmentId [${shipment.shipmentId}]"/>
            <return response-code="success"/>
        </if-empty>
        <!-- TODO: we may not want to check this if, for example, Purchase Orders don't have any OrderItemShipGroups -->
        <if-empty field="shipment.primaryShipGroupSeqId">
            <!-- No primaryShipGroupSeqId specified, don't do anything -->
            <log level="info"
                 message="Not running setShipmentSettingsFromPrimaryOrder, primaryShipGroupSeqId is empty for shipmentId [${parameters.shipmentId}]"/>
            <return response-code="success"/>
        </if-empty>
        <entity-one auto-field-map="false" entity-name="OrderHeader" use-cache="false" value-field="orderHeader">
            <field-map field-name="orderId" from-field="shipment.primaryOrderId"/>
        </entity-one>
        <if-not-empty field="shipment.primaryShipGroupSeqId">
            <entity-one auto-field-map="false" entity-name="OrderItemShipGroup" use-cache="false"
                        value-field="orderItemShipGroup">
                <field-map field-name="orderId" from-field="shipment.primaryOrderId"/>
                <field-map field-name="shipGroupSeqId" from-field="shipment.primaryShipGroupSeqId"/>
            </entity-one>
        </if-not-empty>
        <if-compare field="orderHeader.orderTypeId" operator="equals" type="String" value="SALES_ORDER">
            <set field="shipment.shipmentTypeId" set-if-empty="true" set-if-null="false" value="SALES_SHIPMENT"/>
        </if-compare>
        <if-compare field="orderHeader.orderTypeId" operator="equals" type="String" value="PURCHASE_ORDER">
            <if-compare field="shipment.shipmentTypeId" operator="not-equals" type="String" value="DROP_SHIPMENT">
                <set field="shipment.shipmentTypeId" set-if-empty="true" set-if-null="false" value="PURCHASE_SHIPMENT"/>
            </if-compare>
        </if-compare>
        <!-- set the facility if we are from a store with a single facility -->
        <if>
            <condition>
                <and>
                    <if-empty field="shipment.originFacilityId"/>
                    <if-compare field="shipment.shipmentTypeId" operator="equals" type="String" value="SALES_SHIPMENT"/>
                    <not>
                        <if-empty field="orderHeader.productStoreId"/>
                    </not>
                </and>
            </condition>
            <then>
                <entity-one auto-field-map="false" entity-name="ProductStore" use-cache="false"
                            value-field="productStore">
                    <field-map field-name="productStoreId" from-field="orderHeader.productStoreId"/>
                </entity-one>
                <if-compare field="productStore.oneInventoryFacility" operator="equals" type="String" value="Y">
                    <set field="shipment.originFacilityId" from="productStore.inventoryFacilityId" set-if-empty="true"
                         set-if-null="false"/>
                </if-compare>
            </then>
        </if>
        <!-- partyIdFrom, partyIdTo (vendorPartyId) - NOTE: these work the same for Purchase and Sales Orders... -->
        <entity-and entity-name="OrderRole" filter-by-date="false" list="orderRoles" use-cache="false">
            <field-map field-name="orderId" from-field="shipment.primaryOrderId"/>
        </entity-and>
        <!-- From: SHIP_FROM_VENDOR -->
        <if-empty field="shipment.partyIdFrom">
            <set field="limitRoleMap.roleTypeId" set-if-empty="true" set-if-null="false" value="SHIP_FROM_VENDOR"/>
            <filter-list-by-and list="orderRoles" map="limitRoleMap" to-list="limitOrderRoles"/>
            <first-from-list entry="limitOrderRole" list="limitOrderRoles"/>
            <if-not-empty field="limitOrderRole">
                <set field="shipment.partyIdFrom" from="limitOrderRole.partyId" set-if-empty="true"
                     set-if-null="false"/>
            </if-not-empty>
            <clear-field field="limitRoleMap"/>
            <clear-field field="limitOrderRoles"/>
            <clear-field field="limitOrderRole"/>
        </if-empty>
        <!-- From: VENDOR -->
        <if-empty field="shipment.partyIdFrom">
            <set field="limitRoleMap.roleTypeId" set-if-empty="true" set-if-null="false" value="VENDOR"/>
            <filter-list-by-and list="orderRoles" map="limitRoleMap" to-list="limitOrderRoles"/>
            <first-from-list entry="limitOrderRole" list="limitOrderRoles"/>
            <if-not-empty field="limitOrderRole">
                <set field="shipment.partyIdFrom" from="limitOrderRole.partyId" set-if-empty="true"
                     set-if-null="false"/>
            </if-not-empty>
            <clear-field field="limitRoleMap"/>
            <clear-field field="limitOrderRoles"/>
            <clear-field field="limitOrderRole"/>
        </if-empty>
        <!-- To: SHIP_TO_CUSTOMER -->
        <if-empty field="shipment.partyIdTo">
            <set field="limitRoleMap.roleTypeId" set-if-empty="true" set-if-null="false" value="SHIP_TO_CUSTOMER"/>
            <filter-list-by-and list="orderRoles" map="limitRoleMap" to-list="limitOrderRoles"/>
            <first-from-list entry="limitOrderRole" list="limitOrderRoles"/>
            <if-not-empty field="limitOrderRole">
                <set field="shipment.partyIdTo" from="limitOrderRole.partyId" set-if-empty="true" set-if-null="false"/>
            </if-not-empty>
            <clear-field field="limitRoleMap"/>
            <clear-field field="limitOrderRoles"/>
            <clear-field field="limitOrderRole"/>
        </if-empty>
        <!-- To: CUSTOMER -->
        <if-empty field="shipment.partyIdTo">
            <set field="limitRoleMap.roleTypeId" set-if-empty="true" set-if-null="false" value="CUSTOMER"/>
            <filter-list-by-and list="orderRoles" map="limitRoleMap" to-list="limitOrderRoles"/>
            <first-from-list entry="limitOrderRole" list="limitOrderRoles"/>
            <if-not-empty field="limitOrderRole">
                <set field="shipment.partyIdTo" from="limitOrderRole.partyId" set-if-empty="true" set-if-null="false"/>
            </if-not-empty>
            <clear-field field="limitRoleMap"/>
            <clear-field field="limitOrderRoles"/>
            <clear-field field="limitOrderRole"/>
        </if-empty>
        <entity-and entity-name="OrderContactMech" filter-by-date="false" list="orderContactMechs" use-cache="false">
            <field-map field-name="orderId" from-field="shipment.primaryOrderId"/>
        </entity-and>
        <!-- destinationContactMechId -->
        <if-empty field="shipment.destinationContactMechId">
            <!-- first try from orderContactMechs -->
            <set field="destinationContactMap.contactMechPurposeTypeId" set-if-empty="true" set-if-null="false"
                 value="SHIPPING_LOCATION"/>
            <filter-list-by-and list="orderContactMechs" map="destinationContactMap"
                                to-list="destinationOrderContactMechs"/>
            <first-from-list entry="destinationOrderContactMech" list="destinationOrderContactMechs"/>
            <if-not-empty field="destinationOrderContactMech">
                <set field="shipment.destinationContactMechId" from="destinationOrderContactMech.contactMechId"
                     set-if-empty="true" set-if-null="false"/>
                <else>
                    <log level="warning"
                         message="Cannot find a shipping destination address for ${shipment.primaryOrderId}"/>
                </else>
            </if-not-empty>
        </if-empty>
        <!-- originContactMechId. Only do this if it is not a purchase shipment -->
        <if-compare field="shipment.shipmentTypeId" operator="not-equals" type="String" value="PURCHASE_SHIPMENT">
            <if-empty field="shipment.originContactMechId">
                <set field="originContactMap.contactMechPurposeTypeId" set-if-empty="true" set-if-null="false"
                     value="SHIP_ORIG_LOCATION"/>
                <filter-list-by-and list="orderContactMechs" map="originContactMap" to-list="originOrderContactMechs"/>
                <first-from-list entry="originOrderContactMech" list="originOrderContactMechs"/>
                <if-not-empty field="originOrderContactMech">
                    <set field="shipment.originContactMechId" from="originOrderContactMech.contactMechId"
                         set-if-empty="true" set-if-null="false"/>
                    <else>
                        <log level="warning"
                             message="Cannot find a shipping origin address for ${shipment.primaryOrderId}"/>
                    </else>
                </if-not-empty>
            </if-empty>
        </if-compare>
        <!-- destinationTelecomNumberId -->
        <if-empty field="shipment.destinationTelecomNumberId">
            <set field="destTelecomOrderContactMechMap.contactMechPurposeTypeId" set-if-empty="true" set-if-null="false"
                 value="PHONE_SHIPPING"/>
            <filter-list-by-and list="orderContactMechs" map="destTelecomOrderContactMechMap"
                                to-list="destTelecomOrderContactMechs"/>
            <first-from-list entry="destTelecomOrderContactMech" list="destTelecomOrderContactMechs"/>
            <if-not-empty field="destTelecomOrderContactMech">
                <set field="shipment.destinationTelecomNumberId" from="destTelecomOrderContactMech.contactMechId"
                     set-if-empty="true" set-if-null="false"/>
                <else>
                    <!-- use the first unexpired phone number of the shipment partyIdTo -->
                    <entity-and entity-name="PartyAndTelecomNumber" filter-by-date="true" list="phoneNumbers"
                                use-cache="false">
                        <field-map field-name="partyId" from-field="shipment.partyIdTo"/>
                    </entity-and>
                    <first-from-list entry="phoneNumber" list="phoneNumbers"/>
                    <if-not-empty field="phoneNumber">
                        <set field="shipment.destinationTelecomNumberId" from="phoneNumber.contactMechId"
                             set-if-empty="true" set-if-null="false"/>
                        <else>
                            <log level="warning"
                                 message="Cannot find a shipping destination phone number for ${shipment.primaryOrderId}"/>
                        </else>
                    </if-not-empty>
                </else>
            </if-not-empty>
        </if-empty>
        <!-- originTelecomNumberId -->
        <if-empty field="shipment.originTelecomNumberId">
            <set field="originTelecomOrderContactMechMap.contactMechPurposeTypeId" set-if-empty="true"
                 set-if-null="false" value="PHONE_SHIP_ORIG"/>
            <filter-list-by-and list="orderContactMechs" map="originTelecomOrderContactMechMap"
                                to-list="originTelecomOrderContactMechs"/>
            <first-from-list entry="originTelecomOrderContactMech" list="originTelecomOrderContactMechs"/>
            <if-not-empty field="originTelecomOrderContactMech">
                <set field="shipment.originTelecomNumberId" from="originTelecomOrderContactMech.contactMechId"
                     set-if-empty="true" set-if-null="false"/>
                <else>
                    <log level="warning"
                         message="Cannot find a shipping origin phone number for ${shipment.primaryOrderId}"/>
                </else>
            </if-not-empty>
        </if-empty>
        <!-- set the destination facility if it is a purchase order -->
        <if-empty field="shipment.destinationFacilityId">
            <if-compare field="shipment.shipmentTypeId" operator="equals" type="String" value="PURCHASE_SHIPMENT">
                <set field="facilityLookup.contactMechId" from="shipment.destinationContactMechId" set-if-empty="true"
                     set-if-null="false"/>
                <find-by-and entity-name="FacilityContactMech" list="facilities" map="facilityLookup" use-cache="false"
                             use-iterator="false"/>
                <first-from-list entry="destinationFacility" list="facilities"/>
                <set field="shipment.destinationFacilityId" from="destinationFacility.facilityId" set-if-empty="true"
                     set-if-null="false"/>
            </if-compare>
        </if-empty>
        <!-- NOTE: use new place to find source/destination location/addresses for new OrderItemShipGroup.contactMechId (destination address for sales orders, source address
			for purchase orders) -->
        <!-- do this second so it will override the orderContactMech -->
        <!-- TODO: maybe we should add a new entity for OrderItemShipGroup ContactMechs? -->
        <if-not-empty field="orderItemShipGroup">
            <if-compare field="orderHeader.orderTypeId" operator="equals" type="String" value="SALES_ORDER">
                <set field="shipment.destinationContactMechId" from="orderItemShipGroup.contactMechId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="shipment.destinationTelecomNumberId" from="orderItemShipGroup.telecomContactMechId"
                     set-if-empty="true" set-if-null="false"/>
            </if-compare>
        </if-not-empty>
        <if-empty field="shipment.estimatedShipCost">
            <call-bsh><![CDATA[
                    import java.math.BigDecimal;
                    import org.ofbiz.order.order.OrderReadHelper;

                    orderReadHelper = new OrderReadHelper(orderHeader);
                    orderItems = orderReadHelper.getValidOrderItems();
                    orderAdjustments = orderReadHelper.getAdjustments();
                    orderHeaderAdjustments = orderReadHelper.getOrderHeaderAdjustments();
                    orderSubTotal = orderReadHelper.getOrderItemsSubTotal();

                    shippingAmount = OrderReadHelper.getAllOrderItemsAdjustmentsTotal(orderItems, orderAdjustments, false, false, true);
                    shippingAmount = shippingAmount.add(OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments, orderSubTotal, false, false, true));
                    //org.ofbiz.base.util.Debug.log("shippingAmmount=" + shippingAmount);
                    shipment.put("estimatedShipCost", shippingAmount);
            ]]></call-bsh>
        </if-empty>
        <!-- create a ShipmentRouteSegment with originFacilityId (if set on Shipment), destContactMechId, and from OrderItemShipGroup shipmentMethodTypeId, carrierPartyId,
			etc -->
        <set field="shipmentRouteSegmentMap.shipmentId" from="shipment.shipmentId" set-if-empty="true"
             set-if-null="false"/>
        <find-by-and entity-name="ShipmentRouteSegment" list="shipmentRouteSegments" map="shipmentRouteSegmentMap"
                     use-cache="false" use-iterator="false"/>
        <if-empty field="shipmentRouteSegments">
            <!-- estimatedShipDate, estimatedArrivalDate -->
            <set field="shipmentRouteSegmentMap.estimatedStartDate" from="shipment.estimatedShipDate"
                 set-if-empty="true" set-if-null="false"/>
            <set field="shipmentRouteSegmentMap.estimatedArrivalDate" from="shipment.estimatedArrivalDate"
                 set-if-empty="true" set-if-null="false"/>
            <set field="shipmentRouteSegmentMap.originFacilityId" from="shipment.originFacilityId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipmentRouteSegmentMap.originContactMechId" from="shipment.originContactMechId"
                 set-if-empty="true" set-if-null="false"/>
            <set field="shipmentRouteSegmentMap.originTelecomNumberId" from="shipment.originTelecomNumberId"
                 set-if-empty="true" set-if-null="false"/>
            <set field="shipmentRouteSegmentMap.destFacilityId" from="shipment.destinationFacilityId"
                 set-if-empty="true" set-if-null="false"/>
            <set field="shipmentRouteSegmentMap.destContactMechId" from="shipment.destinationContactMechId"
                 set-if-empty="true" set-if-null="false"/>
            <set field="shipmentRouteSegmentMap.destTelecomNumberId" from="shipment.destinationTelecomNumberId"
                 set-if-empty="true" set-if-null="false"/>
            <entity-one auto-field-map="true" entity-name="OrderItemShipGroup" use-cache="false"
                        value-field="orderItemShipGroup">
                <field-map field-name="orderId" from-field="shipment.primaryOrderId"/>
                <field-map field-name="shipGroupSeqId" from-field="shipment.primaryShipGroupSeqId"/>
            </entity-one>
            <if-not-empty field="orderItemShipGroup">
                <set field="shipmentRouteSegmentMap.carrierPartyId" from="orderItemShipGroup.carrierPartyId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="shipmentRouteSegmentMap.shipmentMethodTypeId" from="orderItemShipGroup.shipmentMethodTypeId"
                     set-if-empty="true" set-if-null="false"/>
            </if-not-empty>
            <call-service break-on-error="true" error-code="error" in-map-name="shipmentRouteSegmentMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="createShipmentRouteSegment" success-code="success"/>
        </if-empty>
        <set-service-fields map="shipment" service-name="updateShipment" to-map="shipmentUpdateMap"/>
        <call-service break-on-error="true" error-code="error" in-map-name="shipmentUpdateMap" include-user-login="true"
                      require-new-transaction="false"
                      service-name="updateShipment" success-code="success"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="setShipmentSettingsFromFacilities" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Set Shipment Settings From Facilities" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false"
             value="Set Shipment Settings From Facilities"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="shipment"/>

        <clone-value new-value-field="shipmentCopy" value-field="shipment"/>
        <string-to-list list="descendingFromDateOrder" string="-fromDate"/>
        <if-not-empty field="shipment.originFacilityId">
            <if-empty field="shipment.originContactMechId">
                <call-bsh><![CDATA[
                    facilityContactMech = org.ofbiz.party.contact.ContactMechWorker.getFacilityContactMechByPurpose(
                                delegator, shipment.get("originFacilityId"), org.ofbiz.base.util.UtilMisc.toList("SHIP_ORIG_LOCATION", "PRIMARY_LOCATION")
                            );
                    if (facilityContactMech != null) {
                        shipment.put("originContactMechId", facilityContactMech.get("contactMechId"));
                    }
                ]]></call-bsh>
            </if-empty>
            <if-empty field="shipment.originTelecomNumberId">
                <call-bsh><![CDATA[
                    facilityContactMech = org.ofbiz.party.contact.ContactMechWorker.getFacilityContactMechByPurpose(
                                delegator, shipment.get("originFacilityId"), org.ofbiz.base.util.UtilMisc.toList("PHONE_SHIP_ORIG", "PRIMARY_PHONE")
                            );
                    if (facilityContactMech != null) {
                        shipment.put("originTelecomNumberId", facilityContactMech.get("contactMechId"));
                    }
                ]]></call-bsh>
            </if-empty>
        </if-not-empty>
        <if-not-empty field="shipment.destinationFacilityId">
            <if-empty field="shipment.destinationContactMechId">
                <call-bsh><![CDATA[
                    facilityContactMech = org.ofbiz.party.contact.ContactMechWorker.getFacilityContactMechByPurpose(
                                delegator, shipment.get("destinationFacilityId"), org.ofbiz.base.util.UtilMisc.toList("SHIPPING_LOCATION", "PRIMARY_LOCATION")
                            );
                    if (facilityContactMech != null) {
                        shipment.put("destinationContactMechId", facilityContactMech.get("contactMechId"));
                    }
                ]]></call-bsh>
            </if-empty>
            <if-empty field="shipment.destinationTelecomNumberId">
                <call-bsh><![CDATA[
                    facilityContactMech = org.ofbiz.party.contact.ContactMechWorker.getFacilityContactMechByPurpose(
                                delegator, shipment.get("destinationFacilityId"), org.ofbiz.base.util.UtilMisc.toList("PHONE_SHIPPING", "PRIMARY_PHONE")
                            );
                    if (facilityContactMech != null) {
                        shipment.put("destinationTelecomNumberId", facilityContactMech.get("contactMechId"));
                    }
                ]]></call-bsh>
            </if-empty>
        </if-not-empty>
        <if-compare-field field="shipment" operator="not-equals" to-field="shipmentCopy" type="String">
            <set-service-fields map="shipment" service-name="updateShipment" to-map="shipmentUpdateMap"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipmentUpdateMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="updateShipment" success-code="success"/>
        </if-compare-field>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="sendShipmentScheduledNotification" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Send Shipment Scheduled Notification" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="shipment"/>
        <!-- find email address for currently logged in user, set as sendFrom -->
        <entity-and entity-name="PartyAndContactMech" filter-by-date="false" list="curUserPartyAndContactMechs"
                    use-cache="false">
            <field-map field-name="partyId" from-field="userLogin.partyId"/>
            <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
        </entity-and>
        <first-from-list entry="curUserPartyAndContactMech" list="curUserPartyAndContactMechs"/>
        <string-append field="sendEmailMap.sendFrom" prefix="," string="${curUserPartyAndContactMech.infoString}"/>
        <!-- find email addresses of partyIdFrom, set as sendTo -->
        <set field="sendToPartyIdMap.${shipment.partyIdFrom}" from="shipment.partyIdFrom" set-if-empty="true"
             set-if-null="false"/>
        <!-- find email addresses of all parties not equal to partyIdFrom in SUPPLIER_AGENT roleTypeId associated with primary order, set as sendTo -->
        <entity-and entity-name="OrderRole" filter-by-date="false" list="supplierAgentOrderRoles" use-cache="false">
            <field-map field-name="orderId" from-field="shipment.primaryOrderId"/>
            <field-map field-name="roleTypeId" value="SUPPLIER_AGENT"/>
        </entity-and>
        <iterate entry="supplierAgentOrderRole" list="supplierAgentOrderRoles">
            <set field="sendToPartyIdMap[supplierAgentOrderRole.partyId]" from="supplierAgentOrderRole.partyId"
                 set-if-empty="true" set-if-null="false"/>
        </iterate>
        <!-- go through all send to parties and get email addresses -->
        <iterate-map key="sendToPartyId" map="sendToPartyIdMap" value="sendToPartyIdValue">
            <entity-and entity-name="PartyAndContactMech" filter-by-date="false" list="sendToPartyPartyAndContactMechs"
                        use-cache="false">
                <field-map field-name="partyId" from-field="sendToPartyId"/>
                <field-map field-name="contactMechTypeId" value="EMAIL_ADDRESS"/>
            </entity-and>
            <iterate entry="sendToPartyPartyAndContactMech" list="sendToPartyPartyAndContactMechs">
                <string-append field="sendEmailMap.sendTo" prefix=","
                               string="${sendToPartyPartyAndContactMech.infoString}"/>
            </iterate>
        </iterate-map>
        <!-- set subject, contentType, templateName, templateData -->
        <set field="sendEmailMap.subject" set-if-empty="true" set-if-null="false"
             value="Scheduled Notification for Shipment ${shipment.shipmentId}"/>
        <if-not-empty field="shipment.primaryOrderId">
            <string-append field="sendEmailMap.subject" string=" for Primary Order ${shipment.primaryOrderId}"/>
        </if-not-empty>
        <set field="sendEmailMap.contentType" set-if-empty="true" set-if-null="false" value="text/html"/>
        <set field="sendEmailMap.templateName" set-if-empty="true" set-if-null="false"
             value="org/ofbiz/shipment/shipment/ShipmentScheduledNotice.ftl"/>
        <set field="sendEmailMap.templateData.shipment" from="shipment" set-if-empty="true" set-if-null="false"/>
        <!-- call sendGenericNotificationEmail service, if enough information was found -->
        <log level="info" message="Sending generic notification email (if all info is in place): ${sendEmailMap}"/>
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="sendEmailMap.sendTo"/>
                    </not>
                    <not>
                        <if-empty field="sendEmailMap.sendFrom"/>
                    </not>
                </and>
            </condition>
            <then>
                <call-service break-on-error="true" error-code="error" in-map-name="sendEmailMap"
                              include-user-login="true" require-new-transaction="false"
                              service-name="sendGenericNotificationEmail" success-code="success"/>
            </then>
            <else>
                <log level="error" message="Insufficient data to send notice email: ${sendEmailMap}"/>
            </else>
        </if>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="balanceItemIssuancesForShipment" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Release the purchase order's items assigned to the shipment but not actually received"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="shipment"/>
        <get-related list="issuances" relation-name="ItemIssuance" use-cache="false" value-field="shipment"/>
        <iterate entry="issuance" list="issuances">
            <entity-and entity-name="ShipmentReceipt" filter-by-date="false" list="receipts" use-cache="false">
                <field-map field-name="shipmentId" from-field="shipment.shipmentId"/>
                <field-map field-name="orderId" from-field="issuance.orderId"/>
                <field-map field-name="orderItemSeqId" from-field="issuance.orderItemSeqId"/>
            </entity-and>
            <iterate entry="receipt" list="receipts">
                <calculate decimal-scale="2" field="issuanceQuantity" rounding-mode="HalfEven" type="BigDecimal">
                    <calcop field="receipt.quantityAccepted" operator="get"/>
                    <calcop field="receipt.quantityRejected" operator="get"/>
                    <calcop field="issuanceQuantity" operator="get"/>
                </calculate>
            </iterate>
            <set field="issuance.quantity" from="issuanceQuantity" set-if-empty="true" set-if-null="false"/>
            <store-value do-cache-clear="true" value-field="issuance"/>
            <clear-field field="issuanceQuantity"/>
        </iterate>
    </simple-method>
    <!-- ShipmentItem services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="createShipmentItem"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create ShipmentItem" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Create ShipmentItem"/>
        <!--<call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>-->
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentItem" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <!-- if no shipmentItemSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id increment-by="1" numeric-padding="5" seq-field-name="shipmentItemSeqId"
                          value-field="newEntity"/>
        <field-to-result field="newEntity.shipmentItemSeqId" result-name="shipmentItemSeqId"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="updateShipmentItem"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update ShipmentItem" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Update ShipmentItem"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentItem" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentItem" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="deleteShipmentItem"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Delete ShipmentItem" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Delete ShipmentItem"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!-- If there is any Shipment Package Content available for this Shipment Item then it cannot be deleted as it require Shipment Package content to be deleted first -->
        <entity-and entity-name="ShipmentPackageContent" filter-by-date="false" list="shipmentPackageContents"
                    use-cache="false">
            <field-map field-name="shipmentId" from-field="parameters.shipmentId"/>
            <field-map field-name="shipmentItemSeqId" from-field="parameters.shipmentItemSeqId"/>
        </entity-and>
        <if-not-empty field="shipmentPackageContents">
            <add-error error-list-name="error_list">
                <fail-property property="ProductErrorShipmentItemCannotBeDeleted" resource="ProductErrorUiLabels"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
            <else>
                <make-value entity-name="ShipmentItem" value-field="lookupPKMap"/>
                <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
                <find-by-primary-key entity-name="ShipmentItem" map="lookupPKMap" use-cache="false"
                                     value-field="lookedUpValue"/>
                <entity-and entity-name="ItemIssuance" list="itemIssuanceList">
                    <field-map field-name="shipmentId" from-field="lookedUpValue.shipmentId"/>
                    <field-map field-name="shipmentItemSeqId" from-field="lookedUpValue.shipmentItemSeqId"/>
                </entity-and>
                <iterate list="itemIssuanceList" entry="itemIssuanceGv">
                    <set field="createDetailMap.inventoryItemId" from="itemIssuanceGv.inventoryItemId"/>
                    <set field="createDetailMap.description" from="itemIssuanceGv.itemIssuanceId"/>
                    <set field="issuedQuantity" from="itemIssuanceGv.quantity" type="BigDecimal"/>
                    <set field="createDetailMap.availableToPromiseDiff" from="issuedQuantity"/>
                    <set field="itemIssuanceGv.cancelQuantity" from="issuedQuantity"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true"
                                  require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>

                    <call-bsh><![CDATA[
                            itemIssuanceGv.put("shipmentId",null);
                            itemIssuanceGv.put("shipmentItemSeqId",null);
                    ]]>
                    </call-bsh>
                    <store-value do-cache-clear="true" value-field="itemIssuanceGv"/>
                </iterate>
                <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
            </else>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="splitShipmentItemByQuantity" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="splitShipmentItemByQuantity"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ShipmentItem" use-cache="false"
                    value-field="originalShipmentItem"/>
        <!-- create new ShipmentItem -->
        <clear-field field="inputMap"/>
        <set field="inputMap.shipmentId" from="originalShipmentItem.shipmentId" set-if-empty="true"
             set-if-null="false"/>
        <set field="inputMap.productId" from="originalShipmentItem.productId" set-if-empty="true" set-if-null="false"/>
        <set field="inputMap.quantity" from="parameters.newItemQuantity" set-if-empty="true" set-if-null="false"/>
        <call-service break-on-error="true" error-code="error" in-map-name="inputMap" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createShipmentItem" success-code="success">
            <result-to-field field="newShipmentItemSeqId" result-name="shipmentItemSeqId"/>
        </call-service>
        <!-- reduce the originalShipmentItem.quantity -->
        <calculate decimal-scale="2" field="originalShipmentItem.quantity" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="originalShipmentItem.quantity" operator="add">
                <calcop field="parameters.newItemQuantity" operator="negative"/>
            </calcop>
        </calculate>
        <!-- update the original ShipmentItem -->
        <set-service-fields map="originalShipmentItem" service-name="updateShipmentItem"
                            to-map="updateOriginalShipmentItemMap"/>
        <call-service break-on-error="true" error-code="error" in-map-name="updateOriginalShipmentItemMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="updateShipmentItem" success-code="success"/>
        <!-- split the OrderShipment record(s) as well for the new quantities, from originalShipmentItem.shipmentItemSeqId to newShipmentItemSeqId -->
        <entity-and entity-name="OrderShipment" filter-by-date="false" list="itemOrderShipmentList" use-cache="false">
            <field-map field-name="shipmentId" from-field="originalShipmentItem.shipmentId"/>
            <field-map field-name="shipmentItemSeqId" from-field="originalShipmentItem.shipmentItemSeqId"/>
        </entity-and>
        <set field="orderShipmentQuantityLeft" from="parameters.newItemQuantity" set-if-empty="true"
             set-if-null="false"/>
        <iterate entry="itemOrderShipment" list="itemOrderShipmentList">
            <if-compare field="orderShipmentQuantityLeft" operator="greater" type="BigDecimal" value="0">
                <if-compare-field field="itemOrderShipment.quantity" operator="greater"
                                  to-field="orderShipmentQuantityLeft" type="BigDecimal">
                    <!-- there is enough in this OrderShipment record, so just adjust it and move on -->
                    <clear-field field="updateOrderShipmentMap"/>
                    <set-service-fields map="itemOrderShipment" service-name="updateOrderShipment"
                                        to-map="updateOrderShipmentMap"/>
                    <calculate decimal-scale="2" field="updateOrderShipmentMap.quantity" rounding-mode="HalfEven"
                               type="BigDecimal">
                        <calcop field="itemOrderShipment.quantity" operator="add">
                            <calcop field="orderShipmentQuantityLeft" operator="negative"/>
                        </calcop>
                    </calculate>
                    <call-service break-on-error="true" error-code="error" in-map-name="updateOrderShipmentMap"
                                  include-user-login="true" require-new-transaction="false"
                                  service-name="updateOrderShipment" success-code="success"/>
                    <clear-field field="createOrderShipmentMap"/>
                    <set field="createOrderShipmentMap.orderId" from="itemOrderShipment.orderId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="createOrderShipmentMap.orderItemSeqId" from="itemOrderShipment.orderItemSeqId"
                         set-if-empty="true" set-if-null="false"/>
                    <set field="createOrderShipmentMap.shipmentId" from="itemOrderShipment.shipmentId"
                         set-if-empty="true" set-if-null="false"/>
                    <set field="createOrderShipmentMap.shipmentItemSeqId" from="newShipmentItemSeqId"
                         set-if-empty="true" set-if-null="false"/>
                    <set field="createOrderShipmentMap.quantity" from="orderShipmentQuantityLeft" set-if-empty="true"
                         set-if-null="false"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createOrderShipmentMap"
                                  include-user-login="true" require-new-transaction="false"
                                  service-name="createOrderShipment" success-code="success"/>
                    <set field="orderShipmentQuantityLeft" set-if-empty="true" set-if-null="false" type="BigDecimal"
                         value="0"/>
                    <else>
                        <!-- not enough on this one, create a new one for the new item and delete this one -->
                        <clear-field field="deleteOrderShipmentMap"/>
                        <set-service-fields map="itemOrderShipment" service-name="deleteOrderShipment"
                                            to-map="deleteOrderShipmentMap"/>
                        <call-service break-on-error="true" error-code="error" in-map-name="deleteOrderShipmentMap"
                                      include-user-login="true"
                                      require-new-transaction="false" service-name="deleteOrderShipment"
                                      success-code="success"/>
                        <clear-field field="createOrderShipmentMap"/>
                        <set field="createOrderShipmentMap.orderId" from="itemOrderShipment.orderId" set-if-empty="true"
                             set-if-null="false"/>
                        <set field="createOrderShipmentMap.orderItemSeqId" from="itemOrderShipment.orderItemSeqId"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="createOrderShipmentMap.shipmentId" from="itemOrderShipment.shipmentId"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="createOrderShipmentMap.shipmentItemSeqId" from="newShipmentItemSeqId"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="createOrderShipmentMap.quantity" from="itemOrderShipment.quantity"
                             set-if-empty="true" set-if-null="false"/>
                        <call-service break-on-error="true" error-code="error" in-map-name="createOrderShipmentMap"
                                      include-user-login="true"
                                      require-new-transaction="false" service-name="createOrderShipment"
                                      success-code="success"/>
                        <calculate decimal-scale="2" field="orderShipmentQuantityLeft" rounding-mode="HalfEven"
                                   type="BigDecimal">
                            <calcop field="orderShipmentQuantityLeft" operator="get"/>
                            <calcop field="itemOrderShipment.quantity" operator="negative"/>
                        </calculate>
                    </else>
                </if-compare-field>
            </if-compare>
        </iterate>
        <field-to-result field="newShipmentItemSeqId"/>
    </simple-method>
    <!-- ShipmentPackage services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="createShipmentPackage"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create ShipmentPackage" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Create ShipmentPackage"/>
        <!--<call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>-->
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentPackage" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <if-compare field="newEntity.shipmentPackageSeqId" operator="equals" type="String" value="New">
            <clear-field field="newEntity.shipmentPackageSeqId"/>
        </if-compare>
        <!-- if no shipmentPackageSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id increment-by="1" numeric-padding="5" seq-field-name="shipmentPackageSeqId"
                          value-field="newEntity"/>
        <field-to-result field="newEntity.shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
        <now-timestamp field="newEntity.dateCreated"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <set field="shipmentId" from="newEntity.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentPackageSeqId" from="newEntity.shipmentPackageSeqId" set-if-empty="true"
             set-if-null="false"/>
        <call-simple-method method-name="ensurePackageRouteSeg"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="updateShipmentPackage"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update ShipmentPackage" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Update ShipmentPackage"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusShipped"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentPackage" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackage" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        <set field="shipmentId" from="lookedUpValue.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentPackageSeqId" from="lookedUpValue.shipmentPackageSeqId" set-if-empty="true"
             set-if-null="false"/>
        <call-simple-method method-name="ensurePackageRouteSeg"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="deleteShipmentPackage"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Delete ShipmentPackage" use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Delete ShipmentPackage"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!-- If there is any Shipment Package Content available for this shipment than Shipment Package cannot be deleted as it require Shipment Package Content to be
			deleted first -->
        <entity-and entity-name="ShipmentPackageContent" filter-by-date="false" list="shipmentPackageContents"
                    use-cache="false">
            <field-map field-name="shipmentId" from-field="parameters.shipmentId"/>
            <field-map field-name="shipmentPackageSeqId" from-field="parameters.shipmentPackageSeqId"/>
        </entity-and>
        <if-not-empty field="shipmentPackageContents">
            <add-error error-list-name="error_list">
                <fail-property property="ProductErrorShipmentPackageCannotBeDeleted" resource="ProductErrorUiLabels"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
            <else>
                <entity-one auto-field-map="true" entity-name="ShipmentPackage" use-cache="false"
                            value-field="lookedUpValue"/>
                <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
            </else>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="ensurePackageRouteSeg"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Ensure ShipmentPackageRouteSeg exists for all RouteSegments for this Package"
                   use-transaction="true">
        <entity-and entity-name="ShipmentRouteSegment" filter-by-date="false" list="shipmentRouteSegments"
                    use-cache="false">
            <field-map field-name="shipmentId" from-field="shipmentId"/>
        </entity-and>
        <iterate entry="shipmentRouteSegment" list="shipmentRouteSegments">
            <entity-one auto-field-map="false" entity-name="ShipmentPackageRouteSeg" use-cache="false"
                        value-field="checkShipmentPackageRouteSeg">
                <field-map field-name="shipmentId" from-field="shipmentId"/>
                <field-map field-name="shipmentPackageSeqId" from-field="shipmentPackageSeqId"/>
                <field-map field-name="shipmentRouteSegmentId"
                           from-field="shipmentRouteSegment.shipmentRouteSegmentId"/>
            </entity-one>
            <if-empty field="checkShipmentPackageRouteSeg">
                <set field="checkShipmentPackageRouteSegMap.shipmentRouteSegmentId"
                     from="shipmentRouteSegment.shipmentRouteSegmentId" set-if-empty="true" set-if-null="false"/>
                <set field="checkShipmentPackageRouteSegMap.shipmentPackageSeqId" from="shipmentPackageSeqId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="checkShipmentPackageRouteSegMap.shipmentId" from="shipmentId" set-if-empty="true"
                     set-if-null="false"/>
                <call-service break-on-error="true" error-code="error" in-map-name="checkShipmentPackageRouteSegMap"
                              include-user-login="true"
                              require-new-transaction="false" service-name="createShipmentPackageRouteSeg"
                              success-code="success"/>
            </if-empty>
        </iterate>
    </simple-method>
    <!-- ShipmentPackageContent services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createShipmentPackageContent" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create ShipmentPackageContent"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Create ShipmentPackageContent"/>
        <!--<call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>-->
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentPackageContent" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <field-to-result field="newEntity.shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateShipmentPackageContent" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Update ShipmentPackageContent"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Update ShipmentPackageContent"/>
        <!--<call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>-->
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentPackageContent" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageContent" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteShipmentPackageContent" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Delete ShipmentPackageContent"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Delete ShipmentPackageContent"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentPackageContent" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageContent" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="addShipmentContentToPackage" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Add Shipment Content To Package"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Create ShipmentPackageContent"/>
        <!--<call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>-->
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentPackageContent" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <find-by-primary-key map="newEntity" use-cache="false" value-field="shipmentPackageContent"/>
        <log level="verbose" message="In addShipmentContentToPackage trying values: ${newEntity}"/>
        <if-empty field="shipmentPackageContent">
            <set-service-fields map="parameters" service-name="createShipmentPackageContent" to-map="createSPCMap"/>
            <call-service break-on-error="true" error-code="error" in-map-name="createSPCMap" include-user-login="true"
                          require-new-transaction="false"
                          service-name="createShipmentPackageContent" success-code="success">
                <result-to-field field="newEntity.shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
            </call-service>
            <else>
                <!-- add the quantities and store it -->
                <calculate decimal-scale="2" field="shipmentPackageContent.quantity" rounding-mode="HalfEven"
                           type="BigDecimal">
                    <calcop field="shipmentPackageContent.quantity" operator="add"/>
                    <calcop field="parameters.quantity" operator="get"/>
                </calculate>
                <set-service-fields map="shipmentPackageContent" service-name="updateShipmentPackageContent"
                                    to-map="updateSPCMap"/>
                <call-service break-on-error="true" error-code="error" in-map-name="updateSPCMap"
                              include-user-login="true" require-new-transaction="false"
                              service-name="updateShipmentPackageContent" success-code="success"/>
            </else>
        </if-empty>
        <log level="info" message="Shipment package: ${newEntity}"/>
        <field-to-result field="newEntity.shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
    </simple-method>
    <!-- ShipmentPackageRouteSeg services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createShipmentPackageRouteSeg" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create ShipmentPackageRouteSeg"
                   use-transaction="true">
        <make-value entity-name="ShipmentPackageRouteSeg" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateShipmentPackageRouteSeg" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Update ShipmentPackageRouteSeg"
                   use-transaction="true">
        <make-value entity-name="ShipmentPackageRouteSeg" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteShipmentPackageRouteSeg" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Delete ShipmentPackageRouteSeg"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Delete ShipmentPackageRouteSeg"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentPackageRouteSeg" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>
    <!-- ShipmentContactMech services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createShipmentContactMech" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create ShipmentContactMech"
                   use-transaction="true">
        <make-value entity-name="ShipmentContactMech" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateShipmentContactMech" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Update ShipmentContactMech"
                   use-transaction="true">
        <make-value entity-name="ShipmentContactMech" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentContactMech" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteShipmentContactMech" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Delete ShipmentContactMech"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Delete ShipmentContactMech"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentContactMech" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key entity-name="ShipmentContactMech" map="lookupPKMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>
    <!-- ShipmentRouteSegment services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createShipmentRouteSegment" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create ShipmentRouteSegment"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Create ShipmentRouteSegment"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <make-value entity-name="ShipmentRouteSegment" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <!-- if no shipmentRouteSegmentSeqId, generate one based on existing items, ie one greater than the current higher number -->
        <make-next-seq-id increment-by="1" numeric-padding="5" seq-field-name="shipmentRouteSegmentId"
                          value-field="newEntity"/>
        <field-to-result field="newEntity.shipmentRouteSegmentId" result-name="shipmentRouteSegmentId"/>
        <if-empty field="newEntity.carrierServiceStatusId">
            <set field="newEntity.carrierServiceStatusId" set-if-empty="true" set-if-null="false"
                 value="SHRSCS_NOT_STARTED"/>
        </if-empty>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <set field="shipmentId" from="newEntity.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentRouteSegmentId" from="newEntity.shipmentRouteSegmentId" set-if-empty="true"
             set-if-null="false"/>
        <call-simple-method method-name="ensureRouteSegPackage"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateShipmentRouteSegment" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Update ShipmentRouteSegment"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Update ShipmentRouteSegment"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusDelivered"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <entity-one auto-field-map="true" entity-name="ShipmentRouteSegment" use-cache="false"
                    value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <if-empty field="newEntity.carrierServiceStatusId">
            <set field="newEntity.carrierServiceStatusId" set-if-empty="true" set-if-null="false"
                 value="SHRSCS_NOT_STARTED"/>
        </if-empty>
        <set field="lookedUpValue.updatedByUserLoginId" from="userLogin.userLoginId" set-if-empty="true"
             set-if-null="false"/>
        <now-timestamp field="lookedUpValue.lastUpdatedDate"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        <set field="shipmentId" from="lookedUpValue.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentRouteSegmentId" from="lookedUpValue.shipmentRouteSegmentId" set-if-empty="true"
             set-if-null="false"/>
        <call-simple-method method-name="ensureRouteSegPackage"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteShipmentRouteSegment" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Delete ShipmentRouteSegment"
                   use-transaction="true">
        <set field="operationName" set-if-empty="true" set-if-null="false" value="Delete ShipmentRouteSegment"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusPacked"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <entity-one auto-field-map="true" entity-name="ShipmentRouteSegment" use-cache="false"
                    value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="ensureRouteSegPackage"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Ensure ShipmentPackageRouteSeg exists for all Packages for this RouteSegment"
                   use-transaction="true">
        <entity-and entity-name="ShipmentPackage" filter-by-date="false" list="shipmentPackages" use-cache="false">
            <field-map field-name="shipmentId" from-field="shipmentId"/>
        </entity-and>
        <iterate entry="shipmentPackage" list="shipmentPackages">
            <entity-one auto-field-map="false" entity-name="ShipmentPackageRouteSeg" use-cache="false"
                        value-field="checkShipmentPackageRouteSeg">
                <field-map field-name="shipmentId" from-field="shipmentId"/>
                <field-map field-name="shipmentRouteSegmentId" from-field="shipmentRouteSegmentId"/>
                <field-map field-name="shipmentPackageSeqId" from-field="shipmentPackage.shipmentPackageSeqId"/>
            </entity-one>
            <if-empty field="checkShipmentPackageRouteSeg">
                <set field="createShipmentPackageRouteSegMap.shipmentId" from="shipmentId" set-if-empty="true"
                     set-if-null="false"/>
                <set field="createShipmentPackageRouteSegMap.shipmentRouteSegmentId" from="shipmentRouteSegmentId"
                     set-if-empty="true" set-if-null="false"/>
                <set field="createShipmentPackageRouteSegMap.shipmentPackageSeqId"
                     from="shipmentPackage.shipmentPackageSeqId" set-if-empty="true" set-if-null="false"/>
                <call-service break-on-error="true" error-code="error" in-map-name="createShipmentPackageRouteSegMap"
                              include-user-login="true"
                              require-new-transaction="false" service-name="createShipmentPackageRouteSeg"
                              success-code="success"/>
            </if-empty>
        </iterate>
    </simple-method>
    <!-- Check the Status of a Shipment to see if it can be changed - meant to be called in-line -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="checkCanChangeShipmentStatusPacked" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line"
                   use-transaction="true">
        <set field="fromStatusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_PACKED"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusGeneral"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="checkCanChangeShipmentStatusShipped" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line"
                   use-transaction="true">
        <set field="fromStatusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_SHIPPED"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusGeneral"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="checkCanChangeShipmentStatusDelivered"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line"
                   use-transaction="true">
        <set field="fromStatusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_DELIVERED"/>
        <call-simple-method method-name="checkCanChangeShipmentStatusGeneral"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="checkCanChangeShipmentStatusGeneral" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Check the Status of a Shipment to see if it can be changed - meant to be called in-line"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="testShipment"/>
        <if>
            <condition>
                <or>
                    <and>
                        <or>
                            <if-empty field="fromStatusId"/>
                            <if-compare field="fromStatusId" operator="equals" type="String" value="SHIPMENT_PACKED"/>
                        </or>
                        <if-compare field="testShipment.statusId" operator="equals" type="String"
                                    value="SHIPMENT_PACKED"/>
                    </and>
                    <and>
                        <or>
                            <if-compare field="fromStatusId" operator="equals" type="String" value="SHIPMENT_PACKED"/>
                            <if-compare field="fromStatusId" operator="equals" type="String" value="SHIPMENT_SHIPPED"/>
                        </or>
                        <if-compare field="testShipment.statusId" operator="equals" type="String"
                                    value="SHIPMENT_SHIPPED"/>
                    </and>
                    <and>
                        <or>
                            <if-compare field="fromStatusId" operator="equals" type="String" value="SHIPMENT_PACKED"/>
                            <if-compare field="fromStatusId" operator="equals" type="String" value="SHIPMENT_SHIPPED"/>
                            <if-compare field="fromStatusId" operator="equals" type="String"
                                        value="SHIPMENT_DELIVERED"/>
                        </or>
                        <if-compare field="testShipment.statusId" operator="equals" type="String"
                                    value="SHIPMENT_DELIVERED"/>
                    </and>
                    <if-compare field="testShipment.statusId" operator="equals" type="String"
                                value="SHIPMENT_CANCELLED"/>
                </or>
            </condition>
            <then>
                <get-related-one relation-name="StatusItem" to-value-field="testShipmentStatus" use-cache="false"
                                 value-field="testShipment"/>
                <string-to-list list="error_list"
                                string="Cannot perform operation ${operationName} when the shipment is in the ${testShipmentStatus.description} [${testShipment.statusId}] status."/>
            </then>
        </if>
    </simple-method>
    <!-- shipment method type services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createCarrierShipmentMethod" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Creates a CarrierShipmentMethod"
                   use-transaction="true">
        <make-value entity-name="CarrierShipmentMethod" value-field="carrierShipmentMethod"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="carrierShipmentMethod"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="carrierShipmentMethod"/>
        <create-value do-cache-clear="true" or-store="false" value-field="carrierShipmentMethod"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateCarrierShipmentMethod" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Updates a CarrierShipmentMethod"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="CarrierShipmentMethod" use-cache="false"
                    value-field="carrierShipmentMethod"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="carrierShipmentMethod"/>
        <store-value do-cache-clear="true" value-field="carrierShipmentMethod"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteCarrierShipmentMethod" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Removes a CarrierShipmentMethod"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="CarrierShipmentMethod" use-cache="false"
                    value-field="carrierShipmentMethod"/>
        <remove-value do-cache-clear="true" value-field="carrierShipmentMethod"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="createShipmentMethodType"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Creates a ShipmentMethodType" use-transaction="true">
        <make-value entity-name="ShipmentMethodType" value-field="shipmentMethodType"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="shipmentMethodType"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="shipmentMethodType"/>
        <create-value do-cache-clear="true" or-store="false" value-field="shipmentMethodType"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="updateShipmentMethodType"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Updates a ShipmentMethodType" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ShipmentMethodType" use-cache="false"
                    value-field="shipmentMethodType"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="shipmentMethodType"/>
        <store-value do-cache-clear="true" value-field="shipmentMethodType"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="deleteShipmentMethodType"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Deletes a ShipmentMethodType" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ShipmentMethodType" use-cache="false"
                    value-field="shipmentMethodType"/>
        <remove-value do-cache-clear="true" value-field="shipmentMethodType"/>
    </simple-method>
    <!-- quick ship entire order in one package per facility & ship group -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="quickShipEntireOrder"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Quick ships an entire order from multiple facilities" use-transaction="true">
        <!-- first get the order header; make sure we have a product store -->
        <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
        <entity-one auto-field-map="true" entity-name="OrderRxHeader" use-cache="false" value-field="lookedUpValue"/>
        <if-not-empty field="lookedUpValue.orderId">
            <if-compare field="parameters.patientPayable" type="BigDecimal" operator="not-equals" value="">
                <set field="lookedUpValue.patientPayable" value="${parameters.patientPayable}"/>
                <log level="always" message="Patient Payable Amount : ${parameters.patientPayable}"/>
            </if-compare>
            <if-compare field="parameters.corporatePayable" type="BigDecimal" operator="not-equals" value="">
                <set field="lookedUpValue.corporatePayable" value="${parameters.corporatePayable}"/>
                <log level="always" message="Corporate Payable Amount : ${parameters.corporatePayable}"/>
            </if-compare>
            <if-compare field="parameters.insurancePayable" type="BigDecimal" operator="not-equals" value="">
                <set field="lookedUpValue.insurancePayable" value="${parameters.insurancePayable}"/>
                <log level="always" message="Insurance Payable Amount : ${parameters.insurancePayable}"/>
            </if-compare>
            <store-value do-cache-clear="true" value-field="lookedUpValue"/>

            <set field="orderId" from="lookedUpValue.orderId" set-if-empty="true" set-if-null="false"/>
            <set field="doctor" from="lookedUpValue.doctorName" set-if-empty="true" set-if-null="false"/>
            <set field="clinic" from="lookedUpValue.clinicName" set-if-empty="true" set-if-null="false"/>
            <set field="clinicId" from="lookedUpValue.clinicId" set-if-empty="true" set-if-null="false"/>
            <set field="isOrderFromClinic" from="lookedUpValue.isOrderFromClinic" set-if-empty="true" set-if-null="false"/>

            <if-compare field="isOrderFromClinic" operator="equals" type="String" value="Y">
                <entity-and entity-name="ReferralContract" filter-by-date="false" list="referralList" use-cache="false">
                    <field-map field-name="referralName" from-field="doctor"/>
                    <field-map field-name="clinicName" from-field="clinic"/>
                    <field-map field-name="clinicId" from-field="clinicId"/>
                    <field-map field-name="paymentPoint" value="ON_BILL"/>
                    <field-map field-name="contractStatus" value="ACTIVE"/>
                </entity-and>
                <if-not-empty field="referralList">
                    <entity-and entity-name="ReferralContractPayment" filter-by-date="false" list="referralContractPaymentList" use-cache="false">
                        <field-map field-name="orderId" from-field="orderId"/>
                        <field-map field-name="paymentStatusId" value="REF_PMNT_PENDING"/>
                    </entity-and>
                    <if-not-empty field="referralContractPaymentList">
                        <first-from-list entry="referralContractPayment" list="referralContractPaymentList"/>
                        <set field="referralContractPayment.paymentStatusId" value="REF_PMNT_READY"/>
                        <store-value do-cache-clear="true" value-field="referralContractPayment"/>
                    </if-not-empty>
                </if-not-empty>
            </if-compare>
        </if-not-empty>
        <if-empty field="orderHeader.productStoreId">
            <!-- no store cannot use quick ship; throw error -->
            <add-error error-list-name="error_list">
                <fail-property property="FacilityShipmentMissingProductStore" resource="ProductUiLabels"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-empty>
        <!-- get the product store entity -->
        <entity-one auto-field-map="false" entity-name="ProductStore" use-cache="false" value-field="productStore">
            <field-map field-name="productStoreId" from-field="orderHeader.productStoreId"/>
        </entity-one>
        <if-compare field="productStore.reserveInventory" operator="not-equals" type="String" value="Y">
            <!-- no reservations; no shipment; cannot use quick ship -->
            <set field="argListNames[]" from="productStore.productStoreId" set-if-empty="true" set-if-null="false"/>
            <property-to-field arg-list-name="argListNames" field="errMsg" no-locale="false"
                               property="FacilityShipmentNotCreatedForNotReserveInventory"
                               resource="ProductUiLabels"/>
            <add-error error-list-name="error_list">
                <fail-message message="${errMsg}"/>
            </add-error>
        </if-compare>
        <if-compare field="productStore.explodeOrderItems" operator="equals" type="String" value="Y">
            <!-- can't insert duplicate rows in shipmentPackageContent -->
            <set field="argListNames[]" from="productStore.productStoreId" set-if-empty="true" set-if-null="false"/>
            <property-to-field arg-list-name="argListNames" field="errMsg" no-locale="false"
                               property="FacilityShipmentNotCreatedForExplodesOrderItems"
                               resource="ProductUiLabels"/>
            <add-error error-list-name="error_list">
                <fail-message message="${errMsg}"/>
            </add-error>
        </if-compare>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!-- locate shipping facilities associated with order item rez's -->
        <entity-condition distinct="false" entity-name="OrderItemAndShipGrpInvResAndItem" filter-by-date="false"
                          list="orderItemAndShipGrpInvResAndItemList"
                          use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="orderId" from-field="orderHeader.orderId" ignore="false" ignore-case="false"
                                ignore-if-empty="false"
                                ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="statusId" ignore="false" ignore-case="false" ignore-if-empty="false"
                                ignore-if-null="false" operator="equals"
                                value="ITEM_APPROVED"/>
            </condition-list>
        </entity-condition>
        <iterate entry="orderItemAndShipGrpInvResAndItem" list="orderItemAndShipGrpInvResAndItemList">
            <if>
                <condition>
                    <not>
                        <if-compare-field field="orderItemShipGrpInvResFacilityIds" operator="contains"
                                          to-field="orderItemAndShipGrpInvResAndItem.facilityId"
                                          type="String"/>
                    </not>
                </condition>
                <then>
                    <field-to-list field="orderItemAndShipGrpInvResAndItem.facilityId"
                                   list="orderItemShipGrpInvResFacilityIds"/>
                </then>
            </if>
        </iterate>
        <call-simple-method method-name="getOrderItemShipGroupLists"/>
        <!-- traverse facilities, instantiate shipment for each -->
        <iterate entry="orderItemShipGrpInvResFacilityId" list="orderItemShipGrpInvResFacilityIds">
            <!-- sanity check for valid facility -->
            <entity-one auto-field-map="true" entity-name="Facility" use-cache="false" value-field="facility">
                <field-map field-name="facilityId" from-field="orderItemShipGrpInvResFacilityId"/>
            </entity-one>
            <!-- should never be empty - referential integrity enforced -->
            <set field="eventDate" from="parameters.eventDate" set-if-empty="true" set-if-null="false"/>
            <call-simple-method method-name="createShipmentForFacilityAndShipGroup"/>
        </iterate>
        <field-to-result field="shipmentShipGroupFacilityList"/>
        <field-to-result field="successMessageList"/>
        <if-empty field="shipmentShipGroupFacilityList">
            <add-error error-list-name="error_list">
                <fail-property property="FacilityShipmentNotCreated" resource="ProductUiLabels"/>
            </add-error>
        </if-empty>
        <check-errors error-code="error" error-list-name="error_list"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="quickDropShipOrder"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create and complete a drop shipment for a ship group" use-transaction="true">
        <set field="shipmentContext.primaryOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentContext.primaryShipGroupSeqId" from="parameters.shipGroupSeqId" set-if-empty="true"
             set-if-null="false"/>
        <set field="shipmentContext.statusId" set-if-empty="true" set-if-null="false" value="PURCH_SHIP_CREATED"/>
        <set field="shipmentContext.shipmentTypeId" set-if-empty="true" set-if-null="false" value="DROP_SHIPMENT"/>
        <call-service break-on-error="true" error-code="error" in-map-name="shipmentContext" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createShipment" success-code="success">
            <result-to-field field="shipmentId" result-name="shipmentId"/>
        </call-service>
        <check-errors error-code="error" error-list-name="error_list"/>
        <set field="updateShipmentContext.shipmentId" from="shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="updateShipmentContext.statusId" set-if-empty="true" set-if-null="false" value="PURCH_SHIP_SHIPPED"/>
        <call-service break-on-error="true" error-code="error" in-map-name="updateShipmentContext"
                      include-user-login="true" require-new-transaction="false"
                      service-name="updateShipment" success-code="success"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <set field="updateShipmentContext.statusId" set-if-empty="true" set-if-null="false"
             value="PURCH_SHIP_RECEIVED"/>
        <call-service break-on-error="true" error-code="error" in-map-name="updateShipmentContext"
                      include-user-login="true" require-new-transaction="false"
                      service-name="updateShipment" success-code="success"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <field-to-result field="shipmentId" result-name="shipmentId"/>
        <!-- Iterate through the order items in the ship group -->
        <entity-and entity-name="OrderItemShipGroupAssoc" filter-by-date="false" list="orderItemShipGroupAssocs"
                    use-cache="false">
            <field-map field-name="orderId" from-field="parameters.orderId"/>
            <field-map field-name="shipGroupSeqId" from-field="parameters.shipGroupSeqId"/>
        </entity-and>
        <iterate entry="orderItemShipGroupAssoc" list="orderItemShipGroupAssocs">
            <get-related-one relation-name="OrderItem" to-value-field="orderItem" use-cache="false"
                             value-field="orderItemShipGroupAssoc"/>
            <!-- Set the item status to completed -->
            <set field="itemStatusContext.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
            <set field="itemStatusContext.orderItemSeqId" from="orderItem.orderItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="itemStatusContext.statusId" set-if-empty="true" set-if-null="false" value="ITEM_COMPLETED"/>
            <call-service break-on-error="true" error-code="error" in-map-name="itemStatusContext"
                          include-user-login="true" require-new-transaction="false"
                          service-name="changeOrderItemStatus" success-code="success"/>
            <check-errors error-code="error" error-list-name="error_list"/>
            <!-- Set the status of any linked sales order items to completed as well -->
            <entity-and entity-name="OrderItemAssoc" filter-by-date="false" list="orderItemAssocs" use-cache="false">
                <field-map field-name="toOrderId" from-field="parameters.orderId"/>
                <field-map field-name="toOrderItemSeqId" from-field="orderItem.orderItemSeqId"/>
                <field-map field-name="orderItemAssocTypeId" value="DROP_SHIPMENT"/>
            </entity-and>
            <if-not-empty field="orderItemAssocs">
                <iterate entry="orderItemAssoc" list="orderItemAssocs">
                    <set field="itemStatusContext.orderId" from="orderItemAssoc.orderId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="itemStatusContext.orderItemSeqId" from="orderItemAssoc.orderItemSeqId"
                         set-if-empty="true" set-if-null="false"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="itemStatusContext"
                                  include-user-login="true" require-new-transaction="false"
                                  service-name="changeOrderItemStatus" success-code="success"/>
                    <check-errors error-code="error" error-list-name="error_list"/>
                </iterate>
            </if-not-empty>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="quickShipPurchaseOrder"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Quick ships an entire purchase order to a facility" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
        <entity-one auto-field-map="true" entity-name="Facility" use-cache="false" value-field="facility"/>
        <call-simple-method method-name="getOrderItemShipGroupLists"/>
        <call-simple-method method-name="createShipmentForFacilityAndShipGroup"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getOrderItemShipGroupLists" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Sub-method used by quickShip methods to get a list of OrderItemAndShipGroupAssoc and a Map of shipGroupId -&gt; OrderItemAndShipGroupAssoc"
                   use-transaction="true">
        <!-- lookup all the approved items, doing by item because the item must be approved before shipping -->
        <set field="order" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
        <set field="status" set-if-empty="true" set-if-null="false" value="ITEM_APPROVED"/>
        <entity-and entity-name="OrderItemAndShipGroupAssoc" filter-by-date="false"
                    list="orderItemAndShipGroupAssocList" use-cache="false">
            <field-map field-name="orderId" from-field="order"/>
            <field-map field-name="statusId" from-field="status"/>
        </entity-and>
        <!-- make sure we have something to ship -->
        <if-empty field="orderItemAndShipGroupAssocList">
            <add-error error-list-name="error_list">
                <fail-message message="No items available to ship at this time"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-empty>
        <get-related list="orderItemShipGroupList" relation-name="OrderItemShipGroup" use-cache="false"
                     value-field="orderHeader"/>
        <!-- group orderItems (actually OrderItemAndShipGroupAssocs) by shipGroupSeqId in a Map with List values This Map is actually used only for sales orders' shipments
			right now. -->
        <iterate entry="orderItemAndShipGroupAssoc" list="orderItemAndShipGroupAssocList">
            <field-to-list field="orderItemAndShipGroupAssoc"
                           list="orderItemListByShGrpMap[orderItemAndShipGroupAssoc.shipGroupSeqId]"/>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createShipmentForFacilityAndShipGroup"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Sub-method used by quickShip methods to create a shipment" use-transaction="true">
        <!-- for OrderItemShipGroup need to split all OISGIRs into their ship groups and create a shipment for each -->
        <iterate entry="orderItemShipGroup" list="orderItemShipGroupList">
            <!-- lookup all the approved items -->
            <entity-and entity-name="OrderItemAndShipGroupAssoc" filter-by-date="false" list="orderItems"
                        use-cache="false">
                <field-map field-name="orderId" from-field="orderHeader.orderId"/>
                <field-map field-name="shipGroupSeqId" from-field="orderItemShipGroup.shipGroupSeqId"/>
                <field-map field-name="statusId" value="ITEM_APPROVED"/>
            </entity-and>
            <set field="perShipGroupItemList" from="orderItemListByShGrpMap[orderItemShipGroup.shipGroupSeqId]"
                 set-if-empty="true" set-if-null="false"/>
            <!-- make sure we have something to ship -->
            <if-empty field="perShipGroupItemList">
                <set field="argListNames[]" from="orderItemShipGroup.shipGroupSeqId" set-if-empty="true"
                     set-if-null="false"/>
                <property-to-field arg-list-name="argListNames" field="successMessage" no-locale="false"
                                   property="FacilityShipmentNoItemsAvailableToShip"
                                   resource="ProductUiLabels"/>
                <else>
                    <!-- create the shipment for this facility and ship group combination -->
                    <set field="shipmentContext.primaryOrderId" from="orderHeader.orderId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="shipmentContext.primaryShipGroupSeqId" from="orderItemShipGroup.shipGroupSeqId"
                         set-if-empty="true" set-if-null="false"/>
                    <!-- for Sales Shipment, order items' reservation facilityId is the originFacilityId, and the initial status is "INPUT" for Purchase Shipment, the facilityId
						parameter is the destinationFacilityId, and the initial status is "CREATED" -->
                    <if>
                        <condition>
                            <if-compare field="orderHeader.orderTypeId" operator="equals" type="String"
                                        value="SALES_ORDER"/>
                        </condition>
                        <then>
                            <if-not-empty field="orderItemShipGroup.vendorPartyId">
                                <set field="partyIdFrom" from="orderItemShipGroup.vendorPartyId" set-if-empty="true"
                                     set-if-null="false"/>
                                <else>
                                    <entity-one auto-field-map="false" entity-name="Facility" use-cache="false"
                                                value-field="facility">
                                        <field-map field-name="facilityId"
                                                   from-field="orderItemShipGrpInvResFacilityId"/>
                                    </entity-one>
                                    <if-not-empty field="facility.ownerPartyId">
                                        <set field="partyIdFrom" from="facility.ownerPartyId" set-if-empty="true"
                                             set-if-null="false"/>
                                    </if-not-empty>
                                    <if-empty field="partyIdFrom">
                                        <entity-and entity-name="OrderRole" filter-by-date="false" list="orderRoles"
                                                    use-cache="false">
                                            <field-map field-name="orderId" from-field="orderHeader.orderId"/>
                                            <field-map field-name="roleTypeId" value="SHIP_FROM_VENDOR"/>
                                        </entity-and>
                                        <if-not-empty field="orderRoles">
                                            <first-from-list entry="orderRole" list="orderRoles"/>
                                            <set field="partyIdFrom" from="orderRole.partyId" set-if-empty="true"
                                                 set-if-null="false"/>
                                            <else>
                                                <entity-and entity-name="OrderRole" filter-by-date="false"
                                                            list="orderRoles" use-cache="false">
                                                    <field-map field-name="orderId" from-field="orderHeader.orderId"/>
                                                    <field-map field-name="roleTypeId" value="BILL_FROM_VENDOR"/>
                                                </entity-and>
                                                <first-from-list entry="orderRole" list="orderRoles"/>
                                                <set field="partyIdFrom" from="orderRole.partyId" set-if-empty="true"
                                                     set-if-null="false"/>
                                            </else>
                                        </if-not-empty>
                                    </if-empty>
                                </else>
                            </if-not-empty>
                            <set field="shipmentContext.partyIdFrom" from="partyIdFrom" set-if-empty="true"
                                 set-if-null="false"/>
                            <set field="shipmentContext.originFacilityId" from="orderItemShipGrpInvResFacilityId"
                                 set-if-empty="true" set-if-null="false"/>
                            <set field="shipmentContext.statusId" set-if-empty="true" set-if-null="false"
                                 value="SHIPMENT_INPUT"/>
                        </then>
                        <else>
                            <set field="shipmentContext.destinationFacilityId" from="facility.facilityId"
                                 set-if-empty="true" set-if-null="false"/>
                            <set field="shipmentContext.statusId" set-if-empty="true" set-if-null="false"
                                 value="PURCH_SHIP_CREATED"/>
                        </else>
                    </if>
                    <call-service break-on-error="true" error-code="error" in-map-name="shipmentContext"
                                  include-user-login="true" require-new-transaction="false"
                                  service-name="createShipment" success-code="success">
                        <result-to-field field="shipmentLookupMap.shipmentId" result-name="shipmentId"/>
                    </call-service>
                    <find-by-primary-key entity-name="Shipment" map="shipmentLookupMap" use-cache="false"
                                         value-field="shipment"/>
                    <if>
                        <condition>
                            <if-compare field="orderHeader.orderTypeId" operator="equals" type="String"
                                        value="SALES_ORDER"/>
                        </condition>
                        <then>
                            <iterate entry="orderItemAndShipGroupAssoc" list="perShipGroupItemList">
                                <!-- just get the OrderItemShipGrpInvResAndItem records for this facility and this ship group, since that is what this shipment is for -->
                                <clear-field field="itemResFindMap"/>
                                <set field="itemResFindMap.facilityId" from="orderItemShipGrpInvResFacilityId"
                                     set-if-empty="true" set-if-null="false"/>
                                <get-related list="itemResList" map="itemResFindMap"
                                             relation-name="OrderItemShipGrpInvResAndItem" use-cache="false"
                                             value-field="orderItemAndShipGroupAssoc"/>
                                <iterate entry="itemRes" list="itemResList">
                                    <set field="issueContext.shipmentId" from="shipment.shipmentId" set-if-empty="true"
                                         set-if-null="false"/>
                                    <set field="issueContext.orderId" from="itemRes.orderId" set-if-empty="true"
                                         set-if-null="false"/>
                                    <set field="issueContext.orderItemSeqId" from="itemRes.orderItemSeqId"
                                         set-if-empty="true" set-if-null="false"/>
                                    <set field="issueContext.shipGroupSeqId" from="itemRes.shipGroupSeqId"
                                         set-if-empty="true" set-if-null="false"/>
                                    <set field="issueContext.inventoryItemId" from="itemRes.inventoryItemId"
                                         set-if-empty="true" set-if-null="false"/>
                                    <set field="issueContext.quantity" from="itemRes.quantity" set-if-empty="true"
                                         set-if-null="false"/>
                                    <set field="issueContext.eventDate" from="eventDate" set-if-empty="true"
                                         set-if-null="false"/>
                                    <call-service break-on-error="true" error-code="error" in-map-name="issueContext"
                                                  include-user-login="true" require-new-transaction="false"
                                                  service-name="issueOrderItemShipGrpInvResToShipment"
                                                  success-code="success"/>
                                </iterate>
                            </iterate>
                        </then>
                        <else>
                            <!-- Issue all purchase order items -->
                            <clear-field field="itemResFindMap"/>
                            <set field="itemResFindMap.facilityId" from="facilityId" set-if-empty="true"
                                 set-if-null="false"/>
                            <iterate entry="item" list="orderItemAndShipGroupAssocList">
                                <set field="issueContext.shipmentId" from="shipment.shipmentId" set-if-empty="true"
                                     set-if-null="false"/>
                                <set field="issueContext.orderId" from="item.orderId" set-if-empty="true"
                                     set-if-null="false"/>
                                <set field="issueContext.orderItemSeqId" from="item.orderItemSeqId" set-if-empty="true"
                                     set-if-null="false"/>
                                <set field="issueContext.shipGroupSeqId" from="item.shipGroupSeqId" set-if-empty="true"
                                     set-if-null="false"/>
                                <set field="issueContext.quantity" from="item.quantity" set-if-empty="true"
                                     set-if-null="false"/>
                                <call-service break-on-error="true" error-code="error" in-map-name="issueContext"
                                              include-user-login="true" require-new-transaction="false"
                                              service-name="issueOrderItemToShipment" success-code="success"/>
                            </iterate>
                        </else>
                    </if>
                    <!-- place all issued items into a single package -->
                    <entity-and entity-name="ItemIssuance" filter-by-date="false" list="itemIssuances"
                                use-cache="false">
                        <field-map field-name="orderId" from-field="orderHeader.orderId"/>
                        <field-map field-name="shipGroupSeqId" from-field="orderItemShipGroup.shipGroupSeqId"/>
                        <field-map field-name="shipmentId" from-field="shipment.shipmentId"/>
                    </entity-and>
                    <set field="shipmentPackageSeqId" set-if-empty="true" set-if-null="false" value="New"/>
                    <iterate entry="itemIssuance" list="itemIssuances">
                        <log level="verbose" message="In quick ship adding item to package: ${shipmentPackageSeqId}"/>
                        <clear-field field="shipItemContext"/>
                        <set field="shipItemContext.shipmentId" from="itemIssuance.shipmentId" set-if-empty="true"
                             set-if-null="false"/>
                        <set field="shipItemContext.shipmentItemSeqId" from="itemIssuance.shipmentItemSeqId"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="shipItemContext.quantity" from="itemIssuance.quantity" set-if-empty="true"
                             set-if-null="false"/>
                        <set field="shipItemContext.shipmentPackageSeqId" from="shipmentPackageSeqId"
                             set-if-empty="true" set-if-null="false"/>
                        <call-service break-on-error="true" error-code="error" in-map-name="shipItemContext"
                                      include-user-login="true" require-new-transaction="false"
                                      service-name="addShipmentContentToPackage" success-code="success">
                            <result-to-field field="shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
                        </call-service>
                    </iterate>
                    <if>
                        <condition>
                            <if-compare field="orderHeader.orderTypeId" operator="equals" type="String"
                                        value="SALES_ORDER"/>
                        </condition>
                        <then>
                            <!-- update the shipment status to packed -->
                            <set field="packedContext.shipmentId" from="shipment.shipmentId" set-if-empty="true"
                                 set-if-null="false"/>
                            <set field="packedContext.eventDate" from="eventDate" set-if-empty="true"
                                 set-if-null="false"/>
                            <set field="packedContext.statusId" set-if-empty="true" set-if-null="false"
                                 value="SHIPMENT_PACKED"/>
                            <call-service break-on-error="true" error-code="error" in-map-name="packedContext"
                                          include-user-login="true" require-new-transaction="false"
                                          service-name="updateShipment" success-code="success"/>
                            <!-- update the shipment status to shipped -->
                            <set field="packedContext.shipmentId" from="shipment.shipmentId" set-if-empty="true"
                                 set-if-null="false"/>
                            <set field="packedContext.statusId" set-if-empty="true" set-if-null="false"
                                 value="SHIPMENT_SHIPPED"/>
                            <call-service break-on-error="true" error-code="error" in-map-name="packedContext"
                                          include-user-login="true" require-new-transaction="false"
                                          service-name="updateShipment" success-code="success"/>
                            <set field="packedContext.shipmentId" from="shipment.shipmentId" set-if-empty="true"
                                 set-if-null="false"/>
                            <set field="packedContext.statusId" set-if-empty="true" set-if-null="false"
                                 value="SHIPMENT_DELIVERED"/>
                            <call-service break-on-error="true" error-code="error" in-map-name="packedContext"
                                          include-user-login="true" require-new-transaction="false"
                                          service-name="updateShipment" success-code="success"/>
                        </then>
                        <else>
                            <!-- PURCHASE_ORDER -->
                            <!-- update the shipment status to shipped -->
                            <set field="packedContext.shipmentId" from="shipment.shipmentId" set-if-empty="true"
                                 set-if-null="false"/>
                            <set field="packedContext.statusId" set-if-empty="true" set-if-null="false"
                                 value="PURCH_SHIP_SHIPPED"/>
                            <call-service break-on-error="true" error-code="error" in-map-name="packedContext"
                                          include-user-login="true" require-new-transaction="false"
                                          service-name="updateShipment" success-code="success"/>
                        </else>
                    </if>
                    <set field="shipmentShipGroupFacility.shipmentId" from="shipment.shipmentId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="shipmentShipGroupFacility.facilityId" from="facility.facilityId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="shipmentShipGroupFacility.shipGroupSeqId" from="orderItemShipGroup.shipGroupSeqId"
                         set-if-empty="true" set-if-null="false"/>
                    <field-to-list field="shipmentShipGroupFacility" list="shipmentShipGroupFacilityList"/>
                    <set field="argListNames[]" from="shipmentShipGroupFacility.shipmentId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="argListNames[]" from="shipmentShipGroupFacility.shipGroupSeqId" set-if-empty="true"
                         set-if-null="false"/>
                    <set field="argListNames[]" from="shipmentShipGroupFacility.facilityId" set-if-empty="true"
                         set-if-null="false"/>
                    <property-to-field arg-list-name="argListNames" field="successMessage" no-locale="false"
                                       property="FacilityShipmentIdCreated" resource="ProductUiLabels"/>
                    <clear-field field="shipmentShipGroupFacility"/>
                </else>
            </if-empty>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="createOrderShipmentPlan"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create Shipment, ShipmentItems and OrderShipment" use-transaction="true">
        <!-- first get the order header; make sure we have a product store -->
        <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
        <if-empty field="orderHeader.productStoreId">
            <!-- no store cannot use quick ship; throw error -->
            <add-error error-list-name="error_list">
                <fail-message message="No ProductStore associated with order; cannot use Quick Ship"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-empty>
        <!-- get the product store entity -->
        <entity-one auto-field-map="false" entity-name="ProductStore" use-cache="false" value-field="productStore">
            <field-map field-name="productStoreId" from-field="orderHeader.productStoreId"/>
        </entity-one>
        <get-related list="orderItemShipGroupList" relation-name="OrderItemShipGroup" use-cache="false"
                     value-field="orderHeader"/>
        <iterate entry="orderItemShipGroup" list="orderItemShipGroupList">
            <!-- For each shipGroup create Shipment -->
            <clear-field field="createShipmentContext"/>
            <set field="createShipmentContext.primaryOrderId" from="orderHeader.orderId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="createShipmentContext.primaryShipGroupSeqId" from="orderItemShipGroup.shipGroupSeqId"
                 set-if-empty="true" set-if-null="false"/>
            <set field="createShipmentContext.statusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_INPUT"/>
            <set field="createShipmentContext.originFacilityId" from="productStore.inventoryFacilityId"
                 set-if-empty="true" set-if-null="false"/>
            <set field="createShipmentContext.userLogin" from="parameters.userLogin" set-if-empty="true"
                 set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="createShipmentContext"
                          include-user-login="true" require-new-transaction="false"
                          service-name="createShipment" success-code="success">
                <result-to-field field="parameters.shipmentId" result-name="shipmentId"/>
            </call-service>
            <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="shipment"/>
            <get-related list="orderItems" relation-name="OrderItem" use-cache="false" value-field="orderHeader"/>
            <iterate entry="orderItem" list="orderItems">
                <entity-one auto-field-map="false" entity-name="Product" use-cache="true" value-field="itemProduct">
                    <field-map field-name="productId" from-field="orderItem.productId"/>
                </entity-one>
                <!-- make sure the OrderItem is for a Product that has a ProductType with isPhysical=Y -->
                <if-not-empty field="itemProduct">
                    <get-related-one relation-name="ProductType" to-value-field="itemProductType" use-cache="true"
                                     value-field="itemProduct"/>
                    <if-compare field="itemProductType.isPhysical" operator="equals" type="String" value="Y">
                        <!-- Create shipment item -->
                        <clear-field field="addOrderShipmentToShipmentCtx"/>
                        <set field="addOrderShipmentToShipmentCtx.orderId" from="orderHeader.orderId"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="addOrderShipmentToShipmentCtx.orderItemSeqId" from="orderItem.orderItemSeqId"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="addOrderShipmentToShipmentCtx.shipmentId" from="parameters.shipmentId"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="addOrderShipmentToShipmentCtx.quantity" from="orderItem.quantity"
                             set-if-empty="true" set-if-null="false"/>
                        <set field="addOrderShipmentToShipmentCtx.userLogin" from="parameters.userLogin"
                             set-if-empty="true" set-if-null="false"/>
                        <call-service break-on-error="true" error-code="error"
                                      in-map-name="addOrderShipmentToShipmentCtx" include-user-login="true"
                                      require-new-transaction="false" service-name="addOrderShipmentToShipment"
                                      success-code="success"/>
                    </if-compare>
                </if-not-empty>
            </iterate>
            <field-to-result field="parameters.shipmentId" result-name="shipmentId"/>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="issueSerializedInvToShipmentPackageAndSetTracking"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="" use-transaction="true">
        <!-- If serialNumber is provided, Then compare it with the serialNumber of inventoryItem on reservation. If they don't match, We'll have to reReserve specific
			inventory that is shiped. -->
        <!-- If serialNumber exist then run reserveAnInventoryItem for serialisedInventory.There is no need to check this condition for the non-serialized inventory (Non
			serialized Inventory will directly issued). -->
        <if-not-empty field="parameters.serialNumber">
            <make-value entity-name="OrderItemShipGrpInvRes" value-field="orderItemShipGrpInvResLookupPk"/>
            <set-pk-fields map="parameters" set-if-null="true" value-field="orderItemShipGrpInvResLookupPk"/>
            <find-by-primary-key entity-name="OrderItemShipGrpInvRes" map="orderItemShipGrpInvResLookupPk"
                                 use-cache="false" value-field="orderItemShipGrpInvRes"/>
            <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                             value-field="orderItemShipGrpInvRes"/>
            <if-compare-field field="inventoryItem.serialNumber" operator="not-equals"
                              to-field="parameters.serialNumber" type="String">
                <!-- The inventory that we have reserved is not what we shipped. Lets reReserve, this time we'll get what we want -->
                <set-service-fields map="parameters" service-name="reserveAnInventoryItem"
                                    to-map="reserveAnInventoryItemCtx"/>
                <call-service break-on-error="true" error-code="error" in-map-name="reserveAnInventoryItemCtx"
                              include-user-login="true"
                              require-new-transaction="false" service-name="reserveAnInventoryItem"
                              success-code="success">
                    <result-to-field field="parameters.inventoryItemId" result-name="inventoryItemId"/>
                </call-service>
            </if-compare-field>
        </if-not-empty>
        <!-- get InventoryItem issued to shipment -->
        <clear-field field="issueContext"/>
        <set field="issueContext.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="issueContext.inventoryItemId" from="parameters.inventoryItemId" set-if-empty="true"
             set-if-null="false"/>
        <set field="issueContext.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
        <set field="issueContext.shipGroupSeqId" from="parameters.shipGroupSeqId" set-if-empty="true"
             set-if-null="false"/>
        <set field="issueContext.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true"
             set-if-null="false"/>
        <set field="issueContext.inventoryItemId" from="parameters.inventoryItemId" set-if-empty="true"
             set-if-null="false"/>
        <set field="issueContext.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false"/>
        <call-service break-on-error="true" error-code="error" in-map-name="issueContext" include-user-login="true"
                      require-new-transaction="false"
                      service-name="issueOrderItemShipGrpInvResToShipment" success-code="success">
            <result-to-field field="parameters.itemIssuanceId" result-name="itemIssuanceId"/>
        </call-service>
        <!-- place all issued items into a package for tracking num -->
        <log level="info" message="QuickShipOrderByItem grouping by tracking number : ${parameters.trackingNum}"/>
        <entity-one auto-field-map="true" entity-name="ItemIssuance" use-cache="false" value-field="itemIssuance">
            <field-map field-name="itemIssuanceId" from-field="parameters.itemIssuanceId"/>
        </entity-one>
        <clear-field field="shipItemContext"/>
        <set field="shipItemContext.shipmentPackageSeqId" from="parameters.shipmentPackageSeqId" set-if-empty="true"
             set-if-null="false"/>
        <if-empty field="shipItemContext.shipmentPackageSeqId">
            <set field="shipItemContext.shipmentPackageSeqId" set-if-empty="true" set-if-null="false" value="New"/>
        </if-empty>
        <log level="info" message="Package SeqID : ${shipItemContext.shipmentPackageSeqId}"/>
        <make-value entity-name="ShipmentPackage" value-field="shipmentPackageLookupPk"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="shipmentPackageLookupPk"/>
        <find-by-primary-key entity-name="ShipmentPackage" map="shipmentPackageLookupPk" use-cache="false"
                             value-field="shipmentPackage"/>
        <if-empty field="shipmentPackage">
            <set field="shipPackageContext.shipmentId" from="itemIssuance.shipmentId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipPackageContext.shipmentPackageSeqId" from="shipItemContext.shipmentPackageSeqId"
                 set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipPackageContext"
                          include-user-login="true" require-new-transaction="false"
                          service-name="createShipmentPackage" success-code="success"/>
        </if-empty>
        <set field="shipItemContext.shipmentId" from="itemIssuance.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="shipItemContext.shipmentItemSeqId" from="itemIssuance.shipmentItemSeqId" set-if-empty="true"
             set-if-null="false"/>
        <set field="shipItemContext.quantity" from="itemIssuance.quantity" set-if-empty="true" set-if-null="false"/>
        <call-service break-on-error="true" error-code="error" in-map-name="shipItemContext" include-user-login="true"
                      require-new-transaction="false"
                      service-name="addShipmentContentToPackage" success-code="success">
            <result-to-field field="packageMap.${parameters.trackingNum}" result-name="shipmentPackageSeqId"/>
            <result-to-field field="routeSegLookup.shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
        </call-service>
        <if-not-empty field="routeSegLookup.shipmentPackageSeqId">
            <set field="routeSegLookup.shipmentId" from="itemIssuance.shipmentId" set-if-empty="true"
                 set-if-null="false"/>
            <!-- quick ship orders should only have one route segment -->
            <set field="routeSegLookup.shipmentRouteSegmentId" set-if-empty="true" set-if-null="false" value="00001"/>
            <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map="routeSegLookup" use-cache="false"
                                 value-field="packageRouteSegment"/>
            <if-not-empty field="packageRouteSegment">
                <set field="packageRouteSegment.trackingCode" from="parameters.trackingNum" set-if-empty="true"
                     set-if-null="false"/>
                <store-value do-cache-clear="true" value-field="packageRouteSegment"/>
            </if-not-empty>
            <if-empty field="packageRouteSegment">
                <log level="warning" message="No route segment found : ${routeSegLookup}"/>
            </if-empty>
        </if-not-empty>
        <if-empty field="routeSegLookup.shipmentPackageSeqId">
            <log level="warning" message="No shipment package ID found; cannot update RouteSegment"/>
        </if-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="setShipmentStatusPackedAndShipped" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Move a shipment into Packed status and then to Shipped status"
                   use-transaction="true">
        <!--update the shipment status to packed -->
        <set field="packedContext.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="packedContext.statusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_PACKED"/>
        <call-service break-on-error="true" error-code="error" in-map-name="packedContext" include-user-login="true"
                      require-new-transaction="false"
                      service-name="updateShipment" success-code="success"/>
        <!--update the shipment status to shipped -->
        <if-empty field="parameters.setPackedOnly">
            <set field="packedContext.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="packedContext.statusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_SHIPPED"/>
            <call-service break-on-error="true" error-code="error" in-map-name="packedContext" include-user-login="true"
                          require-new-transaction="false"
                          service-name="updateShipment" success-code="success"/>
        </if-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="quickShipOrderByItem"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Quick ships order based on item list" use-transaction="true">
        <!-- quick ship order using multiple packages per tracking number -->
        <!-- Parameters coming in: orderId, shipGroupSeqId,itemShipList, originFacilityId, setPackedOnly -->
        <!-- The input list contains Maps with four keys: orderItemSeqId, inventoryItemId, qtyShipped, trackingNum -->
        <!-- Parameters going out: shipmentId -->
        <!-- first get the order header; make sure we have a product store -->
        <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
        <if-empty field="parameters.originFacilityId">
            <if-empty field="orderHeader.productStoreId">
                <!-- no store cannot use quick ship; throw error -->
                <add-error error-list-name="error_list">
                    <fail-message message="No ProductStore associated with order; cannot use Quick Ship"/>
                </add-error>
                <check-errors error-code="error" error-list-name="error_list"/>
            </if-empty>
            <if-not-empty field="orderHeader.productStoreId">
                <!-- get the product store entity -->
                <entity-one auto-field-map="true" entity-name="ProductStore" use-cache="false"
                            value-field="productStore">
                    <field-map field-name="productStoreId" from-field="orderHeader.productStoreId"/>
                </entity-one>
                <if-compare field="productStore.reserveInventory" operator="not-equals" type="String" value="Y">
                    <!-- no reservations; no shipment; cannot use quick ship -->
                    <add-error error-list-name="error_list">
                        <fail-message
                                message="ProductStore [${productStore.productStoreId}] does not reserve inventory; cannot use Quick Ship"/>
                    </add-error>
                </if-compare>
                <if-compare field="productStore.oneInventoryFacility" operator="not-equals" type="String" value="Y">
                    <!-- if we allow multiple facilities we cannot use quick ship; throw error -->
                    <add-error error-list-name="error_list">
                        <fail-message
                                message="ProductStore [${productStore.productStoreId}] allows multiple facilities; cannot use Quick Ship"/>
                    </add-error>
                </if-compare>
                <if-empty field="productStore.inventoryFacilityId">
                    <!-- if no inventoryFacility is defined we cannot use quick ship; throw error -->
                    <add-error error-list-name="error_list">
                        <fail-message
                                message="No inventory facility associated with ProductStore [${productStore.productStoreId}]; cannot use Quick Ship"/>
                    </add-error>
                </if-empty>
                <check-errors error-code="error" error-list-name="error_list"/>
            </if-not-empty>
        </if-empty>
        <!-- make sure we have items to issue -->
        <if-empty field="parameters.itemShipList">
            <add-error error-list-name="error_list">
                <fail-message message="No items available to ship at this time"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-empty>
        <!-- move the itemMap to the envrironment -->
        <set field="itemMapList" from="parameters.itemShipList" set-if-empty="true" set-if-null="false"/>
        <!-- we are all good to go; create the shipment -->
        <if-not-empty field="parameters.originFacilityId">
            <set field="shipmentContext.originFacilityId" from="parameters.originFacilityId" set-if-empty="true"
                 set-if-null="false"/>
        </if-not-empty>
        <set field="shipmentContext.primaryOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
        <set field="shipmentContext.primaryShipGroupSeqId" from="parameters.shipGroupSeqId" set-if-empty="true"
             set-if-null="false"/>
        <set field="shipmentContext.statusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_INPUT"/>
        <call-service break-on-error="true" error-code="error" in-map-name="shipmentContext" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createShipment" success-code="success">
            <result-to-field field="shipmentLookupMap.shipmentId" result-name="shipmentId"/>
        </call-service>
        <find-by-primary-key entity-name="Shipment" map="shipmentLookupMap" use-cache="false" value-field="shipment"/>
        <!-- issue the passed in order items -->
        <log level="verbose" message="ShipMap List : ${itemMapList}  /  ${parameters.itemShipList}"/>
        <iterate entry="itemMap" list="itemMapList">
            <log level="verbose" message="Item Map : ${itemMap}"/>
            <clear-field field="issueContext"/>
            <set field="issueContext.shipmentId" from="shipment.shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="issueContext.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
            <set field="issueContext.shipGroupSeqId" from="parameters.shipGroupSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="issueContext.orderItemSeqId" from="itemMap.orderItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="issueContext.inventoryItemId" from="itemMap.inventoryItemId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="issueContext.quantity" from="itemMap.qtyShipped" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="issueContext" include-user-login="true"
                          require-new-transaction="false"
                          service-name="issueOrderItemShipGrpInvResToShipment" success-code="success">
                <result-to-field field="itemMap.itemIssuanceId" result-name="itemIssuanceId"/>
            </call-service>
        </iterate>
        <!-- place all issued items into a unique package per tracking num -->
        <iterate entry="itemMap" list="itemMapList">
            <log level="info" message="QuickShipOrderByItem grouping by tracking number : ${itemMap.trackingNum}"/>
            <entity-one auto-field-map="true" entity-name="ItemIssuance" use-cache="false" value-field="itemIssuance">
                <field-map field-name="itemIssuanceId" from-field="itemMap.itemIssuanceId"/>
            </entity-one>
            <clear-field field="shipItemContext"/>
            <set field="shipItemContext.shipmentPackageSeqId" from="packageMap.${itemMap.trackingNum}"
                 set-if-empty="true" set-if-null="false"/>
            <if-empty field="shipItemContext.shipmentPackageSeqId">
                <set field="shipItemContext.shipmentPackageSeqId" set-if-empty="true" set-if-null="false" value="New"/>
            </if-empty>
            <log level="info" message="Package SeqID : ${shipItemContext.shipmentPackageSeqId}"/>
            <set field="shipItemContext.shipmentId" from="itemIssuance.shipmentId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipItemContext.shipmentItemSeqId" from="itemIssuance.shipmentItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="shipItemContext.quantity" from="itemIssuance.quantity" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="shipItemContext"
                          include-user-login="true" require-new-transaction="false"
                          service-name="addShipmentContentToPackage" success-code="success">
                <result-to-field field="packageMap.${itemMap.trackingNum}" result-name="shipmentPackageSeqId"/>
                <result-to-field field="routeSegLookup.shipmentPackageSeqId" result-name="shipmentPackageSeqId"/>
            </call-service>
            <if-not-empty field="routeSegLookup.shipmentPackageSeqId">
                <set field="routeSegLookup.shipmentId" from="itemIssuance.shipmentId" set-if-empty="true"
                     set-if-null="false"/>
                <!-- quick ship orders should only have one route segment -->
                <set field="routeSegLookup.shipmentRouteSegmentId" set-if-empty="true" set-if-null="false"
                     value="00001"/>
                <find-by-primary-key entity-name="ShipmentPackageRouteSeg" map="routeSegLookup" use-cache="false"
                                     value-field="packageRouteSegment"/>
                <if-not-empty field="packageRouteSegment">
                    <set field="packageRouteSegment.trackingCode" from="itemMap.trackingNum" set-if-empty="true"
                         set-if-null="false"/>
                    <store-value do-cache-clear="true" value-field="packageRouteSegment"/>
                </if-not-empty>
                <if-empty field="packageRouteSegment">
                    <log level="warning" message="No route segment found : ${routeSegLookup}"/>
                </if-empty>
            </if-not-empty>
            <if-empty field="routeSegLookup.shipmentPackageSeqId">
                <log level="warning" message="No shipment package ID found; cannot update RouteSegment"/>
            </if-empty>
        </iterate>
        <!-- update the shipment status to packed -->
        <set field="packedContext.shipmentId" from="shipment.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="packedContext.statusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_PACKED"/>
        <call-service break-on-error="true" error-code="error" in-map-name="packedContext" include-user-login="true"
                      require-new-transaction="false"
                      service-name="updateShipment" success-code="success"/>
        <!-- update the shipment status to shipped -->
        <if-empty field="parameters.setPackedOnly">
            <set field="packedContext.shipmentId" from="shipment.shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="packedContext.statusId" set-if-empty="true" set-if-null="false" value="SHIPMENT_SHIPPED"/>
            <call-service break-on-error="true" error-code="error" in-map-name="packedContext" include-user-login="true"
                          require-new-transaction="false"
                          service-name="updateShipment" success-code="success"/>
        </if-empty>
        <field-to-result field="shipment.shipmentId" result-name="shipmentId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="removeOrderShipmentFromShipment" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Delete an OrderShipment and updates the ShipmentItem" use-transaction="true">
        <make-value entity-name="OrderShipment" value-field="lookupPk"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPk"/>
        <find-by-primary-key entity-name="OrderShipment" map="lookupPk" use-cache="false" value-field="orderShipment"/>
        <clear-field field="lookupPk"/>
        <make-value entity-name="ShipmentItem" value-field="lookupPk"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPk"/>
        <find-by-primary-key entity-name="ShipmentItem" map="lookupPk" use-cache="false" value-field="shipmentItem"/>
        <set field="inMap.userLogin" from="parameters.userLogin" set-if-empty="true" set-if-null="false"/>
        <set field="inMap.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
        <set field="inMap.shipmentItemSeqId" from="parameters.shipmentItemSeqId" set-if-empty="true"
             set-if-null="false"/>
        <set field="inMap.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
        <set field="inMap.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
        <set field="inMap.shipGroupSeqId" from="parameters.shipGroupSeqId" set-if-empty="true" set-if-null="false"/>
        <call-service break-on-error="true" error-code="error" in-map-name="inMap" include-user-login="true"
                      require-new-transaction="false"
                      service-name="deleteOrderShipment" success-code="success"/>
        <calculate decimal-scale="2" field="shipmentItem.quantity" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="shipmentItem.quantity" operator="subtract">
                <calcop field="orderShipment.quantity" operator="get"/>
            </calcop>
        </calculate>
        <clear-field field="inMap"/>
        <if-compare field="shipmentItem.quantity" operator="greater" type="BigDecimal" value="0.0">
            <set field="inMap.userLogin" from="parameters.userLogin" set-if-empty="true" set-if-null="false"/>
            <set field="inMap.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="inMap.shipmentItemSeqId" from="parameters.shipmentItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="inMap.quantity" from="shipmentItem.quantity" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="inMap" include-user-login="true"
                          require-new-transaction="false"
                          service-name="updateShipmentItem" success-code="success"/>
            <else>
                <set field="inMap.userLogin" from="parameters.userLogin" set-if-empty="true" set-if-null="false"/>
                <set field="inMap.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
                <set field="inMap.shipmentItemSeqId" from="parameters.shipmentItemSeqId" set-if-empty="true"
                     set-if-null="false"/>
                <call-service break-on-error="true" error-code="error" in-map-name="inMap" include-user-login="true"
                              require-new-transaction="false"
                              service-name="deleteShipmentItem" success-code="success"/>
            </else>
        </if-compare>
    </simple-method>
    <!-- for a given order item and quantity it creates (or updates if already exists) an -->
    <!-- entry in the ShipmentPlan. -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="addOrderShipmentToShipment" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Add or update a ShipmentPlan entry"
                   use-transaction="true">
        <!-- if quantity is greater than 0 we add or update the ShipmentPlan -->
        <if-compare field="parameters.quantity" operator="greater" type="BigDecimal" value="0">
            <!-- get orderHeader -->
            <make-value entity-name="OrderHeader" value-field="orderHeaderLookupPk"/>
            <set-pk-fields map="parameters" set-if-null="true" value-field="orderHeaderLookupPk"/>
            <find-by-primary-key map="orderHeaderLookupPk" use-cache="false" value-field="orderHeader"/>
            <!-- get orderItem -->
            <make-value entity-name="OrderItem" value-field="orderItemLookupPk"/>
            <set-pk-fields map="parameters" set-if-null="true" value-field="orderItemLookupPk"/>
            <find-by-primary-key map="orderItemLookupPk" use-cache="false" value-field="orderItem"/>
            <!-- make sure the orderItem is not already present in this shipment -->
            <make-value entity-name="OrderShipment" value-field="orderShipmentLookup"/>
            <set-pk-fields map="parameters" set-if-null="true" value-field="orderShipmentLookup"/>
            <find-by-and entity-name="OrderShipment" list="existingOrderShipments" map="orderShipmentLookup"
                         use-cache="false" use-iterator="false"/>
            <if-not-empty field="existingOrderShipments">
                <string-to-list list="error_list"
                                string="Not adding Order Item to plan for shipment [${parameters.shipmentId}] because the order item is already in the shipment (order [${parameters.orderId}], order item [${parameters.orderItemSeqId}])"/>
            </if-not-empty>
            <set default="0" field="remainingQuantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
            <set field="inputMap.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
            <set field="inputMap.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="inputMap.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="inputMap" include-user-login="true"
                          require-new-transaction="false"
                          service-name="getQuantityForShipment" success-code="success">
                <result-to-field field="remainingQuantity" result-name="remainingQuantity"/>
            </call-service>
            <if-compare-field field="parameters.quantity" operator="greater" to-field="remainingQuantity" type="BigDecimal">
                <string-to-list list="error_list"
                                string="Not adding Order Item to plan for shipment [${parameters.shipmentId}] because the quantity is greater than the remaining quantity (order [${parameters.orderId}], order item [${parameters.orderItemSeqId}])"/>
            </if-compare-field>
            <check-errors error-code="error" error-list-name="error_list"/>
            <clear-field field="inputMap"/>
            <set field="inputMap.userLogin" from="parameters.userLogin" set-if-empty="true" set-if-null="false"/>
            <set field="inputMap.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="inputMap.productId" from="orderItem.productId" set-if-empty="true" set-if-null="false"/>
            <set field="inputMap.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="inputMap" include-user-login="true"
                          require-new-transaction="false"
                          service-name="createShipmentItem" success-code="success">
                <result-to-field field="parameters.shipmentItemSeqId" result-name="shipmentItemSeqId"/>
            </call-service>
            <clear-field field="inputMap"/>
            <set field="inputMap.userLogin" from="parameters.userLogin" set-if-empty="true" set-if-null="false"/>
            <set field="inputMap.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
            <set field="inputMap.shipmentItemSeqId" from="parameters.shipmentItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="inputMap.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
            <set field="inputMap.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true"
                 set-if-null="false"/>
            <set field="inputMap.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="parameters" include-user-login="true"
                          require-new-transaction="false"
                          service-name="createOrderShipment" success-code="success"/>
        </if-compare>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="getQuantityForShipment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="get the order item quantity still not put in shipments" use-transaction="true">
        <!-- get orderItem -->
        <make-value entity-name="OrderItem" value-field="orderItemLookupPk"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="orderItemLookupPk"/>
        <find-by-primary-key map="orderItemLookupPk" use-cache="false" value-field="orderItem"/>
        <set field="orderShipmentLookup.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
        <set field="orderShipmentLookup.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true"
             set-if-null="false"/>
        <!-- <set field="orderShipmentLookup.shipmentId" from="parameters.shipmentId" set-if-empty="true"
             set-if-null="false"/> -->
        
        <find-by-and entity-name="OrderShipment" list="existingOrderShipments" map="orderShipmentLookup"
                     use-cache="false" use-iterator="false"/>
        <iterate entry="orderShipment" list="existingOrderShipments">
            <calculate decimal-scale="2" field="plannedQuantity" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="plannedQuantity" operator="add">
                    <calcop field="orderShipment.quantity" operator="get"/>
                </calcop>
            </calculate>
        </iterate>
        <clear-field field="existingOrderShipments"/>
        <find-by-and entity-name="ItemIssuance" list="existingOrderShipments" map="orderShipmentLookup"
                     use-cache="false" use-iterator="false"/>
        <iterate entry="itemIssuance" list="existingOrderShipments">
            <calculate decimal-scale="2" field="issuedQuantity" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="issuedQuantity" operator="get"/>
                <calcop field="itemIssuance.quantity" operator="get"/>
                <calcop field="itemIssuance.cancelQuantity" operator="negative"/>
            </calculate>
        </iterate>
        <calculate decimal-scale="2" field="totPlannedOrIssuedQuantity" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="issuedQuantity" operator="get"/>
            <calcop field="plannedQuantity" operator="get"/>
        </calculate>
        <calculate decimal-scale="2" field="remainingQuantity" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="orderItem.quantity" operator="subtract">
                <calcop field="orderItem.cancelQuantity" operator="get"/>
                <calcop field="totPlannedOrIssuedQuantity" operator="get"/>
            </calcop>
        </calculate>
        <field-to-result field="remainingQuantity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="checkCancelItemIssuanceAndOrderShipmentFromShipment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Check Shipment Items and Cancel Item Issuance and Order Shipment"
                   use-transaction="true">
        <entity-and entity-name="OrderShipment" filter-by-date="false" list="orderShipmentList" use-cache="false">
            <field-map field-name="shipmentId" from-field="parameters.shipmentId"/>
        </entity-and>
        <iterate entry="orderShipment" list="orderShipmentList">
            <clear-field field="deleteOrderShipmentMap"/>
            <set-service-fields map="orderShipment" service-name="deleteOrderShipment" to-map="deleteOrderShipmentMap"/>
            <call-service break-on-error="true" error-code="error" in-map-name="deleteOrderShipmentMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="deleteOrderShipment" success-code="success"/>
        </iterate>
        <log level="info" message="Cancelling Item Issuances for shimpentId: ${parameters.shipmentId}"/>
        <entity-one auto-field-map="true" entity-name="Shipment" use-cache="false" value-field="shipment"/>
        <get-related list="issuances" relation-name="ItemIssuance" use-cache="false" value-field="shipment"/>
        <iterate entry="issuance" list="issuances">
            <set field="inputMap.itemIssuanceId" from="issuance.itemIssuanceId" set-if-empty="true"
                 set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="inputMap" include-user-login="true"
                          require-new-transaction="false"
                          service-name="cancelOrderItemIssuanceFromSalesShipment" success-code="success"/>
        </iterate>
    </simple-method>
    <!-- QuantityBreak services -->
    <!-- create a new QuantityBreak -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="createQuantityBreak"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create a QuoteAttribute" use-transaction="true">
        <make-value entity-name="QuantityBreak" value-field="quantityBreak"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="quantityBreak"/>
        <sequenced-id field="quantityBreak.quantityBreakId" get-long-only="false" sequence-name="QuantityBreak"/>
        <create-value do-cache-clear="true" or-store="false" value-field="quantityBreak"/>
        <check-errors error-code="error" error-list-name="error_list"/>
    </simple-method>
    <!-- update an existing QuantityBreak -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="updateQuantityBreak"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update an existing QuantityBreak" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="QuantityBreak" use-cache="false" value-field="quantityBreak"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="quantityBreak"/>
        <store-value do-cache-clear="true" value-field="quantityBreak"/>
        <check-errors error-code="error" error-list-name="error_list"/>
    </simple-method>
    <!-- remove an existing QuantityBreak -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true" method-name="deleteQuantityBreak"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Remove an existing QuantityBreak" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="QuantityBreak" use-cache="false" value-field="quantityBreak"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <remove-value do-cache-clear="true" value-field="quantityBreak"/>
        <check-errors error-code="error" error-list-name="error_list"/>
    </simple-method>


    <simple-method method-name="reduceQOHForTransferShipmentDelivered">
        <entity-and entity-name="ItemIssuance" list="itemIssuanceList">
            <field-map field-name="shipmentId" from-field="parameters.shipmentId"/>
        </entity-and>
        <iterate list="itemIssuanceList" entry="itemIssuanceGv">
            <entity-one entity-name="InventoryItem" value-field="inventoryItem">
                <field-map field-name="inventoryItemId" from-field="itemIssuanceGv.inventoryItemId"/>
            </entity-one>

            <set field="createDetailMap.inventoryItemId" from="itemIssuanceGv.inventoryItemId"/>
            <set field="createDetailMap.description" from="itemIssuanceGv.itemIssuanceId"/>

            <if-compare field="inventoryItem.inventoryItemTypeId" operator="not-equals" value="SERIALIZED_INV_ITEM">
                <set field="issuedQuantity" from="itemIssuanceGv.quantity"/>
                <calculate field="issuedQuantity" type="BigDecimal">
                    <calcop field="issuedQuantity" operator="negative"/>
                </calculate>
                <set field="createDetailMap.quantityOnHandDiff" from="issuedQuantity"/>
                <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true"
                              require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
                <else>
                    <set field="createDetailMap.statusId" value="INV_DELIVERED"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap"
                                  include-user-login="true" require-new-transaction="false"
                                  service-name="updateInventoryItem" success-code="success"/>
                    <clear-field field="inventoryItemMap"/>
                </else>
            </if-compare>
        </iterate>
    </simple-method>
    
    <simple-method method-name="createShipmentInvoice">
        <entity-condition list="shipmentInvList" entity-name="ShipmentInvoice">
        	<condition-list>
        		<condition-expr field-name="shipmentId" from-field="parameters.shipmentId"/>
        		<condition-expr field-name="partyId" from-field="parameters.partyId"/>
        	</condition-list>
        </entity-condition>
        <if-empty field="shipmentInvList">
	    	<make-value entity-name="ShipmentInvoice" value-field="shipmentInvoice"/>
	        <set-nonpk-fields map="parameters" set-if-null="true" value-field="shipmentInvoice"/>
	        <sequenced-id field="shipmentInvoice.shipInvId" get-long-only="false" sequence-name="ShipmentInvoice"/>
	        <create-value do-cache-clear="true" or-store="false" value-field="shipmentInvoice"/>
	        <else>
	        	<string-to-list list="error_list" string="Party Id already exists."/>
	        </else>
        </if-empty>
        <field-to-result field="parameters.shipmentId" result-name="shipmentId"/>
        <check-errors error-code="error" error-list-name="error_list"/>
    </simple-method>
    
    <simple-method method-name="updateShipmentInvoice">
        <entity-one auto-field-map="true" entity-name="ShipmentInvoice" use-cache="false" value-field="shipmentInvoice"/>
        <set field="invoiceIds" value="${parameters.invoiceIds}" type="String"/>
        <call-bsh><![CDATA[
	                 invoiceIds = invoiceIds.replace("{","");
	                 invoiceIds = invoiceIds.replace("}","");
                     shipmentInvoice.put("invoiceIds",invoiceIds);
         ]]></call-bsh>
    	<store-value do-cache-clear="true" value-field="shipmentInvoice"/>
    	<field-to-result field="shipmentInvoice.shipInvId" result-name="shipInvId"/>
    	<field-to-result field="parameters.shipmentId" result-name="shipmentId"/>
    </simple-method>
    
    
    <simple-method method-name="removeThirdParty">
    	<set field="createDetailMap.shipInvId" from="parameters.shipInvId" set-if-empty="true" set-if-null="false"/>
        <set field="createDetailMap.shipmentId" from="parameters.shipmentId" set-if-empty="true" set-if-null="false"/>
		<remove-by-and map="createDetailMap" entity-name="ShipmentInvoice" />    	
        <field-to-result field="parameters.shipmentId" result-name="shipmentId"/>
    </simple-method>
    
    <simple-method method-name="requisitionConfirm">

		<make-value entity-name="InventoryRequisition" value-field="inventoryReqMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="inventoryReqMap"/>
        <find-by-primary-key entity-name="InventoryRequisition" map="inventoryReqMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set field="lookedUpValue.status" value="GM Approved"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        
    </simple-method>
    
    <simple-method method-name="requisitionCancel">

		<make-value entity-name="InventoryRequisition" value-field="inventoryReqMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="inventoryReqMap"/>
        <find-by-primary-key entity-name="InventoryRequisition" map="inventoryReqMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set field="lookedUpValue.status" value="GM Canceled"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        
    </simple-method>
    
    
    <simple-method method-name="requisitionIssueOrReceive">

		<make-value entity-name="InventoryRequisition" value-field="inventoryReqMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="inventoryReqMap"/>
        <find-by-primary-key entity-name="InventoryRequisition" map="inventoryReqMap" use-cache="false"
                             value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        
    </simple-method>
    
    
</simple-methods>
