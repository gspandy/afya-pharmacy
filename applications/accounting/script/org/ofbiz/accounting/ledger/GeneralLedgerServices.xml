<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to 
	in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See 
	the License for the specific language governing permissions and limitations under the License. -->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">
    <!-- ========= GlAccount methods ========= -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createGlAccount"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create an GlAccount" use-transaction="true">
        <make-value entity-name="GlAccount" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <!-- GlAccount uses a sequenced id, so get the next one now and set it... -->
        <if-empty field="parameters.glAccountId">
            <if-empty field="parameters.parentGlAccountId">
                <if-empty field="parameters.accountCode">
                    <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                    <while>
                        <condition>
                            <not>
                                <if-empty field="glAccountId"/>
                            </not>
                        </condition>
                        <then>
                            <entity-one value-field="glAccount" entity-name="GlAccount" auto-field-map="true">
                                <field-map field-name="glAccountId" from-field="glAccountId"/>
                            </entity-one>
                            <if-empty field="glAccount">
                                <break/>
                            </if-empty>
                            <if-not-empty field="glAccount">
                                <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                            </if-not-empty>
                        </then>
                    </while>
                    <string-append field="newEntity.glAccountId" string="${glAccountId}"/>
                    <set field="newEntity.accountCode" from-field="newEntity.glAccountId"/>
                </if-empty>
            </if-empty>
        </if-empty>
        <if-not-empty field="parameters.glAccountId">
            <if-not-empty field="parameters.parentGlAccountId">
                <if-not-empty field="parameters.accountCode">
                    <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                    <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                </if-not-empty>
            </if-not-empty>
        </if-not-empty>
        <if-empty field="parameters.glAccountId">
            <if-empty field="parameters.parentGlAccountId">
                <if-not-empty field="parameters.accountCode">
                    <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                    <while>
                        <condition>
                            <not>
                                <if-empty field="glAccountId"/>
                            </not>
                        </condition>
                        <then>
                            <entity-one value-field="glAccount" entity-name="GlAccount" auto-field-map="true">
                                <field-map field-name="glAccountId" from-field="glAccountId"/>
                            </entity-one>
                            <if-empty field="glAccount">
                                <break/>
                            </if-empty>
                            <if-not-empty field="glAccount">
                                <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                            </if-not-empty>
                        </then>
                    </while>
                    <string-append field="newEntity.glAccountId" string="${glAccountId}"/>
                    <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                </if-not-empty>
            </if-empty>
        </if-empty>
        <if-empty field="parameters.glAccountId">
            <if-empty field="parameters.accountCode">
                <if-not-empty field="parameters.parentGlAccountId">
                    <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                    <while>
                        <condition>
                            <not>
                                <if-empty field="glAccountId"/>
                            </not>
                        </condition>
                        <then>
                            <entity-one value-field="glAccount" entity-name="GlAccount" auto-field-map="true">
                                <field-map field-name="glAccountId" from-field="glAccountId"/>
                            </entity-one>
                            <if-empty field="glAccount">
                                <break/>
                            </if-empty>
                            <if-not-empty field="glAccount">
                                <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                            </if-not-empty>
                        </then>
                    </while>
                    <string-append field="newEntity.glAccountId"
                                   string="${parameters.parentGlAccountId}_${glAccountId}"/>
                    <set field="newEntity.accountCode" from-field="newEntity.glAccountId"/>
                </if-not-empty>
            </if-empty>
        </if-empty>
        <if-empty field="parameters.parentGlAccountId">
            <if-empty field="parameters.accountCode">
                <if-not-empty field="parameters.glAccountId">
                    <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                    <set field="newEntity.accountCode" from-field="parameters.glAccountId"/>
                </if-not-empty>
            </if-empty>
        </if-empty>
        <if-not-empty field="parameters.glAccountId">
            <if-not-empty field="parameters.parentGlAccountId">
                <if-empty field="parameters.accountCode">
                    <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                    <set field="newEntity.accountCode" from-field="parameters.glAccountId"/>
                </if-empty>
            </if-not-empty>
        </if-not-empty>
        <if-not-empty field="parameters.glAccountId">
            <if-not-empty field="parameters.accountCode">
                <if-empty field="parameters.parentGlAccountId">
                    <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                    <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                </if-empty>
            </if-not-empty>
        </if-not-empty>
        <if-not-empty field="parameters.parentGlAccountId">
            <if-not-empty field="parameters.accountCode">
                <if-empty field="parameters.glAccountId">
                    <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                    <while>
                        <condition>
                            <not>
                                <if-empty field="glAccountId"/>
                            </not>
                        </condition>
                        <then>
                            <entity-one value-field="glAccount" entity-name="GlAccount" auto-field-map="true">
                                <field-map field-name="glAccountId" from-field="glAccountId"/>
                            </entity-one>
                            <if-empty field="glAccount">
                                <break/>
                            </if-empty>
                            <if-not-empty field="glAccount">
                                <sequenced-id field="glAccountId" get-long-only="false" sequence-name="GlAccount"/>
                            </if-not-empty>
                        </then>
                    </while>
                    <string-append field="newEntity.glAccountId"
                                   string="${parameters.parentGlAccountId}_${glAccountId}"/>
                    <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                </if-empty>
            </if-not-empty>
        </if-not-empty>
        <field-to-result field="newEntity.glAccountId" result-name="glAccountId"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <entity-one auto-field-map="true" entity-name="GlAccountOrganization" use-cache="false"
                    value-field="glAccountOrganization">
            <field-map field-name="organizationPartyId" value="Company"/>
            <field-map field-name="glAccountId" from-field="newEntity.glAccountId"/>
        </entity-one>
        <if-empty field="glAccountOrganization">
            <make-value entity-name="GlAccountOrganization" value-field="newGlAccountOrg"/>
            <set field="newGlAccountOrg.organizationPartyId" value="Company"/>
            <set field="newGlAccountOrg.glAccountId" from="newEntity.glAccountId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newGlAccountOrg"/>
        </if-empty>
        <property-to-field field="successMessage" no-locale="false" property="AccountingCreateGLAccount"
                           resource="AccountingUiLabels"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateGlAccount"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update an GlAccount" use-transaction="true">
        <make-value entity-name="GlAccount" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" use-cache="false" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        <property-to-field field="successMessage" no-locale="false" property="AccountingUpdateGLAccount"
                           resource="AccountingUiLabels"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteGlAccount"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Delete an GlAccount" use-transaction="true">
        <make-value entity-name="GlAccount" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" use-cache="false" value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>
    <!-- ========= GlAccountOrganization methods ========= -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createGlAccountOrganization" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create GlAccountOrganization"
                   use-transaction="true">
        <make-value entity-name="GlAccountOrganization" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAllGlAccountOrganization" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create GlAccountOrganization"
                   use-transaction="true">
        <entity-condition distinct="false" entity-name="GlAccount" filter-by-date="false" list="glAccounts"
                          use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="parentGlAccountId" operator="not-equals" value="3500000"/>
                <condition-expr field-name="parentGlAccountId" operator="not-equals" value="4160000"/>
            </condition-list>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="GlAccountOrganization" value-field="newEntity"/>
            <set-nonpk-fields map="glAccount" set-if-null="true" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <create-value do-cache-clear="true" or-store="true" value-field="newEntity"/>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAllGlAccountDefaults" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create GL Accounts Defaults"
                   use-transaction="true">
        <entity-condition distinct="false" entity-name="GlAccountTypeDefault" filter-by-date="false" list="glAccounts"
                          use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="GlAccountTypeDefault" value-field="newEntity"/>
            <set field="newEntity.glAccountTypeId" from="glAccount.glAccountTypeId"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <create-value do-cache-clear="true" or-store="true" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="ProductGlAccount" filter-by-date="false" list="glAccounts"
                          use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="ProductGlAccount" value-field="newEntity"/>
            <set field="newEntity.productId" from="glAccount.productId"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <set field="newEntity.glAccountTypeId" from="glAccount.glAccountTypeId"/>
            <create-value do-cache-clear="true" or-store="true" value-field="newEntity"/>
        </iterate>
        <!-- <entity-condition distinct="false" entity-name="PartyGlAccount" filter-by-date="false" list="glAccounts" use-cache="false">
			<condition-expr field-name="organizationPartyId"  ignore-if-null="false" operator="equals"
				value="Company" />
		</entity-condition>
		<iterate entry="glAccount" list="glAccounts">
			<make-value entity-name="PartyGlAccount" value-field="newEntity" />
			<set field="newEntity.partyId" from="glAccount.partyId"  />
			<set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"  />
			<set field="newEntity.glAccountId" from="glAccount.glAccountId"  />
			<set field="newEntity.roleTypeId" from="glAccount.roleTypeId"  />
			<set field="newEntity.glAccountTypeId" from="glAccount.glAccountTypeId"  />
			<create-value do-cache-clear="true" or-store="false" value-field="newEntity" />
		</iterate> -->
        <entity-condition distinct="false" entity-name="ProductCategoryGlAccount" filter-by-date="false"
                          list="glAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="ProductCategoryGlAccount" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <set field="newEntity.productCategoryId" from="glAccount.productCategoryId"/>
            <set field="newEntity.glAccountTypeId" from="glAccount.glAccountTypeId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="InvoiceItemTypeGlAccount" filter-by-date="false"
                          list="invoiceItemGlAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="invoiceItemGlAccounts">
            <make-value entity-name="InvoiceItemTypeGlAccount" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <set field="newEntity.invoiceItemTypeId" from="glAccount.invoiceItemTypeId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="PaymentGlAccountTypeMap" filter-by-date="false"
                          list="glAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="PaymentGlAccountTypeMap" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountTypeId" from="glAccount.glAccountTypeId"/>
            <set field="newEntity.paymentTypeId" from="glAccount.paymentTypeId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="PaymentMethodTypeGlAccount" filter-by-date="false"
                          list="glAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="PaymentMethodTypeGlAccount" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <set field="newEntity.paymentMethodTypeId" from="glAccount.paymentMethodTypeId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="VarianceReasonGlAccount" filter-by-date="false"
                          list="glAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="VarianceReasonGlAccount" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <set field="newEntity.varianceReasonId" from="glAccount.varianceReasonId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="VarianceReasonGlAccount" filter-by-date="false"
                          list="glAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="VarianceReasonGlAccount" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <set field="newEntity.varianceReasonId" from="glAccount.varianceReasonId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="FixedAssetTypeGlAccount" filter-by-date="false"
                          list="glAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="FixedAssetTypeGlAccount" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.fixedAssetId" from="glAccount.fixedAssetId"/>
            <set field="newEntity.fixedAssetTypeId" from="glAccount.fixedAssetTypeId"/>
            <set field="newEntity.assetGlAccountId" from="glAccount.assetGlAccountId"/>
            <set field="newEntity.accDepGlAccountId" from="glAccount.accDepGlAccountId"/>
            <set field="newEntity.depGlAccountId" from="glAccount.depGlAccountId"/>
            <set field="newEntity.profitGlAccountId" from="glAccount.profitGlAccountId"/>
            <set field="newEntity.lossGlAccountId" from="glAccount.lossGlAccountId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
        <entity-condition distinct="false" entity-name="FinAccountTypeGlAccount" filter-by-date="false"
                          list="glAccounts" use-cache="false">
            <condition-expr field-name="organizationPartyId" ignore-if-null="false" operator="equals"
                            value="Company"/>
        </entity-condition>
        <iterate entry="glAccount" list="glAccounts">
            <make-value entity-name="VarianceReasonGlAccount" value-field="newEntity"/>
            <set field="newEntity.organizationPartyId" from="parameters.organizationPartyId"/>
            <set field="newEntity.glAccountId" from="glAccount.glAccountId"/>
            <set field="newEntity.finAccountTypeId" from="glAccount.finAccountTypeId"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateGlAccountOrganization" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Update GlAccountOrganization"
                   use-transaction="true">
        <make-value entity-name="GlAccountOrganization" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" use-cache="false" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteGlAccountOrganization" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Delete GlAccountOrganization"
                   use-transaction="true">
        <make-value entity-name="GlAccountOrganization" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" use-cache="false" value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>
    <!-- ========= GlJournal methods ========= -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="quickCreateAcctgTransAndEntries" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Creates an AcctgTrans and two offsetting AcctgTransEntry records"
                   use-transaction="true">
        <!-- TODO: Do we need to create a GlJournal record here? -->
        <!-- first, create the AcctgTrans -->
        <set-service-fields map="parameters" service-name="createAcctgTrans" to-map="createAcctgTransParams"/>
        <if-empty field="createAcctgTransParams.transactionDate">
            <now-timestamp field="createAcctgTransParams.transactionDate"/>
        </if-empty>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransParams"
                      include-user-login="true" require-new-transaction="false"
                      service-name="createAcctgTrans" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <!-- TODO: if someday there are more than one type of acctgTransEntryTypeId (other than _NA_, we should get rid of the lines below that fix those values -->
        <!-- now, create the debit AcctgTransEntry -->
        <set-service-fields map="parameters" service-name="createAcctgTransEntry" to-map="createAcctgTransEntryParams"/>
        <set field="createAcctgTransEntryParams.acctgTransId" from="acctgTransId"/>
        <set field="createAcctgTransEntryParams.glAccountId" from="parameters.debitGlAccountId"/>
        <set field="createAcctgTransEntryParams.debitCreditFlag" value="D"/>
        <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransEntryParams"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransEntry" success-code="success"/>
        <!-- now the credit AcctgTransEntry -->
        <set-service-fields map="parameters" service-name="createAcctgTransEntry" to-map="createAcctgTransEntryParams"/>
        <set field="createAcctgTransEntryParams.acctgTransId" from="acctgTransId"/>
        <set field="createAcctgTransEntryParams.glAccountId" from="parameters.creditGlAccountId"/>
        <set field="createAcctgTransEntryParams.debitCreditFlag" value="C"/>
        <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransEntryParams"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransEntry" success-code="success"/>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createGlJournal"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create an GlJournal" use-transaction="true">
        <make-value entity-name="GlJournal" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <!-- GlJournal uses a sequenced id, so get the next one now and set it... -->
        <sequenced-id field="newEntity.glJournalId" get-long-only="false" sequence-name="GlJournal"/>
        <field-to-result field="newEntity.glJournalId" result-name="glJournalId"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateGlJournal"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update an GlJournal" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="GlJournal" use-cache="false" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteGlJournal"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Delete an GlJournal" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="GlJournal" use-cache="false" value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>
    <!-- GlJournal Trial Balance and Post routines -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="calculateGlJournalTrialBalance" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Calculate Trial Balance for a GlJournal" use-transaction="true">
        <!-- iterate through all AcctgTrans in this journal and that are not yet posted, and get totals of all debits and of all credits -->
        <entity-condition distinct="false" entity-name="AcctgTrans" filter-by-date="false" list="acctgTransList"
                          use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="glJournalId" from-field="parameters.glJournalId"
                                ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="isPosted" ignore-if-null="false" operator="not-equals"
                                value="Y"/>
            </condition-list>
        </entity-condition>
        <iterate entry="acctgTrans" list="acctgTransList">
            <clear-field field="callServiceMap"/>
            <clear-field field="serviceResults"/>
            <set field="callServiceMap.acctgTransId" from="acctgTrans.acctgTransId"/>
            <call-service break-on-error="true" error-code="error" in-map-name="callServiceMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="calculateAcctgTransTrialBalance" success-code="success">
                <results-to-map map-name="serviceResults"/>
            </call-service>
            <calculate decimal-scale="2" field="debitTotal" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="debitTotal" operator="get"/>
                <calcop field="serviceResults.debitTotal" operator="get"/>
            </calculate>
            <calculate decimal-scale="2" field="creditTotal" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="creditTotal" operator="get"/>
                <calcop field="serviceResults.creditTotal" operator="get"/>
            </calculate>
            <calculate decimal-scale="2" field="debitCreditDifference" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="debitCreditDifference" operator="get"/>
                <calcop field="serviceResults.debitCreditDifference" operator="get"/>
            </calculate>
        </iterate>
        <field-to-result field="debitTotal"/>
        <field-to-result field="creditTotal"/>
        <field-to-result field="debitCreditDifference"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="postGlJournal"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Post a GlJournal" use-transaction="true">
        <!-- first calculate the trial balance for the journal and make sure debits and credits match -->
        <set field="trialBalanceCallMap.glJournalId" from="parameters.glJournalId"/>
        <call-service break-on-error="true" error-code="error" in-map-name="trialBalanceCallMap"
                      include-user-login="true" require-new-transaction="false"
                      service-name="calculateGlJournalTrialBalance" success-code="success">
            <results-to-map map-name="trialBalanceResultMap"/>
        </call-service>
        <if-compare field="trialBalanceResultMap.debitCreditDifference" operator="not-equals" type="BigDecimal"
                    value="0">
            <add-error error-list-name="error_list">
                <fail-message
                        message="Not posting GL Journal with ID [${parameters.glJournalId}] because the trial balance failed: Debit Total=${trialBalanceResultMap.debitTotal} Credit Total=${trialBalanceResultMap.creditTotal} Debit/Credit Difference=${trialBalanceResultMap.debitCreditDifference}"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-compare>
        <!-- iterate through all AcctgTrans in this journal and that are not yet posted, and post each one -->
        <entity-condition distinct="false" entity-name="AcctgTrans" filter-by-date="false" list="acctgTransList"
                          use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="glJournalId" from-field="parameters.glJournalId"
                                ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="isPosted" ignore-if-null="false" operator="not-equals"
                                value="Y"/>
            </condition-list>
        </entity-condition>
        <iterate entry="acctgTrans" list="acctgTransList">
            <clear-field field="callServiceMap"/>
            <set field="callServiceMap.acctgTransId" from="acctgTrans.acctgTransId"/>
            <call-service break-on-error="true" error-code="error" in-map-name="callServiceMap"
                          include-user-login="true" require-new-transaction="false"
                          service-name="postAcctgTrans" success-code="success"/>
        </iterate>
    </simple-method>
    <!-- ========= GlReconciliation methods ========= -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createGlReconciliation"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Create an GlReconciliation" use-transaction="true">
        <make-value entity-name="GlReconciliation" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <!-- GlReconciliation uses a sequenced id, so get the next one now and set it... -->
        <sequenced-id field="newEntity.glReconciliationId" get-long-only="false" sequence-name="GlReconciliation"/>
        <field-to-result field="newEntity.glReconciliationId" result-name="glReconciliationId"/>
        <set field="newEntity.lastModifiedByUserLogin" from="userLogin.userLoginId"/>
        <set field="newEntity.createdByUserLogin" from="userLogin.userLoginId"/>
        <if-empty field="newEntity.statusId">
            <set field="newEntity.statusId" value="GLREC_CREATED"/>
        </if-empty>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateGlReconciliation"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update an GlReconciliation" use-transaction="true">
        <set-service-fields map="parameters" service-name="setGlReconciliationStatus"
                            to-map="setGlReconciliationStatusMap"/>
        <call-service break-on-error="true" error-code="error" in-map-name="setGlReconciliationStatusMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="setGlReconciliationStatus" success-code="success"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <entity-one auto-field-map="true" entity-name="GlReconciliation" use-cache="false" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <set field="lookedUpValue.lastModifiedByUserLogin" from="userLogin.userLoginId"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteGlReconciliation"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Delete an GlReconciliation" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="GlReconciliation" use-cache="false" value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateGlReconciliationLastModified" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Update GlReconciliation LastModified Info" use-transaction="true">
        <!-- this is just a little method that is meant to be called as an inline call-simple-method target with the context already setup -->
        <entity-one auto-field-map="true" entity-name="GlReconciliation" use-cache="false" value-field="lookedUpGLR"/>
        <set field="lookedUpGLR.lastModifiedByUserLogin" from="userLogin.userLoginId"/>
        <store-value do-cache-clear="true" value-field="lookedUpGLR"/>
    </simple-method>
    <!-- ========= GlReconciliationEntry methods ========= -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createGlReconciliationEntry" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Add Entry To GlReconciliation"
                   use-transaction="true">
        <!-- first of all, make sure that the AcctgTransEntry is not already reconciled -->
        <entity-one auto-field-map="true" entity-name="AcctgTransEntry" use-cache="false"
                    value-field="acctgTransEntry"/>
        <if-compare field="acctgTransEntry.reconcileStatusId" operator="equals" type="String" value="AES_RECONCILED">
            <add-error error-list-name="error_list">
                <fail-message
                        message="The accounting transaction entry ${acctgTransEntry.acctgTransId}/${acctgTransEntry.acctgTransEntrySeqId} is already reconciled: cannot reconcile."/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-compare>
        <make-value entity-name="GlReconciliationEntry" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <!-- update the status of the AcctgTransEntry to reconciled -->
        <set field="updateAcctgTransEntryInMap.acctgTransId" from="parameters.acctgTransId"/>
        <set field="updateAcctgTransEntryInMap.acctgTransEntrySeqId" from="parameters.acctgTransEntrySeqId"/>
        <set field="updateAcctgTransEntryInMap.reconcileStatusId" value="AES_RECONCILED"/>
        <set field="updateAcctgTransEntryInMap.amount" from="parameters.reconciledAmount"/>
        <call-service break-on-error="true" error-code="error" in-map-name="updateAcctgTransEntryInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="updateAcctgTransEntry" success-code="success"/>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!-- Returns status "Reconciled" if it is "Created" -->
        <entity-one auto-field-map="true" entity-name="GlReconciliation" use-cache="false"
                    value-field="glReconciliation"/>
        <if-compare field="glReconciliation.statusId" operator="equals" type="String" value="GLREC_CREATED">
            <set field="statusId" value="GLREC_RECONCILED"/>
            <field-to-result field="statusId"/>
        </if-compare>
        <!-- when changing entries, also update the last modified info for the GlReconciliation -->
        <call-simple-method method-name="updateGlReconciliationLastModified"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateGlReconciliationEntry" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Update Entry To GlReconciliation"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="GlReconciliationEntry" use-cache="false"
                    value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        <!-- when changing entries, also update the last modified info for the GlReconciliation -->
        <call-simple-method method-name="updateGlReconciliationLastModified"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deleteGlReconciliationEntry" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Remove Entry From GlReconciliation"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="GlReconciliationEntry" use-cache="false"
                    value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
        <!-- when changing entries, also update the last modified info for the GlReconciliation -->
        <call-simple-method method-name="updateGlReconciliationLastModified"/>
    </simple-method>
    <!-- ========== GL Posting Services ========== -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="completeAcctgTransEntries" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Completes, if possible, the AcctgTransEntries using the mappings defined in the gl setup"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="AcctgTrans" use-cache="false" value-field="acctgTrans"/>
        <if-compare field="acctgTrans.isPosted" operator="equals" type="String" value="Y">
            <add-error error-list-name="error_list">
                <fail-property property="AccountingTransactionHasBeenAlreadyPosted" resource="AccountingUiLabels"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-compare>
        <get-related list="acctgTransEntries" relation-name="AcctgTransEntry" use-cache="false"
                     value-field="acctgTrans"/>
        <iterate entry="acctgTransEntry" list="acctgTransEntries">
            <!-- if the glAccountId is empty, but we have a glAccountTypeId, then we will determine the correct glAccountId from the gl setup settings -->
            <if-empty field="acctgTransEntry.glAccountId">
                <clear-field field="getGlAccountFromAccountTypeInMap"/>
                <set field="getGlAccountFromAccountTypeInMap.organizationPartyId"
                     from="acctgTransEntry.organizationPartyId"/>
                <set field="getGlAccountFromAccountTypeInMap.acctgTransTypeId" from="acctgTrans.acctgTransTypeId"/>
                <set field="getGlAccountFromAccountTypeInMap.glAccountTypeId" from="acctgTransEntry.glAccountTypeId"/>
                <set field="getGlAccountFromAccountTypeInMap.debitCreditFlag" from="acctgTransEntry.debitCreditFlag"/>
                <set field="getGlAccountFromAccountTypeInMap.productId" from="acctgTransEntry.productId"/>
                <set field="getGlAccountFromAccountTypeInMap.partyId" from="acctgTrans.partyId"/>
                <set field="getGlAccountFromAccountTypeInMap.roleTypeId" from="acctgTrans.roleTypeId"/>
                <set field="getGlAccountFromAccountTypeInMap.invoiceId" from="acctgTrans.invoiceId"/>
                <set field="getGlAccountFromAccountTypeInMap.paymentId" from="acctgTrans.paymentId"/>
                <call-service break-on-error="true" error-code="error" in-map-name="getGlAccountFromAccountTypeInMap"
                              include-user-login="true"
                              require-new-transaction="false" service-name="getGlAccountFromAccountType"
                              success-code="success">
                    <result-to-field field="acctgTransEntry.glAccountId" result-name="glAccountId"/>
                </call-service>
            </if-empty>
            <if-empty field="acctgTransEntry.origAmount">
                <set field="acctgTransEntry.origAmount" from="acctgTransEntry.amount"/>
            </if-empty>
            <entity-one auto-field-map="false" entity-name="GlAccountType" use-cache="true" value-field="glAccountType">
                <field-map field-name="glAccountTypeId" from-field="acctgTransEntry.glAccountTypeId"/>
            </entity-one>
            <if-empty field="glAccountType">
                <clear-field field="acctgTransEntry.glAccountTypeId"/>
            </if-empty>
            <store-value do-cache-clear="true" value-field="acctgTransEntry"/>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="false"
                   method-name="createAcctgTransAndEntries" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Verifies and posts a set of AcctgTransEntries" use-transaction="true">
        <log level="always" message="Return IN*** ${parameters}"/>
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <!-- first loop through and make sure all the entries are valid -->
        <iterate entry="acctgTransEntry" list="parameters.acctgTransEntries">
            <!-- the organization party must be an internal organization -->
            <entity-one auto-field-map="false" entity-name="PartyRole" use-cache="true" value-field="partyRole">
                <field-map field-name="partyId" from-field="acctgTransEntry.organizationPartyId"/>
                <field-map field-name="roleTypeId" value="INTERNAL_ORGANIZATIO"/>
            </entity-one>
            <if-empty field="partyRole">
                <log level="warning"
                     message="The party with id [${acctgTransEntry.organizationPartyId}] is not an internal organization; the following accounting transaction will be ignored: ${acctgTransEntry}"/>
                <else>
                    <set field="partyAccountingPreferencesCallMap.organizationPartyId"
                         from="acctgTransEntry.organizationPartyId"/>
                    <call-service break-on-error="true" error-code="error"
                                  in-map-name="partyAccountingPreferencesCallMap" include-user-login="true"
                                  require-new-transaction="false" service-name="getPartyAccountingPreferences"
                                  success-code="success">
                        <result-to-field field="partyAcctgPreference" result-name="partyAccountingPreference"/>
                    </call-service>
                    <if-empty field="partyAcctgPreference">
                        <log level="warning"
                             message="The internal organization with id [${acctgTransEntry.organizationPartyId}] has no PartyAcctgPreference setting; the following accounting transaction will be ignored: ${acctgTransEntry}"/>
                        <else>
                            <!-- if the amount field is empty, then determine it from the origAmount and origCurrencyUomId fields: if origCurrencyUomId is different from the base currency 
								of the organization, then the amount value will be converted -->
                            <if-empty field="acctgTransEntry.amount">
                                <if-not-empty field="acctgTransEntry.origAmount">
                                    <if-empty field="acctgTransEntry.origCurrencyUomId">
                                        <set field="acctgTransEntry.origCurrencyUomId"
                                             from="partyAcctgPreference.baseCurrencyUomId"/>
                                    </if-empty>
                                    <set field="acctgTransEntry.currencyUomId"
                                         from="partyAcctgPreference.baseCurrencyUomId"/>
                                    <if-compare-field field="acctgTransEntry.origCurrencyUomId" operator="not-equals"
                                                      to-field="acctgTransEntry.currencyUomId" type="String">
                                        <clear-field field="convertUomInMap"/>
                                        <set field="convertUomInMap.originalValue" from="acctgTransEntry.origAmount"/>
                                        <set field="convertUomInMap.uomId" from="acctgTransEntry.origCurrencyUomId"/>
                                        <set field="convertUomInMap.uomIdTo" from="acctgTransEntry.currencyUomId"/>
                                        <set field="convertUomInMap.asOfDate" from="parameters.transactionDate"/>
                                        <!-- TODO: set the optional asOfDate input parameter -->
                                        <call-service break-on-error="true" error-code="error"
                                                      in-map-name="convertUomInMap" include-user-login="true"
                                                      require-new-transaction="false"
                                                      service-name="convertUom" success-code="success">
                                            <result-to-field field="acctgTransEntry.amount"
                                                             result-name="convertedValue"/>
                                        </call-service>
                                        <else>
                                            <set field="acctgTransEntry.amount" from="acctgTransEntry.origAmount"/>
                                        </else>
                                    </if-compare-field>
                                </if-not-empty>
                            </if-empty>
                            <!-- if the glAccountId is empty, but we have a glAccountTypeId, then we will determine the correct glAccountId from the gl setup settings -->
                            <if-empty field="acctgTransEntry.glAccountId">
                                <log level="info" message="**********samGLEntry111 ${acctgTransEntry}"/>
                                <clear-field field="getGlAccountFromAccountTypeInMap"/>
                                <set field="getGlAccountFromAccountTypeInMap.organizationPartyId"
                                     from="acctgTransEntry.organizationPartyId"/>
                                <set field="getGlAccountFromAccountTypeInMap.acctgTransTypeId"
                                     from="parameters.acctgTransTypeId"/>
                                <set field="getGlAccountFromAccountTypeInMap.glAccountTypeId"
                                     from="acctgTransEntry.glAccountTypeId"/>
                                <set field="getGlAccountFromAccountTypeInMap.debitCreditFlag"
                                     from="acctgTransEntry.debitCreditFlag"/>
                                <set field="getGlAccountFromAccountTypeInMap.productId"
                                     from="acctgTransEntry.productId"/>
                                <set field="getGlAccountFromAccountTypeInMap.partyId" from="parameters.partyId"/>
                                <set field="getGlAccountFromAccountTypeInMap.roleTypeId" from="parameters.roleTypeId"/>
                                <set field="getGlAccountFromAccountTypeInMap.invoiceId" from="parameters.invoiceId"/>
                                <set field="getGlAccountFromAccountTypeInMap.paymentId" from="parameters.paymentId"/>
                                <call-service break-on-error="true" error-code="error"
                                              in-map-name="getGlAccountFromAccountTypeInMap" include-user-login="true"
                                              require-new-transaction="false" service-name="getGlAccountFromAccountType"
                                              success-code="success">
                                    <result-to-field field="acctgTransEntry.glAccountId" result-name="glAccountId"/>
                                </call-service>
                            </if-empty>
                            <log level="info" message="************samGL ${glAccountId}"/>
                            <if-empty field="acctgTransEntry.origAmount">
                                <set field="acctgTransEntry.origAmount" from="acctgTransEntry.amount"/>
                            </if-empty>
                            <entity-one auto-field-map="false" entity-name="GlAccountType" use-cache="true"
                                        value-field="glAccountType">
                                <field-map field-name="glAccountTypeId" from-field="acctgTransEntry.glAccountTypeId"/>
                            </entity-one>
                            <if-empty field="glAccountType">
                                <clear-field field="acctgTransEntry.glAccountTypeId"/>
                            </if-empty>
                            <set field="normalizedAcctgTransEntries[]" from="acctgTransEntry"/>
                        </else>
                    </if-empty>
                </else>
            </if-empty>
        </iterate>
        <if-not-empty field="normalizedAcctgTransEntries">
            <!-- now do the posting. First, create the AcctgTrans entity -->
            <set-service-fields map="parameters" service-name="createAcctgTrans" to-map="createAcctgTransParams"/>
            <if-empty field="createAcctgTransParams.transactionDate">
                <now-timestamp field="createAcctgTransParams.transactionDate"/>
            </if-empty>
            <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransParams"
                          include-user-login="true" require-new-transaction="false"
                          service-name="createAcctgTrans" success-code="success">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <!-- Next, create the AcctgTransEntry entities one by one -->
            <iterate entry="acctgTransEntry" list="normalizedAcctgTransEntries">
                <!-- if any amount is negative, then get the absolute (positive) value of that amount, and flip the Debit/Credit flag -->
                <if-compare field="acctgTransEntry.origAmount" operator="less" type="String" value="0">
                    <log level="verbose" message="${acctgTransEntry} is going to get inverted"/>
                    <calculate decimal-scale="2" field="acctgTransEntry.origAmount" rounding-mode="HalfEven"
                               type="BigDecimal">
                        <calcop field="acctgTransEntry.origAmount" operator="negative"/>
                    </calculate>
                    <calculate decimal-scale="2" field="acctgTransEntry.amount" rounding-mode="HalfEven"
                               type="BigDecimal">
                        <calcop field="acctgTransEntry.amount" operator="negative"/>
                    </calculate>
                    <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" type="String" value="D">
                        <set field="acctgTransEntry.debitCreditFlag" value="C"/>
                        <else>
                            <if-compare field="acctgTransEntry.debitCreditFlag" operator="equals" type="String"
                                        value="C">
                                <set field="acctgTransEntry.debitCreditFlag" value="D"/>
                            </if-compare>
                        </else>
                    </if-compare>
                </if-compare>
                <!-- now create the AcctgTransEntry using the acctgTransId we already have from above -->
                <clear-field field="createAcctgTransEntryParams"/>
                <!--  If the Transaction Amount is equal to zero, do not create the Transaction Entry -->
                <if-compare field="acctgTransEntry.origAmount" operator="greater" value="0">
                    <set-service-fields map="acctgTransEntry" service-name="createAcctgTransEntry"
                                        to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from="acctgTransId"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransEntryParams"
                                  include-user-login="true"
                                  require-new-transaction="false" service-name="createAcctgTransEntry"
                                  success-code="success"/>
                </if-compare>
            </iterate>
            <else>
                <log level="warning" message="Cannot process an accounting transactions with empty list of entries."/>
            </else>
        </if-not-empty>
        <!-- all done -->
        <entity-one auto-field-map="true" entity-name="PartyAcctgPreference" use-cache="true"
                    value-field="partyAcctgPreference">
            <field-map field-name="partyId" value="Company"/>
        </entity-one>
        <set field="autoPosting" from-field="partyAcctgPreference.autoPosting"/>
        <field-to-result field="autoPosting" result-name="autoPosting"/>
        <field-to-result field="acctgTransId"/>
    </simple-method>
    <!-- Miscellaneous services for product and inventory -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getGlAccountFromAccountType" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Look up a GlAccountId from GlAccountTypeId" use-transaction="true">
        <!-- if this is an inventory variance then the glAccountTypeId contains the varianceReasonId; the value is used to lookup the account id in the VarianceReasonGlAccount
			entity -->
        <log level="error" message="${parameters}"/>
        <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String" value="ITEM_VARIANCE">
            <call-simple-method method-name="getVarianceReasonGlAccountInline"/>
            <if-not-empty field="varianceReasonGlAccount.glAccountId">
                <field-to-result field="varianceReasonGlAccount.glAccountId" result-name="glAccountId"/>
                <return response-code="success"/>
            </if-not-empty>
        </if-compare>
        <!-- fixed asset depreciation -->
        <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String" value="DEPRECIATION">
            <if-not-empty field="parameters.fixedAssetId">
                <entity-condition distinct="false" entity-name="FixedAssetTypeGlAccount" filter-by-date="false"
                                  list="fixedAssetTypeGlAccounts" use-cache="false">
                    <condition-expr field-name="fixedAssetId" from-field="parameters.fixedAssetId" operator="equals"/>
                </entity-condition>
                <if-empty field="fixedAssetTypeGlAccounts">
                    <entity-one auto-field-map="false" entity-name="FixedAsset" use-cache="false"
                                value-field="fixedAsset">
                        <field-map field-name="fixedAssetId" from-field="parameters.fixedAssetId"/>
                    </entity-one>
                    <entity-condition distinct="false" entity-name="FixedAssetTypeGlAccount" filter-by-date="false"
                                      list="fixedAssetTypeGlAccounts" use-cache="false">
                        <condition-list combine="and">
                            <condition-expr field-name="fixedAssetId" ignore-if-null="false" operator="equals"
                                            value="_NA_"/>
                            <condition-list combine="or">
                                <condition-expr field-name="fixedAssetTypeId" from-field="fixedAsset.fixedAssetTypeId"
                                                ignore="false" ignore-case="false"
                                                ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                                <condition-expr field-name="fixedAssetTypeId" ignore-if-null="false" operator="equals"
                                                value="_NA_"/>
                            </condition-list>
                        </condition-list>
                    </entity-condition>
                </if-empty>
                <first-from-list entry="fixedAssetTypeGlAccount" list="fixedAssetTypeGlAccounts"/>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="fixedAssetTypeGlAccount.accDepGlAccountId"/>
                            </not>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" type="String" value="C"/>
                        </and>
                    </condition>
                    <then>
                        <field-to-result field="fixedAssetTypeGlAccount.accDepGlAccountId" result-name="glAccountId"/>
                        <return response-code="success"/>
                    </then>
                </if>
                <if>
                    <condition>
                        <and>
                            <not>
                                <if-empty field="fixedAssetTypeGlAccount.depGlAccountId"/>
                            </not>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" type="String" value="D"/>
                        </and>
                    </condition>
                    <then>
                        <field-to-result field="fixedAssetTypeGlAccount.depGlAccountId" result-name="glAccountId"/>
                        <return response-code="success"/>
                    </then>
                </if>
            </if-not-empty>
        </if-compare>
        <!-- check first if there is a party specific account mapping defined for the account type -->
        <if>
            <condition>
                <and>
                    <not>
                        <if-empty field="parameters.glAccountTypeId"/>
                    </not>
                    <not>
                        <if-empty field="parameters.partyId"/>
                    </not>
                    <not>
                        <if-empty field="parameters.roleTypeId"/>
                    </not>
                </and>
            </condition>
            <then>
                <call-simple-method method-name="getPartyGlAccountInline"/>
                <if-not-empty field="partyGlAccount.glAccountId">
                    <field-to-result field="partyGlAccount.glAccountId" result-name="glAccountId"/>
                    <return response-code="success"/>
                </if-not-empty>
            </then>
        </if>
        <if>
            <condition>
                <and>
                    <or>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String"
                                        value="OUTGOING_PAYMENT"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" type="String" value="C"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String"
                                        value="INCOMING_PAYMENT"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" type="String" value="D"/>
                        </and>
                    </or>
                    <not>
                        <if-empty field="parameters.paymentId"/>
                    </not>
                </and>
            </condition>
            <then>
                <log level="error" message=" TRYING TO FIND THE DEBIT ACCOUNT"/>
                <entity-one auto-field-map="true" entity-name="Payment" use-cache="false" value-field="payment"/>
                <get-related-one relation-name="PaymentMethod" to-value-field="paymentMethod" use-cache="false"
                                 value-field="payment"/>
                <if-not-empty field="paymentMethod.glAccountId">
                    <field-to-result field="paymentMethod.glAccountId" result-name="glAccountId"/>
                    <return response-code="success"/>
                </if-not-empty>
                <if-compare field="payment.paymentMethodTypeId" operator="equals" type="String" value="CREDIT_CARD">
                    <get-related-one relation-name="CreditCard" to-value-field="creditCard" use-cache="false"
                                     value-field="payment"/>
                    <call-simple-method method-name="getCreditCardTypeGlAccountInline"/>
                    <if-not-empty field="creditCardTypeGlAccount.glAccountId">
                        <field-to-result field="creditCardTypeGlAccount.glAccountId" result-name="glAccountId"/>
                        <return response-code="success"/>
                    </if-not-empty>
                </if-compare>
                <call-simple-method method-name="getPaymentMethodTypeGlAccountInline"/>
                <if-not-empty field="paymentMethodTypeGlAccount.glAccountId">
                    <field-to-result field="paymentMethodTypeGlAccount.glAccountId" result-name="glAccountId"/>
                    <return response-code="success"/>
                </if-not-empty>
                <return response-code="success"/>
            </then>
        </if>
        <if-not-empty field="parameters.productId">
            <call-simple-method method-name="getProductGlAccountInline"/>
            <!-- if nothing found look if the parameters.productId is member of any ProductCategory in ProductCategoryGlAccount -->
            <if-empty field="productGlAccount.glAccountId">
                <entity-and entity-name="ProductCategoryMember" filter-by-date="true" list="productCategoryMembers"
                            use-cache="false">
                    <field-map field-name="productId" from-field="parameters.productId"/>
                    <order-by field-name="-fromDate"/>
                </entity-and>
                <iterate entry="productCategoryMember" list="productCategoryMembers">
                    <call-simple-method method-name="getProductCategoryGlAccountInline"/>
                    <if-not-empty field="productCategoryGlAccount.glAccountId">
                        <field-to-result field="productCategoryGlAccount.glAccountId" result-name="glAccountId"/>
                        <return response-code="success"/>
                    </if-not-empty>
                </iterate>
                <else>
                    <set field="lookedUpValue.glAccountId" from="productGlAccount.glAccountId"/>
                    <field-to-result field="lookedUpValue.glAccountId" result-name="glAccountId"/>
                    <return response-code="success"/>
                </else>
            </if-empty>
        </if-not-empty>
        <if>
            <condition>
                <and>
                    <or>
                        <and>
                            <or>
                                <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String"
                                            value="XFR_SHIP_INVOICE"/>
                                <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String"
                                            value="PURCHASE_INVOICE"/>
                            </or>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" type="String" value="D"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String"
                                        value="CUST_RTN_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" type="String" value="C"/>
                        </and>
                        <and>
                            <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String"
                                        value="SALES_INVOICE"/>
                            <if-compare field="parameters.debitCreditFlag" operator="equals" type="String" value="C"/>
                        </and>
                    </or>
                    <not>
                        <if-empty field="parameters.invoiceId"/>
                    </not>
                    <not>
                        <if-empty field="parameters.glAccountTypeId"/>
                    </not>
                </and>
            </condition>
            <then>
                <log level="error" message="  ******* Get GL Account Id for Purchase Invoice  ***"/>
                <if-not-empty field="parameters.productId">
                    <if-compare field="parameters.acctgTransTypeId" operator="equals" type="String"
                                value="PURCHASE_INVOICE">
                        <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                        <set field="glAccountTypeDefault" from="lookedUpValue"/>
                        <log level="error"
                             message="  ******* Get GL Account Id for Purchase Invoice ${lookedUpValue} ***"/>
                        <else>
                            <set field="parameters.glAccountTypeId" value="SALES_ACCOUNT"/>
                            <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
                            <set field="glAccountTypeDefault" from="lookedUpValue"/>
                        </else>
                    </if-compare>
                    <if-not-empty field="glAccountTypeDefault.glAccountId">
                        <field-to-result field="glAccountTypeDefault.glAccountId" result-name="glAccountId"/>
                        <return response-code="success"/>
                    </if-not-empty>
                </if-not-empty>
                <call-simple-method method-name="getInvoiceItemTypeGlAccountInline"/>
                <if-not-empty field="invoiceItemTypeGlAccount.glAccountId">
                    <field-to-result field="invoiceItemTypeGlAccount.glAccountId" result-name="glAccountId"/>
                    <return response-code="success"/>
                </if-not-empty>
                <entity-one auto-field-map="true" entity-name="InvoiceItemType" use-cache="false"
                            value-field="invoiceItemType">
                    <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
                </entity-one>
                <if-not-empty field="invoiceItemType.defaultGlAccountId">
                    <field-to-result field="invoiceItemType.defaultGlAccountId" result-name="glAccountId"/>
                    <return response-code="success"/>
                </if-not-empty>
            </then>
        </if>
        <!-- if nothing found or if no such parameters were passed (lookedUpValue empty in both cases), try GlAccountTypeDefault -->
        <if-empty field="lookedUpValue.glAccountId">
            <call-simple-method method-name="getGlAccountTypeDefaultInline"/>
        </if-empty>
        <field-to-result field="lookedUpValue.glAccountId" result-name="glAccountId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getInventoryItemOwner"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Get an ownerPartyId from inventoryItemId" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="InventoryItem" use-cache="false" value-field="inventoryItem"/>
        <if-empty field="inventoryItem.ownerPartyId">
            <get-related-one relation-name="Facility" to-value-field="facility" use-cache="false"
                             value-field="inventoryItem"/>
            <field-to-result field="facility.ownerPartyId" result-name="ownerPartyId"/>
            <else>
                <field-to-result field="inventoryItem.ownerPartyId" result-name="ownerPartyId"/>
            </else>
        </if-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="closeTimePeriod"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Close a financial CustomTimePeriod" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="CustomTimePeriod" use-cache="false"
                    value-field="customTimePeriod"/>
        <set field="customTimePeriod.isClosed" value="Y"/>
        <store-value value-field="customTimePeriod"/>
        <field-to-result field="parameters.customTimePeriodId" result-name="customTimePeriodId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="closeFinancialTimePeriod"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Close a financial CustomTimePeriod" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="CustomTimePeriod" use-cache="false"
                    value-field="customTimePeriod"/>
        <set field="openTimePeriodCondition.isClosed" value="N"/>
        <get-related list="openChildTimePeriods" map="openTimePeriodCondition" relation-name="ChildCustomTimePeriod"
                     use-cache="false" value-field="customTimePeriod"/>
        <iterate entry="openChildTimePeriod" list="openChildTimePeriods">
            <add-error error-list-name="error_list">
                <fail-message
                        message="Cannot close time period [${customTimePeriod.customTimePeriodId}] because the child time period ${openChildTimePeriod.periodName} [${openChildTimePeriod.customTimePeriodId}] is not closed."/>
            </add-error>
        </iterate>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!-- retrieve the last closed date for the same type of time period -->
        <set field="findLastClosedDateInMap.organizationPartyId" from="customTimePeriod.organizationPartyId"/>
        <set field="findLastClosedDateInMap.periodTypeId" from="customTimePeriod.periodTypeId"/>
        <call-service break-on-error="true" error-code="error" in-map-name="findLastClosedDateInMap"
                      include-user-login="true" require-new-transaction="false"
                      service-name="findLastClosedDate" success-code="success">
            <result-to-field result-name="lastClosedDate"/>
            <result-to-field result-name="lastClosedTimePeriod"/>
        </call-service>
        <if-empty field="lastClosedDate">
            <add-error error-list-name="error_list">
                <fail-message
                        message="Unable to find a last closed date for time period [${customTimePeriod.customTimePeriodId}] of type [${customTimePeriod.customTimePeriodId}] for organization [${customTimePeriod.organizationPartyId}]"/>
            </add-error>
        </if-empty>
        <check-errors error-code="error" error-list-name="error_list"/>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="expenseGlAccountClass">
            <field-map field-name="glAccountClassId" value="EXPENSE"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="expenseAccountClassIds">
            <field field="expenseGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="revenueGlAccountClass">
            <field-map field-name="glAccountClassId" value="REVENUE"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="revenueAccountClassIds">
            <field field="revenueGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="incomeGlAccountClass">
            <field-map field-name="glAccountClassId" value="INCOME"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="incomeAccountClassIds">
            <field field="incomeGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="assetGlAccountClass">
            <field-map field-name="glAccountClassId" value="ASSET"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="assetAccountClassIds">
            <field field="assetGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="contraAssetGlAccountClass">
            <field-map field-name="glAccountClassId" value="CONTRA_ASSET"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="contraAssetAccountClassIds">
            <field field="contraAssetGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="liabilityGlAccountClass">
            <field-map field-name="glAccountClassId" value="LIABILITY"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="liabilityAccountClassIds">
            <field field="liabilityGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="equityGlAccountClass">
            <field-map field-name="glAccountClassId" value="EQUITY"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="equityAccountClassIds">
            <field field="equityGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <!-- Compute the total posted amount of the period for expense/revenue/income accounts -->
        <entity-condition distinct="false" entity-name="AcctgTransAndEntries" filter-by-date="false"
                          list="acctgTransAndEntries" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"
                                ignore="false" ignore-case="false"
                                ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="isPosted" ignore-if-null="false" operator="equals"
                                value="Y"/>
                <condition-expr field-name="glFiscalTypeId" ignore-if-null="false" operator="equals"
                                value="ACTUAL"/>
                <condition-expr field-name="transactionDate" from-field="lastClosedDate"
                                ignore-if-null="false" operator="greater-equals"/>
                <condition-expr field-name="transactionDate" from-field="customTimePeriod.thruDate"
                                ignore-if-null="false" operator="less"/>
                <!-- FIXME: Date to Timestamp -->
                <condition-expr field-name="acctgTransTypeId" ignore-if-null="false" operator="not-equals"
                                value="PERIOD_CLOSING"/>
                <condition-list combine="or">
                    <condition-expr field-name="glAccountClassId" from-field="expenseAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                    <condition-expr field-name="glAccountClassId" from-field="revenueAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                    <condition-expr field-name="glAccountClassId" from-field="incomeAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                </condition-list>
            </condition-list>
            <order-by field-name="acctgTransId"/>
            <order-by field-name="acctgTransEntrySeqId"/>
        </entity-condition>
        <set field="totalAmount" type="BigDecimal" value="0.0"/>
        <set field="totalCreditAmount" type="BigDecimal" value="0.0"/>
        <set field="totalDebitAmount" type="BigDecimal" value="0.0"/>
        <iterate entry="acctgTransAndEntry" list="acctgTransAndEntries">
            <get-related-one relation-name="GlAccount" to-value-field="glAccount" use-cache="false"
                             value-field="acctgTransAndEntry"/>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isCreditAccount"
                               ret-field="isCreditAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isDebitAccount"
                               ret-field="isDebitAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isExpenseAccount"
                               ret-field="isExpenseAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <set field="amount" from="acctgTransAndEntry.amount"/>
            <if>
                <condition>
                    <if-compare field="acctgTransAndEntry.debitCreditFlag" operator="equals" type="String" value="D"/>
                </condition>
                <then>
                    <calculate decimal-scale="2" field="totalDebitAmount" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="totalDebitAmount" operator="add">
                            <calcop field="amount" operator="get"/>
                        </calcop>
                    </calculate>
                </then>
                <else>
                    <calculate decimal-scale="2" field="totalCreditAmount" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="totalCreditAmount" operator="add">
                            <calcop field="amount" operator="get"/>
                        </calcop>
                    </calculate>
                </else>
            </if>
        </iterate>
        <calculate decimal-scale="2" field="totalAmount" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="totalCreditAmount" operator="subtract">
                <calcop field="totalDebitAmount" operator="get"/>
            </calcop>
        </calculate>
        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from="customTimePeriod.organizationPartyId"/>
        <call-service break-on-error="true" error-code="error" in-map-name="partyAccountingPreferencesCallMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="getPartyAccountingPreferences"
                      success-code="success">
            <result-to-field field="partyAcctgPreference" result-name="partyAccountingPreference"/>
        </call-service>
        <!-- get the profit and loss gl account id -->
        <entity-one auto-field-map="true" entity-name="GlAccountTypeDefault" use-cache="true"
                    value-field="profitLossAccount">
            <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
            <field-map field-name="glAccountTypeId" value="PROFIT_LOSS_ACCOUNT"/>
        </entity-one>
        <entity-one auto-field-map="true" entity-name="GlAccountHistory" use-cache="false"
                    value-field="profitLossAccountHistory">
            <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
            <field-map field-name="customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
            <field-map field-name="glAccountId" from-field="profitLossAccount.glAccountId"/>
        </entity-one>
        <if-not-empty field="profitLossAccountHistory">
            <!-- already posted: verify if numbers match -->
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="getNetBalance"
                               ret-field="postedBalance">
                <field field="profitLossAccountHistory" type="GenericValue"/>
            </call-class-method>
            <if-compare-field field="postedBalance" operator="not-equals" to-field="totalAmount" type="BigDecimal">
                <add-error error-list-name="error_list">
                    <fail-message
                            message="There is already a posted balance [${postedBalance}] that doesn't match with the current one [${totalAmount}]."/>
                </add-error>
            </if-compare-field>
            <check-errors error-code="error" error-list-name="error_list"/>
            <else>
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.glAccountTypeId" value="RETAINED_EARNINGS"/>
                <set field="creditEntry.organizationPartyId" from="customTimePeriod.organizationPartyId"/>
                <set field="creditEntry.origAmount" from="totalAmount"/>
                <set field="creditEntry.origCurrencyUomId" from="partyAcctgPreference.baseCurrencyUomId"/>
                <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.glAccountTypeId" value="PROFIT_LOSS_ACCOUNT"/>
                <set field="debitEntry.organizationPartyId" from="customTimePeriod.organizationPartyId"/>
                <set field="debitEntry.origAmount" from="totalAmount"/>
                <set field="debitEntry.origCurrencyUomId" from="partyAcctgPreference.baseCurrencyUomId"/>
                <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
                <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PERIOD_CLOSING"/>
                <!-- Set the transaction date 1 second before the end of the period, so that it is included in the old period -->
                <set-calendar field="createAcctgTransAndEntriesInMap.transactionDate"
                              from-field="customTimePeriod.thruDate" seconds="-1" set-if-empty="true"
                              set-if-null="false"/>
                <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
                <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                              include-user-login="true"
                              require-new-transaction="false" service-name="createAcctgTransAndEntries"
                              success-code="success">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
            </else>
        </if-not-empty>
        <!-- The history records in the current time period are updated with the endingBalance field -->
        <entity-and entity-name="GlAccountHistory" filter-by-date="false" list="glAccountHistories" use-cache="false">
            <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
            <field-map field-name="customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
        </entity-and>
        <iterate entry="glAccountHistory" list="glAccountHistories">
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="getNetBalance"
                               ret-field="endingBalance">
                <field field="glAccountHistory" type="GenericValue"/>
            </call-class-method>
            <set field="glAccountHistory.endingBalance" from="endingBalance"/>
            <store-value do-cache-clear="true" value-field="glAccountHistory"/>
        </iterate>
        <!-- For all the accounts of class asset/contra-asset/liability/equity the endingBalance of the last time period's history is added to the one of the history of 
			the period being closed -->
        <if-not-empty field="lastClosedTimePeriod">
            <entity-condition distinct="false" entity-name="GlAccountAndHistory" filter-by-date="false"
                              list="lastPeriodGlAccountAndHistories"
                              use-cache="false">
                <condition-list combine="and">
                    <condition-expr field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"
                                    ignore="false" ignore-case="false"
                                    ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    <condition-expr field-name="customTimePeriodId" from-field="lastClosedTimePeriod.customTimePeriodId"
                                    ignore="false" ignore-case="false"
                                    ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    <condition-list combine="or">
                        <condition-expr field-name="glAccountClassId" from-field="assetAccountClassIds"
                                        ignore-if-null="false" operator="in"/>
                        <condition-expr field-name="glAccountClassId" from-field="contraAssetAccountClassIds"
                                        ignore-if-null="false" operator="in"/>
                        <condition-expr field-name="glAccountClassId" from-field="liabilityAccountClassIds"
                                        ignore-if-null="false" operator="in"/>
                        <condition-expr field-name="glAccountClassId" from-field="equityAccountClassIds"
                                        ignore-if-null="false" operator="in"/>
                    </condition-list>
                </condition-list>
                <order-by field-name="glAccountId"/>
            </entity-condition>
            <iterate entry="lastPeriodGlAccountAndHistory" list="lastPeriodGlAccountAndHistories">
                <get-related-one relation-name="GlAccountHistory" to-value-field="lastPeriodGlAccountHistory"
                                 use-cache="false" value-field="lastPeriodGlAccountAndHistory"/>
                <entity-one auto-field-map="false" entity-name="GlAccountHistory" use-cache="false"
                            value-field="thisPeriodGlAccountHistory">
                    <field-map field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"/>
                    <field-map field-name="customTimePeriodId" from-field="customTimePeriod.customTimePeriodId"/>
                    <field-map field-name="glAccountId" from-field="lastPeriodGlAccountHistory.glAccountId"/>
                </entity-one>
                <if-empty field="thisPeriodGlAccountHistory">
                    <make-value entity-name="GlAccountHistory" value-field="thisPeriodGlAccountHistory"/>
                    <set field="thisPeriodGlAccountHistory.customTimePeriodId"
                         from="customTimePeriod.customTimePeriodId"/>
                    <set field="thisPeriodGlAccountHistory.organizationPartyId"
                         from="customTimePeriod.organizationPartyId"/>
                    <set field="thisPeriodGlAccountHistory.glAccountId" from="lastPeriodGlAccountHistory.glAccountId"/>
                    <set field="thisPeriodGlAccountHistory.postedDebits" type="BigDecimal" value="0.0"/>
                    <set field="thisPeriodGlAccountHistory.postedCredits" type="BigDecimal" value="0.0"/>
                    <set field="thisPeriodGlAccountHistory.endingBalance"
                         from="lastPeriodGlAccountHistory.endingBalance"/>
                    <create-value do-cache-clear="true" or-store="false" value-field="thisPeriodGlAccountHistory"/>
                    <else>
                        <calculate decimal-scale="2" field="thisPeriodGlAccountHistory.endingBalance"
                                   rounding-mode="HalfEven" type="BigDecimal">
                            <calcop field="thisPeriodGlAccountHistory.endingBalance" operator="add">
                                <calcop field="lastPeriodGlAccountHistory.endingBalance" operator="get"/>
                            </calcop>
                        </calculate>
                        <store-value do-cache-clear="true" value-field="thisPeriodGlAccountHistory"/>
                    </else>
                </if-empty>
            </iterate>
        </if-not-empty>
        <!-- TODO: the usage of GlAccountOrganization.postedAmount is deprecated in place of GlAccountHistory; the next section will then be removed -->
        <!-- Initialize the GlAccountOrganization.postedAmount for expense/revenue/income accounts for the new fiscal period -->
        <entity-condition distinct="false" entity-name="GlAccountOrganizationAndClass" filter-by-date="false"
                          list="glAccountOrganizationAndClassList"
                          use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"
                                ignore="false" ignore-case="false"
                                ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="postedBalance" ignore-if-null="false" operator="not-equals"
                                value="0.0"/>
                <condition-list combine="or">
                    <condition-expr field-name="glAccountClassId" from-field="expenseAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                    <condition-expr field-name="glAccountClassId" from-field="revenueAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                    <condition-expr field-name="glAccountClassId" from-field="incomeAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                    <condition-expr field-name="glAccountId" from-field="profitLossAccount.glAccountId"
                                    ignore-if-null="false" operator="equals"/>
                </condition-list>
            </condition-list>
        </entity-condition>
        <now-timestamp field="nowTimestamp"/>
        <iterate entry="glAccountOrganizationAndClass" list="glAccountOrganizationAndClassList">
            <entity-condition distinct="false" entity-name="AcctgTransAndEntries" filter-by-date="false"
                              list="acctgTransAndEntries" use-cache="false">
                <condition-list combine="and">
                    <condition-expr field-name="organizationPartyId" from-field="customTimePeriod.organizationPartyId"
                                    ignore="false" ignore-case="false"
                                    ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    <condition-expr field-name="glAccountId" from-field="glAccountOrganizationAndClass.glAccountId"
                                    ignore="false" ignore-case="false"
                                    ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    <condition-expr field-name="isPosted" ignore-if-null="false" operator="equals"
                                    value="Y"/>
                    <condition-expr field-name="glFiscalTypeId" ignore-if-null="false" operator="equals"
                                    value="ACTUAL"/>
                    <condition-expr field-name="transactionDate" from-field="customTimePeriod.thruDate"
                                    ignore-if-null="false" operator="greater-equals"/>
                    <!-- FIXME: Date to Timestamp -->
                    <condition-expr field-name="transactionDate" from-field="nowTimestamp"
                                    ignore-if-null="false" operator="less"/>
                    <condition-expr field-name="acctgTransTypeId" ignore-if-null="false" operator="not-equals"
                                    value="PERIOD_CLOSING"/>
                </condition-list>
                <order-by field-name="acctgTransId"/>
                <order-by field-name="acctgTransEntrySeqId"/>
            </entity-condition>
            <set field="newPostedBalance" type="BigDecimal" value="0.0"/>
            <iterate entry="acctgTransAndEntry" list="acctgTransAndEntries">
                <get-related-one relation-name="GlAccount" to-value-field="glAccount" use-cache="false"
                                 value-field="acctgTransAndEntry"/>
                <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isCreditAccount"
                                   ret-field="isCreditAccount">
                    <field field="glAccount" type="GenericValue"/>
                </call-class-method>
                <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isDebitAccount"
                                   ret-field="isDebitAccount">
                    <field field="glAccount" type="GenericValue"/>
                </call-class-method>
                <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isExpenseAccount"
                                   ret-field="isExpenseAccount">
                    <field field="glAccount" type="GenericValue"/>
                </call-class-method>
                <set field="amount" from="acctgTransAndEntry.amount"/>
                <if>
                    <condition>
                        <or>
                            <and>
                                <if-compare field="acctgTransAndEntry.debitCreditFlag" operator="equals" type="String"
                                            value="D"/>
                                <if-compare field="isCreditAccount" operator="equals" type="Boolean" value="true"/>
                            </and>
                            <and>
                                <if-compare field="acctgTransAndEntry.debitCreditFlag" operator="equals" type="String"
                                            value="C"/>
                                <if-compare field="isDebitAccount" operator="equals" type="Boolean" value="true"/>
                            </and>
                        </or>
                    </condition>
                    <then>
                        <calculate decimal-scale="2" field="amount" rounding-mode="HalfEven" type="BigDecimal">
                            <calcop field="amount" operator="negative"/>
                        </calculate>
                    </then>
                </if>
                <calculate decimal-scale="2" field="newPostedBalance" rounding-mode="HalfEven" type="BigDecimal">
                    <calcop field="newPostedBalance" operator="add">
                        <calcop field="amount" operator="get"/>
                    </calcop>
                </calculate>
            </iterate>
            <set field="updateGlAccountOrganizationInMap.organizationPartyId"
                 from="customTimePeriod.organizationPartyId"/>
            <set field="updateGlAccountOrganizationInMap.glAccountId" from="glAccountOrganizationAndClass.glAccountId"/>
            <set field="updateGlAccountOrganizationInMap.postedBalance" from="newPostedBalance"/>
            <call-service break-on-error="true" error-code="error" in-map-name="updateGlAccountOrganizationInMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="updateGlAccountOrganization"
                          success-code="success"/>
        </iterate>
        <set field="updateCustomTimePeriodInMap.customTimePeriodId" from="customTimePeriod.customTimePeriodId"/>
        <set field="updateCustomTimePeriodInMap.organizationPartyId" from="customTimePeriod.organizationPartyId"/>
        <set field="updateCustomTimePeriodInMap.isClosed" value="Y"/>
        <call-service break-on-error="true" error-code="error" in-map-name="updateCustomTimePeriodInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="updateCustomTimePeriod" success-code="success"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="prepareIncomeStatement"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Prepare data for the Income Statement" use-transaction="true">
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="expenseGlAccountClass">
            <field-map field-name="glAccountClassId" value="EXPENSE"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="expenseAccountClassIds">
            <field field="expenseGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="revenueGlAccountClass">
            <field-map field-name="glAccountClassId" value="REVENUE"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="revenueAccountClassIds">
            <field field="revenueGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <entity-one auto-field-map="true" entity-name="GlAccountClass" use-cache="false"
                    value-field="incomeGlAccountClass">
            <field-map field-name="glAccountClassId" value="INCOME"/>
        </entity-one>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting"
                           method-name="getDescendantGlAccountClassIds" ret-field="incomeAccountClassIds">
            <field field="incomeGlAccountClass" type="GenericValue"/>
        </call-class-method>
        <set field="organizationPartyId" from="parameters.organizationPartyId"/>
        <set field="partyIds"
             from="groovy:org.ofbiz.party.party.PartyWorker.getAssociatedPartyIdsByRelationshipType(delegator, organizationPartyId, 'GROUP_ROLLUP')"
             type="List"/>
        <set field="partyIds[]" from="organizationPartyId"/>
        <entity-condition distinct="false" entity-name="AcctgTransAndEntries" filter-by-date="false"
                          list="acctgTransAndEntries" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" from-field="partyIds"
                                ignore-if-null="false" operator="in"/>
                <condition-expr field-name="isPosted" ignore-if-null="false" operator="equals"
                                value="Y"/>
                <condition-expr field-name="glFiscalTypeId" from-field="parameters.glFiscalTypeId"
                                ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="transactionDate" from-field="parameters.fromDate"
                                ignore-if-null="false" operator="greater-equals"/>
                <condition-expr field-name="transactionDate" from-field="parameters.thruDate"
                                ignore-if-null="false" operator="less"/>
                <!-- FIXME: Date to Timestamp -->
                <condition-expr field-name="acctgTransTypeId" ignore-if-null="false" operator="not-equals"
                                value="PERIOD_CLOSING"/>
                <condition-list combine="or">
                    <condition-expr field-name="glAccountClassId" from-field="expenseAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                    <condition-expr field-name="glAccountClassId" from-field="revenueAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                    <condition-expr field-name="glAccountClassId" from-field="incomeAccountClassIds"
                                    ignore-if-null="false" operator="in"/>
                </condition-list>
            </condition-list>
            <order-by field-name="acctgTransId"/>
            <order-by field-name="acctgTransEntrySeqId"/>
        </entity-condition>
        <set field="findCustomTimePeriodsMap.findDate" from="parameters.fromDate" type="Timestamp"/>
        <set field="findCustomTimePeriodsMap.organizationPartyId" from="organizationPartyId"/>
        <call-service break-on-error="true" error-code="error" in-map-name="findCustomTimePeriodsMap"
                      include-user-login="true" require-new-transaction="false"
                      service-name="findCustomTimePeriods" success-code="success">
            <result-to-field result-name="customTimePeriodList"/>
        </call-service>
        <first-from-list entry="customTimePeriod" list="customTimePeriodList"/>
        <set field="acctgTransEntriesAndTransTotalMap.isPosted" value="Y"/>
        <set field="acctgTransEntriesAndTransTotalMap.organizationPartyId" from="organizationPartyId"/>
        <set field="acctgTransEntriesAndTransTotalMap.customTimePeriodStartDate" from="customTimePeriod.fromDate"
             type="Timestamp"/>
        <set field="acctgTransEntriesAndTransTotalMap.customTimePeriodEndDate" from="parameters.thruDate"
             type="Timestamp"/>
        <set field="totalNetIncome" type="BigDecimal" value="0.0"/>
        <iterate entry="acctgTransAndEntry" list="acctgTransAndEntries">
            <get-related-one relation-name="GlAccount" to-value-field="glAccount" use-cache="false"
                             value-field="acctgTransAndEntry"/>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isCreditAccount"
                               ret-field="isCreditAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isDebitAccount"
                               ret-field="isDebitAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isExpenseAccount"
                               ret-field="isExpenseAccount">
                <field field="glAccount" type="GenericValue"/>
            </call-class-method>
            <set field="amount" from="acctgTransAndEntry.amount"/>
            <if>
                <condition>
                    <or>
                        <and>
                            <if-compare field="acctgTransAndEntry.debitCreditFlag" operator="equals" type="String"
                                        value="D"/>
                            <if-compare field="isCreditAccount" operator="equals" type="Boolean" value="true"/>
                        </and>
                        <and>
                            <if-compare field="acctgTransAndEntry.debitCreditFlag" operator="equals" type="String"
                                        value="C"/>
                            <if-compare field="isDebitAccount" operator="equals" type="Boolean" value="true"/>
                        </and>
                    </or>
                </condition>
                <then>
                    <calculate decimal-scale="2" field="amount" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="amount" operator="negative"/>
                    </calculate>
                </then>
            </if>
            <if-compare field="isExpenseAccount" operator="equals" type="Boolean" value="true">
                <calculate decimal-scale="2" field="amount" rounding-mode="HalfEven" type="BigDecimal">
                    <calcop field="amount" operator="negative"/>
                </calculate>
            </if-compare>
            <calculate decimal-scale="2" field="totalNetIncome" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="totalNetIncome" operator="add">
                    <calcop field="amount" operator="get"/>
                </calcop>
            </calculate>
            <if-compare field="isExpenseAccount" operator="equals" type="Boolean" value="true">
                <if-empty field="glAccountTotalsExpenseMap[glAccount.glAccountId]">
                    <set field="glAccountTotalsExpenseMap[glAccount.glAccountId]" type="BigDecimal" value="0.0"/>
                </if-empty>
                <calculate decimal-scale="2" field="glAccountTotalsExpenseMap[glAccount.glAccountId]"
                           rounding-mode="HalfEven" type="BigDecimal">
                    <calcop field="glAccountTotalsExpenseMap[glAccount.glAccountId]" operator="add">
                        <calcop field="amount" operator="get"/>
                    </calcop>
                </calculate>
                <else>
                    <if-empty field="glAccountTotalsProfitMap[glAccount.glAccountId]">
                        <set field="glAccountTotalsProfitMap[glAccount.glAccountId]" type="BigDecimal" value="0.0"/>
                    </if-empty>
                    <calculate decimal-scale="2" field="glAccountTotalsProfitMap[glAccount.glAccountId]"
                               rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="glAccountTotalsProfitMap[glAccount.glAccountId]" operator="add">
                            <calcop field="amount" operator="get"/>
                        </calcop>
                    </calculate>
                </else>
            </if-compare>
        </iterate>
        <iterate-map key="glAccountId" map="glAccountTotalsProfitMap" value="totalAmount">
            <clear-field field="glAccountTotalMap"/>
            <set field="glAccountTotalMap.glAccountId" from="glAccountId"/>
            <set field="glAccountTotalMap.totalAmount" from="totalAmount"/>
            <set field="acctgTransEntriesAndTransTotalMap.glAccountId" from="glAccountId"/>
            <call-service break-on-error="true" error-code="error" in-map-name="acctgTransEntriesAndTransTotalMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="getAcctgTransEntriesAndTransTotal"
                          success-code="success">
                <result-to-field result-name="debitTotal"/>
                <result-to-field result-name="creditTotal"/>
            </call-service>
            <set field="totalOfCurrentFiscalPeriod" from="debitTotal - creditTotal" type="BigDecimal"/>
            <calculate decimal-scale="${ledgerDecimals}" field="totalOfCurrentFiscalPeriod"
                       rounding-mode="${roundingMode}" type="BigDecimal">
                <calcop field="totalOfCurrentFiscalPeriod" operator="get"/>
            </calculate>
            <set field="glAccountTotalMap.totalOfCurrentFiscalPeriod" from="totalOfCurrentFiscalPeriod"
                 type="BigDecimal"/>
            <set field="glAccountIncomeList[]" from="glAccountTotalMap"/>
        </iterate-map>
        <set field="glAccountTotalsMap.income" from="glAccountIncomeList"/>
        <iterate-map key="glAccountId" map="glAccountTotalsExpenseMap" value="totalAmount">
            <clear-field field="glAccountTotalMap"/>
            <set field="glAccountTotalMap.glAccountId" from="glAccountId"/>
            <set field="glAccountTotalMap.totalAmount" from="totalAmount"/>
            <set field="acctgTransEntriesAndTransTotalMap.glAccountId" from="glAccountId"/>
            <call-service break-on-error="true" error-code="error" in-map-name="acctgTransEntriesAndTransTotalMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="getAcctgTransEntriesAndTransTotal"
                          success-code="success">
                <result-to-field result-name="debitTotal"/>
                <result-to-field result-name="creditTotal"/>
            </call-service>
            <set field="totalOfCurrentFiscalPeriod" from="debitTotal - creditTotal" type="BigDecimal"/>
            <calculate decimal-scale="${ledgerDecimals}" field="totalOfCurrentFiscalPeriod"
                       rounding-mode="${roundingMode}" type="BigDecimal">
                <calcop field="totalOfCurrentFiscalPeriod" operator="get"/>
            </calculate>
            <set field="glAccountTotalMap.totalOfCurrentFiscalPeriod" from="totalOfCurrentFiscalPeriod"
                 type="BigDecimal"/>
            <set field="glAccountExpenseList[]" from="glAccountTotalMap"/>
        </iterate-map>
        <set field="glAccountTotalsMap.expenses" from="glAccountExpenseList"/>
        <field-to-result field="totalNetIncome" result-name="totalNetIncome"/>
        <field-to-result field="glAccountTotalsMap" result-name="glAccountTotalsMap"/>
    </simple-method>
    <!-- Services for the automatic creation of accounting transactions based on business transactions Typically, these services are triggered by SECAs -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForSalesShipmentIssuance"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transactions for a sales shipment issuance (D: INVENTORY_ACCOUNT, C: COGS_ACCOUNT)"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="ItemIssuance" use-cache="false" value-field="itemIssuance"/>
        <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                         value-field="itemIssuance"/>
        <get-related-one value-field="inventoryItem" relation-name="Product" to-value-field="product"/>
        <if-compare field="product.productTypeId" operator="equals" value="ASSET_USAGE_OUT_IN">
            <return/>
        </if-compare>
        <entity-and entity-name="OrderRole" filter-by-date="false" list="billToCustomers" use-cache="false">
            <field-map field-name="orderId" from-field="itemIssuance.orderId"/>
            <field-map field-name="roleTypeId" value="BILL_TO_CUSTOMER"/>
        </entity-and>
        <first-from-list entry="billToCustomer" list="billToCustomers"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <!-- TODO: handle serialized inventory -->
        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <call-service break-on-error="true" error-code="error" in-map-name="partyAccountingPreferencesCallMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="getPartyAccountingPreferences"
                      success-code="success">
            <result-to-field field="partyAcctgPreference" result-name="partyAccountingPreference"/>
        </call-service>
        <set field="totalAmount" type="BigDecimal" value="0.0"/>
        <if>
            <condition>
                <or>
                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String"
                                value="COGS_INV_COST"/>
                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String"
                                value="COGS_AVG_COST"/>
                </or>
            </condition>
            <then>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String"
                            value="COGS_AVG_COST">
                    <set field="getProdAvgCostMap.inventoryItem" from="inventoryItem"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="getProdAvgCostMap"
                                  include-user-login="true" require-new-transaction="false"
                                  service-name="getProductAverageCost" success-code="success">
                        <result-to-field result-name="unitCost"/>
                    </call-service>
                    <log level="error" message=" Inventory getProductAverageCost ${unitCost}"/>

                    <else>
                        <set field="unitCost" from="inventoryItem.unitCost"/>
                    </else>
                </if-compare>
                <log level="error" message=" Inventory Unit Cost ${unitCost}"/>
                <calculate decimal-scale="${ledgerDecimals}" field="totalAmount" rounding-mode="${roundingMode}"
                           type="BigDecimal">
                    <calcop operator="multiply">
                        <calcop field="itemIssuance.quantity" operator="get"/>
                        <calcop field="unitCost" operator="get"/>
                    </calcop>
                </calculate>
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
                <set field="creditEntry.productId" from="inventoryItem.productId"/>
                <set field="creditEntry.inventoryItemId" from="inventoryItem.inventoryItemId"/>
                <set field="creditEntry.origAmount" from="totalAmount"/>
                <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
                <if-not-empty field="billToCustomer">
                    <set field="creditEntry.partyId" from="billToCustomer.partyId"/>
                    <set field="creditEntry.roleTypeId" from="billToCustomer.roleTypeId"/>
                </if-not-empty>
                <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
            </then>
            <else>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String" value="COGS_FIFO">
                    <set field="orderByString" value="+datetimeReceived"/>
                </if-compare>
                <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String" value="COGS_LIFO">
                    <set field="orderByString" value="-datetimeReceived"/>
                </if-compare>
                <if-empty field="orderByString">
                    <add-error error-list-name="error_list">
                        <fail-message
                                message="COGS costing method is not supported: ${partyAcctgPreference.cogsMethodId}"/>
                    </add-error>
                    <check-errors error-code="error" error-list-name="error_list"/>
                </if-empty>
                <set field="remainingQuantity" from="itemIssuance.quantity"/>
                <entity-condition distinct="false" entity-name="InventoryItem" filter-by-date="false"
                                  list="costInventoryItems" use-cache="false">
                    <condition-list combine="and">
                        <condition-expr field-name="ownerPartyId" from-field="inventoryItem.ownerPartyId"
                                        ignore-if-null="false" operator="equals"/>
                        <condition-expr field-name="facilityId" from-field="inventoryItem.facilityId"
                                        ignore-if-null="false" operator="equals"/>
                        <condition-expr field-name="productId" from-field="inventoryItem.productId"
                                        ignore-if-null="false" operator="equals"/>
                        <condition-expr field-name="accountingQuantityTotal" ignore-if-null="false"
                                        operator="greater" value="0.0"/>
                        <!-- <condition-expr field-name="quantityOnHandTotal" ignore-if-null="false"
                                         operator="greater" value="0"/>-->
                    </condition-list>
                    <order-by field-name="${orderByString}"/>
                </entity-condition>
                <iterate entry="costInventoryItem" list="costInventoryItems">
                    <log level="error" message="**** costInventoryItem ${costInventoryItem}"/>
                    <if-compare field="remainingQuantity" operator="greater" type="BigDecimal" value="0.0">
                        <if-compare-field field="remainingQuantity" operator="less-equals"
                                          to-field="costInventoryItem.accountingQuantityTotal" type="BigDecimal">
                            <set field="costInventoryItemQuantity" from="remainingQuantity"/>
                            <set field="remainingQuantity" type="BigDecimal" value="0.0"/>
                            <else>
                                <set field="costInventoryItemQuantity"
                                     from="costInventoryItem.accountingQuantityTotal"/>
                                <set field="remainingQuantity"
                                     value="${remainingQuantity - costInventoryItem.accountingQuantityTotal}"
                                     type="BigDecimal"/>
                            </else>
                        </if-compare-field>
                        <log level="error" message="**** costInventoryItemQuantity ${costInventoryItemQuantity}"/>
                        <!-- An inventory item detail record is created to keep track of the units (value) that we are going to add to the inventory account -->
                        <set field="createDetailMap.inventoryItemId" from="costInventoryItem.inventoryItemId"/>
                        <set value="${(-1) * costInventoryItemQuantity}" field="createDetailMap.accountingQuantityDiff"
                             type="BigDecimal"/>

                        <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap"
                                      include-user-login="true" require-new-transaction="false"
                                      service-name="createInventoryItemDetail" success-code="success"/>
                        <calculate decimal-scale="${ledgerDecimals}" field="costInventoryItemAmount"
                                   rounding-mode="${roundingMode}" type="BigDecimal">
                            <calcop operator="multiply">
                                <calcop field="costInventoryItemQuantity" operator="get"/>
                                <calcop field="costInventoryItem.unitCost" operator="get"/>
                            </calcop>
                        </calculate>
                        <log level="error" message="**** costInventoryItem UNIT COST ${costInventoryItem.unitCost}"/>
                        <calculate decimal-scale="${ledgerDecimals}" field="totalAmount" rounding-mode="${roundingMode}"
                                   type="BigDecimal">
                            <calcop operator="add">
                                <calcop field="costInventoryItemAmount" operator="get"/>
                                <calcop field="totalAmount" operator="get"/>
                            </calcop>
                        </calculate>

                        <log level="always" message="**** costInventoryItemAmount ${costInventoryItemAmount}"/>
                        <log level="always" message="**** totalAmount ${totalAmount}"/>

                        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                        <set field="creditEntry.debitCreditFlag" value="C"/>
                        <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                        <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
                        <set field="creditEntry.productId" from="inventoryItem.productId"/>
                        <set field="creditEntry.inventoryItemId" from="costInventoryItem.inventoryItemId"/>
                        <set field="creditEntry.origAmount" from="costInventoryItemAmount"/>
                        <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
                        <if-not-empty field="billToCustomer">
                            <set field="creditEntry.partyId" from="billToCustomer.partyId"/>
                            <set field="creditEntry.roleTypeId" from="billToCustomer.roleTypeId"/>
                        </if-not-empty>
                        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
                        <clear-field field="creditEntry"/>
                    </if-compare>
                </iterate>
                <if-compare field="remainingQuantity" operator="greater" type="BigDecimal" value="0.0">
                    <add-error error-list-name="error_list">
                        <fail-message
                                message="Could not find enough accounting inventory for product [${inventoryItem.productId}]; remaining quantity: ${remainingQuantity}"/>
                    </add-error>
                    <check-errors error-code="error" error-list-name="error_list"/>
                </if-compare>
            </else>
        </if>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="COGS_ACCOUNT"/>
        <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from="totalAmount"/>
        <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <if-not-empty field="billToCustomer">
            <set field="debitEntry.partyId" from="billToCustomer.partyId"/>
            <set field="debitEntry.roleTypeId" from="billToCustomer.roleTypeId"/>
        </if-not-empty>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SALES_SHIPMENT"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from="itemIssuance.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from="inventoryItem.inventoryItemId"/>
        <set field="createAcctgTransAndEntriesInMap.transactionDate" from="itemIssuance.issuedDateTime"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForCanceledSalesShipmentIssuance"
                   service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transactions for a canceled sales shipment issuance (D: INVENTORY_ACCOUNT, C: COGS_ACCOUNT"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="ItemIssuance" use-cache="false" value-field="itemIssuance"/>
        <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                         value-field="itemIssuance"/>
        <entity-and entity-name="OrderRole" filter-by-date="false" list="billToCustomers" use-cache="false">
            <field-map field-name="orderId" from-field="itemIssuance.orderId"/>
            <field-map field-name="roleTypeId" value="BILL_TO_CUSTOMER"/>
        </entity-and>
        <first-from-list entry="billToCustomer" list="billToCustomers"/>
        <!-- TODO: handle serialized inventory -->
        <set field="getProdAvgCostMap.inventoryItem" from="inventoryItem"/>
        <call-service break-on-error="true" error-code="error" in-map-name="getProdAvgCostMap" include-user-login="true"
                      require-new-transaction="false"
                      service-name="getProductAverageCost" success-code="success">
            <result-to-field result-name="unitCost"/>
        </call-service>
        <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                   type="BigDecimal">
            <calcop operator="multiply">
                <calcop field="parameters.canceledQuantity" operator="get"/>
                <calcop field="unitCost" operator="get"/>
            </calcop>
        </calculate>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="COGS_ACCOUNT"/>
        <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <if-not-empty field="billToCustomer">
            <set field="creditEntry.partyId" from="billToCustomer.partyId"/>
            <set field="creditEntry.roleTypeId" from="billToCustomer.roleTypeId"/>
        </if-not-empty>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <if-not-empty field="billToCustomer">
            <set field="debitEntry.partyId" from="billToCustomer.partyId"/>
            <set field="debitEntry.roleTypeId" from="billToCustomer.roleTypeId"/>
        </if-not-empty>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SALES_SHIPMENT"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from="itemIssuance.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForShipmentReceipt" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transactions for a shipment receipt (D: INVENTORY_ACCOUNT, C: UNINVOICED_SHIP_RCPT or COGS_ACCOUNT for returns)"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="ShipmentReceipt" use-cache="false"
                    value-field="shipmentReceipt"/>
        <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                         value-field="shipmentReceipt"/>
        <get-related-one relation-name="Shipment" to-value-field="shipment" use-cache="false"
                         value-field="shipmentReceipt"/>

        <if-not-empty field="inventoryItem.fixedAssetId">
            <return/>
        </if-not-empty>

        <if-not-empty field="shipmentReceipt.returnId">
            <set field="creditAccountTypeId" value="COGS_ACCOUNT"/>
            <else>
                <set field="creditAccountTypeId" value="UNINVOICED_SHIP_RCPT"/>
            </else>
        </if-not-empty>
        <!-- TODO: handle serialized inventory -->
        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <call-service break-on-error="true" error-code="error" in-map-name="partyAccountingPreferencesCallMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="getPartyAccountingPreferences"
                      success-code="success">
            <result-to-field field="partyAcctgPreference" result-name="partyAccountingPreference"/>
        </call-service>
        <if-not-empty field="shipmentReceipt.returnId">
            <if>
                <condition>
                    <or>
                        <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String"
                                    value="COGS_INV_COST"/>
                        <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String"
                                    value="COGS_AVG_COST"/>
                    </or>
                </condition>
                <then>
                    <if-compare field="partyAcctgPreference.cogsMethodId" operator="equals" type="String"
                                value="COGS_AVG_COST">
                        <set field="getProdAvgCostMap.inventoryItem" from="inventoryItem"/>
                        <call-service break-on-error="true" error-code="error" in-map-name="getProdAvgCostMap"
                                      include-user-login="true" require-new-transaction="false"
                                      service-name="getProductAverageCost" success-code="success">
                            <result-to-field result-name="unitCost"/>
                        </call-service>
                        <else>
                            <set field="unitCost" from="inventoryItem.unitCost"/>
                        </else>
                    </if-compare>
                </then>
                <else>
                    <!-- LIFO and FIFO -->
                    <set field="unitCost" from="inventoryItem.unitCost"/>
                </else>
            </if>
            <else>
                <set field="unitCost" from="inventoryItem.unitCost"/>
            </else>
        </if-not-empty>
        <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                   type="BigDecimal">
            <calcop operator="multiply">
                <calcop field="shipmentReceipt.quantityAccepted" operator="get"/>
                <calcop field="unitCost" operator="get"/>
            </calcop>
        </calculate>
        <!-- An inventory item detail record is created to keep track of the units (value) that we are going to add to the inventory account -->
        <set field="createDetailMap.inventoryItemId" from="inventoryItem.inventoryItemId"/>
        <set field="createDetailMap.accountingQuantityDiff" from="shipmentReceipt.quantityAccepted"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createInventoryItemDetail" success-code="success"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" from="creditAccountTypeId"/>
        <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.partyId" from="shipment.partyIdFrom"/>
        <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
        <set field="creditEntry.productId" from="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <entity-one value-field="product" entity-name="Product">
            <field-map field-name="productId" from-field="inventoryItem.productId"/>
        </entity-one>
        <if-compare value="RAW_MATERIAL" operator="equals" field="product.productTypeId">
            <!-- <entity-one value-field="inventoryGlAccount" entity-name="GlAccountTypeDefault">
                 <field-map field-name="organizationPartyId" from-field="inventoryItem.ownerPartyId"/>
                 <field-map field-name="glAccountTypeId" value="RAWMAT_INVENTORY"/>
             </entity-one>-->
            <set field="debitEntry.glAccountTypeId" value="RAWMAT_INVENTORY"/>
        </if-compare>
        <if-not-empty field="inventoryGlAccount">
            <set field="debitEntry.glAccountId" from="inventoryGlAccount.glAccountId" set-if-empty="false"
                 set-if-null="false"/>
        </if-not-empty>

        <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.partyId" from="shipment.partyIdFrom"/>
        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
        <set field="debitEntry.productId" from="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SHIPMENT_RECEIPT"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from="shipmentReceipt.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.receiptId" from="shipmentReceipt.receiptId"/>
        <set field="createAcctgTransAndEntriesInMap.partyId" from="shipment.partyIdFrom"/>
        <set field="createAcctgTransAndEntriesInMap.transactionDate" from="shipmentReceipt.datetimeReceived"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForInventoryItemCostChange"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create accounting transaction when item cost is changed (D: INV_ADJ_VAL, C: INVENTORY_ACCOUNT)"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="InventoryItemDetail" use-cache="false"
                    value-field="newInventoryItemDetail"/>
        <entity-condition distinct="false" entity-name="InventoryItemDetail" filter-by-date="false"
                          list="inventoryItemDetails" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="inventoryItemId" from-field="newInventoryItemDetail.inventoryItemId"
                                operator="equals"/>
                <condition-expr field-name="unitCost" from-field="nullField" operator="not-equals"/>
                <condition-expr field-name="inventoryItemDetailSeqId" from-field="parameters.inventoryItemDetailSeqId"
                                operator="not-equals"/>
            </condition-list>
            <order-by field-name="-effectiveDate"/>
        </entity-condition>
        <first-from-list entry="oldInventoryItemDetail" list="inventoryItemDetails"/>
        <if-not-empty field="oldInventoryItemDetail">
            <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                       type="BigDecimal">
                <calcop field="newinventoryItem.quantityOnHandTotal" operator="multiply">
                    <calcop operator="subtract">
                        <calcop field="oldInventoryItemDetail.unitCost" operator="get"/>
                        <calcop field="newInventoryItemDetail.unitCost" operator="get"/>
                    </calcop>
                </calcop>
            </calculate>
            <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                             value-field="newInventoryItemDetail"/>
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
            <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
            <set field="creditEntry.productId" from="inventoryItem.productId"/>
            <set field="creditEntry.origAmount" from="origAmount"/>
            <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
            <!-- Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.glAccountTypeId" value="INV_ADJ_VAL"/>
            <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
            <set field="debitEntry.productId" from="inventoryItem.productId"/>
            <set field="debitEntry.origAmount" from="origAmount"/>
            <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
            <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
            <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
            <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from="parameters.inventoryItemId"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>

            <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="createAcctgTransAndEntries"
                          success-code="success">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForPhysicalInventoryVariance"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an Account Transaction For Physical Inventory Variance"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-and entity-name="InventoryItemDetail" filter-by-date="false" list="inventoryItemDetails"
                    use-cache="false">
            <field-map field-name="physicalInventoryId" from-field="parameters.physicalInventoryId"/>
            <order-by field-name="inventoryItemId"/>
        </entity-and>
        <iterate entry="inventoryItemDetail" list="inventoryItemDetails">
            <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                             value-field="inventoryItemDetail"/>
            <get-related-one value-field="inventoryItem" relation-name="Product" to-value-field="product"/>
            <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                       type="BigDecimal">
                <calcop operator="multiply">
                    <calcop field="inventoryItemDetail.quantityOnHandDiff" operator="get"/>
                    <calcop field="inventoryItem.unitCost" operator="get"/>
                </calcop>
            </calculate>
            <!-- Credit Entries -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.glAccountTypeId" from="inventoryItemDetail.reasonEnumId"/>
            <set field="creditEntry.productId" from="inventoryItem.productId"/>
            <set field="creditEntry.origAmount" from="origAmount"/>
            <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
            <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
            <!-- Debit Entries -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <if-compare field="product.productTypeId" operator="equals" value="RAW_MATERIAL">
                <set field="debitEntry.glAccountTypeId" value="RAWMAT_INVENTORY"/>
                <else>
                    <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
                </else>
            </if-compare>
            <set field="debitEntry.productId" from="inventoryItem.productId"/>
            <set field="debitEntry.origAmount" from="origAmount"/>
            <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
            <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
            <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
            <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        </iterate>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.physicalInventoryId" from="parameters.physicalInventoryId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="ITEM_VARIANCE"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForWorkEffortInventoryProduced"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transactions for a Work Effort Inventory Produced (D: INVENTORY_ACCOUNT, C: WIP_INVENTORY)"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="WorkEffortInventoryProduced" use-cache="false"
                    value-field="workEffortInventoryProduced">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            <field-map field-name="inventoryItemId" from-field="parameters.inventoryItemId"/>
        </entity-one>
        <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                         value-field="workEffortInventoryProduced"/>
        <!-- TODO: handle serialized inventory -->
        <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                   type="BigDecimal">
            <calcop operator="multiply">
                <calcop field="inventoryItem.quantityOnHandTotal" operator="get"/>
                <calcop field="inventoryItem.unitCost" operator="get"/>
            </calcop>
        </calculate>
        <!-- An inventory item detail record is created to keep track of the units (value) that we are going to add to the inventory account -->
        <set field="createDetailMap.inventoryItemId" from="inventoryItem.inventoryItemId"/>
        <set field="createDetailMap.accountingQuantityDiff" from="inventoryItem.quantityOnHandTotal"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true"
                      require-new-transaction="false"
                      service-name="createInventoryItemDetail" success-code="success"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="WIP_INVENTORY"/>
        <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.workEffortId" from="parameters.workEffortId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForWorkEffortCost" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transaction for inventory that is issued to a work effort cost (Type: INVENTORY D: INVENTORY_ACCOUNT , C: UNINVOICED_SHIP_RCPT or COGS_ACCOUNT)"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="CostComponent" use-cache="false" value-field="costComponent">
            <field-map field-name="costComponentId" from-field="parameters.costComponentId"/>
        </entity-one>
        <get-related-one relation-name="CostComponentCalc" to-value-field="costComponentCalc" use-cache="false"
                         value-field="costComponent"/>
        <entity-one auto-field-map="true" entity-name="WorkEffort" use-cache="false" value-field="workEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <get-related-one relation-name="Facility" to-value-field="facility" use-cache="false" value-field="workEffort"/>
        <if-compare field="workEffort.workEffortTypeId" operator="equals" type="String" value="PROD_ORDER_TASK">
            <if-not-empty field="workEffort.workEffortParentId">
                <entity-and entity-name="WorkEffortGoodStandard" filter-by-date="false" list="workEffortGoodStandards"
                            use-cache="false">
                    <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
                    <field-map field-name="workEffortGoodStdTypeId" value="PRUN_PROD_DELIV"/>
                    <order-by field-name="-fromDate"/>
                </entity-and>
                <first-from-list entry="workEffortGoodStandard" list="workEffortGoodStandards"/>
            </if-not-empty>
        </if-compare>
        <if-compare field="workEffort.workEffortTypeId" operator="equals" type="String" value="PROD_ORDER_HEADER">
            <entity-and entity-name="WorkEffortGoodStandard" filter-by-date="false" list="workEffortGoodStandards"
                        use-cache="false">
                <field-map field-name="workEffortId" from-field="workEffort.workEffortId"/>
                <field-map field-name="workEffortGoodStdTypeId" value="PRUN_PROD_DELIV"/>
                <order-by field-name="-fromDate"/>
            </entity-and>
            <first-from-list entry="workEffortGoodStandard" list="workEffortGoodStandards"/>
        </if-compare>
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <if-not-empty field="costComponentCalc.costGlAccountTypeId">
            <set field="creditEntry.glAccountTypeId" from="costComponentCalc.costGlAccountTypeId"/>
            <else>
                <if-not-empty field="costComponent.fixedAssetId">
                    <!-- FIXME: 20091119 There is currently no way of determining what glAccountTypeId should be used when a CostComponent has been created based on a FixedAsset's 
						FixedAssetStdCost records, hard-coding as OPERATING_EXPENSE until that is resolved. -->
                    <set field="creditEntry.glAccountTypeId" value="OPERATING_EXPENSE"/>
                </if-not-empty>
            </else>
        </if-not-empty>
        <set field="creditEntry.organizationPartyId" from="facility.ownerPartyId"/>
        <set field="creditEntry.productId" from="workEffortGoodStandard.productId"/>
        <set field="creditEntry.origAmount" from="costComponent.cost"/>
        <set field="creditEntry.origCurrencyUomId" from="costComponent.costUomId"/>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <if-not-empty field="costComponentCalc.offsettingGlAccountTypeId">
            <set field="debitEntry.glAccountTypeId" value="costComponentCalc.offsettingGlAccountTypeId"/>
            <else>
                <set field="debitEntry.glAccountTypeId" value="WIP_INVENTORY"/>
            </else>
        </if-not-empty>
        <set field="debitEntry.organizationPartyId" from="facility.ownerPartyId"/>
        <set field="debitEntry.productId" from="workEffortGoodStandard.productId"/>
        <set field="debitEntry.origAmount" from="costComponent.cost"/>
        <set field="debitEntry.origCurrencyUomId" from="costComponent.costUomId"/>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.workEffortId" from="parameters.workEffortId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="MANUFACTURING"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <!-- Acctg Transaction for Inventory Movement -->

    <!-- AcctgTrans For Inventory Item Owner Change Service -->
    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForTransferShipment" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transactions for Inventory Item Owner Change (C: INVENTORY_ACCOUNT , D: INVENTORY_XFER_OUT(new Owner))"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>

        <entity-condition entity-name="ItemIssuance" list="issuances">
            <condition-list>
                <condition-expr field-name="shipmentId" from-field="parameters.shipmentId"></condition-expr>
            </condition-list>
        </entity-condition>
        <log level="error" message="************issuances ${issuances}"/>

        <iterate list="issuances" entry="issuance">
            <get-related-one value-field="issuance" relation-name="InventoryItem"
                             to-value-field="inventoryItem"></get-related-one>
            <log level="error" message=" ${inventoryItem}"/>
            <calculate decimal-scale="${ledgerDecimals}" field="amt" rounding-mode="${roundingMode}" type="BigDecimal">
                <calcop operator="multiply">
                    <calcop field="issuance.quantity" operator="get"/>
                    <calcop field="inventoryItem.unitCost" operator="get"/>
                </calcop>
            </calculate>

            <calculate decimal-scale="${ledgerDecimals}" field="totalAmount" rounding-mode="${roundingMode}"
                       type="BigDecimal">
                <calcop operator="add">
                    <calcop field="amt" operator="get"/>
                    <calcop field="totalAmount" operator="get"/>
                </calcop>
            </calculate>

            <!-- prepare the double posting (D/C) entries (AcctgTransEntry) for old OwnerPartyId -->
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
            <set field="creditEntry.origAmount" from="amt"/>
            <set field="creditEntry.inventoryItemId" from="inventoryItem.inventoryItemId"/>
            <set field="creditEntry.productId" from="inventoryItem.productId"/>
            <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
            <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
            <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        </iterate>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.origAmount" from="totalAmount"/>
        <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.glAccountTypeId" value="INVENTORY_XFER_OUT"/>

        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="TRANSFER_SHIPMENT"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.shipmentId" from="parameters.shipmentId"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <!-- AcctgTrans For Inventory Item Owner Change Service -->
    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForInventoryItemOwnerChange"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transactions for Inventory Item Owner Change (C: INVENTORY_ACCOUNT(old Owner)  D: INVENTORY_XFER_OUT(oldOwner), D:INVENTORY_ACCOUNT(new Owner) C:INVENTORY_XFER_IN(new Owner))"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="InventoryItem" use-cache="false" value-field="inventoryItem"/>
        <!-- TODO: handle serialized inventory -->
        <if-not-empty field="inventoryItem.quantityOnHandTotal">
            <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                       type="BigDecimal">
                <calcop operator="multiply">
                    <calcop field="inventoryItem.quantityOnHandTotal" operator="get"/>
                    <calcop field="inventoryItem.unitCost" operator="get"/>
                </calcop>
            </calculate>
        </if-not-empty>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) for old OwnerPartyId -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="oldPartyCreditEntry"/>
        <set field="oldPartyCreditEntry.debitCreditFlag" value="C"/>
        <set field="oldPartyCreditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="oldPartyCreditEntry.productId" from="inventoryItem.productId"/>
        <set field="oldPartyCreditEntry.origAmount" from="origAmount"/>
        <set field="oldPartyCreditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="oldPartyCreditEntry.organizationPartyId" from="parameters.oldOwnerPartyId"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="oldPartyDebitEntry"/>
        <set field="oldPartyDebitEntry.debitCreditFlag" value="D"/>
        <set field="oldPartyDebitEntry.productId" from="inventoryItem.productId"/>
        <set field="oldPartyDebitEntry.origAmount" from="origAmount"/>
        <set field="oldPartyDebitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="oldPartyDebitEntry.organizationPartyId" from="parameters.oldOwnerPartyId"/>
        <set field="oldPartyDebitEntry.glAccountTypeId" value="INVENTORY_XFER_OUT"/>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) for New ownerPartyId -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="newPartyCreditEntry"/>
        <set field="newPartyCreditEntry.debitCreditFlag" value="C"/>
        <set field="newPartyCreditEntry.glAccountTypeId" value="INVENTORY_XFER_IN"/>
        <set field="newPartyCreditEntry.productId" from="inventoryItem.productId"/>
        <set field="newPartyCreditEntry.origAmount" from="origAmount"/>
        <set field="newPartyCreditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="newPartyCreditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="newPartyDebitEntry"/>
        <set field="newPartyDebitEntry.debitCreditFlag" value="D"/>
        <set field="newPartyDebitEntry.productId" from="inventoryItem.productId"/>
        <set field="newPartyDebitEntry.origAmount" from="origAmount"/>
        <set field="newPartyDebitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="newPartyDebitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="newPartyDebitEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="acctgTransEntries[]" from="oldPartyCreditEntry" type="Object"/>
        <set field="acctgTransEntries[]" from="oldPartyDebitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from="newPartyCreditEntry" type="Object"/>
        <set field="acctgTransEntries[]" from="newPartyDebitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.inventoryItemId" from="inventoryItem.inventoryItemId"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>
    <!--automatic GL posting service triggered when inventory is issued to a work effort -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForWorkEffortIssuance"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transaction for inventory that is issued to a work effort (Type: INVENTORY D: RAWMAT_INVENTORY, C: WIP_INVENTORY)"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="WorkEffort" use-cache="false" value-field="workEffort">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
        </entity-one>
        <if-compare field="workEffort.workEffortTypeId" operator="equals" type="String" value="PROD_ORDER_TASK">
            <if-not-empty field="workEffort.workEffortParentId">
                <entity-and entity-name="WorkEffortGoodStandard" filter-by-date="false" list="workEffortGoodStandards"
                            use-cache="false">
                    <field-map field-name="workEffortId" from-field="workEffort.workEffortParentId"/>
                    <field-map field-name="workEffortGoodStdTypeId" value="PRUN_PROD_DELIV"/>
                    <order-by field-name="-fromDate"/>
                </entity-and>
                <first-from-list entry="workEffortGoodStandard" list="workEffortGoodStandards"/>
            </if-not-empty>
        </if-compare>
        <entity-one auto-field-map="true" entity-name="WorkEffortInventoryAssign" use-cache="false"
                    value-field="workEffortInventoryAssign">
            <field-map field-name="workEffortId" from-field="parameters.workEffortId"/>
            <field-map field-name="inventoryItemId" from-field="parameters.inventoryItemId"/>
        </entity-one>
        <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                         value-field="workEffortInventoryAssign"/>
        <!-- TODO: handle serialized inventory -->
        <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                   type="BigDecimal">
            <calcop operator="multiply">
                <calcop field="workEffortInventoryAssign.quantity" operator="get"/>
                <calcop field="inventoryItem.unitCost" operator="get"/>
            </calcop>
        </calculate>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="WIP_INVENTORY"/>
        <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from="workEffortGoodStandard.productId"/>
        <set field="debitEntry.origAmount" from="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="RAWMAT_INVENTORY"/>
        <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.workEffortId" from="parameters.workEffortId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>

        <log level="always"
             message="^^^^^^^^^^^^^^^^^^^^^ TRANSACTION ENTERIES ****************** ${acctgTransEntries}"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>
    <!-- Service for the automatic creation of accounting transaction for inventory that is issued for fixed asset maintenance -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForFixedAssetMaintIssuance"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transaction for inventory that is issued for fixed asset maintenance (Type: INVENTORY D: INVENTORY_ACCOUNT, C: FIXED_ASSET_MAINT)"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one auto-field-map="true" entity-name="ItemIssuance" use-cache="false" value-field="itemIssuance"/>
        <get-related-one relation-name="InventoryItem" to-value-field="inventoryItem" use-cache="false"
                         value-field="itemIssuance"/>
        <calculate decimal-scale="${ledgerDecimals}" field="origAmount" rounding-mode="${roundingMode}"
                   type="BigDecimal">
            <calcop operator="multiply">
                <calcop field="itemIssuance.quantity" operator="get"/>
                <calcop field="inventoryItem.unitCost" operator="get"/>
            </calcop>
        </calculate>
        <!-- prepare the double posting (D/C) entries (AcctgTransEntry) -->
        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.glAccountTypeId" value="INVENTORY_ACCOUNT"/>
        <set field="creditEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="creditEntry.productId" from="inventoryItem.productId"/>
        <set field="creditEntry.origAmount" from="origAmount"/>
        <set field="creditEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="creditEntry.groupId" from-field="parameters.groupId"/>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <!-- Debit -->

        <!--
                <entity-one entity-name="FixedAsset" value-field="fixedAssetGv">
                    <field-map field-name="fixedAssetId" from-field="itemIssuance.fixedAssetId"/>
                </entity-one>

                <entity-one entity-name="FixedAssetTypeGlAccount" value-field="fixedAssetTypeGlAccount">
                    <field-map field-name="fixedAssetTypeId" from-field="fixedAssetGv.fixedAssetTypeId"/>
                    <field-map field-name="fixedAssetId" from-field="itemIssuance.fixedAssetId"/>
                    <field-map field-name="organizationPartyId" value="Company"/>
                </entity-one>
                <set field="debitGlAccountId"/>
                <if-not-empty field="fixedAssetTypeGlAccount">
                    <set field="debitGlAccountId" from-field="fixedAssetTypeGlAccount.maintenanceGlAccountId"/>
                    <else>
                        <entity-and entity-name="FixedAssetTypeGlAccount" list="fixedAssetTypeGlAccountList">
                            <field-map field-name="fixedAssetTypeId" from-field="fixedAssetGv.fixedAssetTypeId"/>
                            <field-map field-name="organizationPartyId" value="Company"/>
                        </entity-and>
                        <first-from-list list="fixedAssetTypeGlAccountList" entry="fixedAssetTypeGlAccount"/>
                        <set field="debitGlAccountId" from-field="fixedAssetTypeGlAccount.maintenanceGlAccountId"/>
                    </else>
                </if-not-empty>
        -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.glAccountTypeId" value="CONSUMABLE_EXPENSE"/>
        <set field="debitEntry.organizationPartyId" from="inventoryItem.ownerPartyId"/>
        <set field="debitEntry.productId" from="inventoryItem.productId"/>
        <set field="debitEntry.origAmount" from="origAmount"/>
        <set field="debitEntry.origCurrencyUomId" from="inventoryItem.currencyUomId"/>
        <set field="debitEntry.groupId" from-field="parameters.groupId"/>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INVENTORY"/>
        <set field="createAcctgTransAndEntriesInMap.fixedAssetId" from="itemIssuance.fixedAssetId"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransAndEntriesForIncomingPayment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transaction for an incoming payment" use-transaction="true">
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <calculate decimal-scale="2" field="amountAppliedTotal" rounding-mode="HalfEven" type="BigDecimal">
            <number value="0"/>
        </calculate>
        <calculate decimal-scale="2" field="diffAmount" rounding-mode="HalfEven" type="BigDecimal">
            <number value="0"/>
        </calculate>
        <entity-one auto-field-map="true" entity-name="Payment" use-cache="false" value-field="payment"/>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isReceipt"
                           ret-field="isReceiptValue">
            <field field="payment" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <if-compare field="isReceiptValue" operator="equals" type="Boolean" value="true">
            <set field="origCurrencyUomId" from="payment.currencyUomId"/>
            <set field="organizationPartyId" from="payment.partyIdTo"/>
            <set field="partyId" from="payment.partyIdFrom"/>
            <set field="paymentId" from="payment.paymentId"/>
            <!-- Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.origAmount" from="payment.amount"/>
            <set field="debitEntry.origCurrencyUomId" from="origCurrencyUomId"/>
            <set field="debitEntry.organizationPartyId" from="organizationPartyId"/>

            <if-compare field="payment.paymentMethodTypeId" operator="equals" value="FIN_ACCOUNT">
                <if-empty field="payment.finAccountId">
                    <add-error>
                        <fail-message
                                message="Fin Account Id is needed for the Payment Method Type Financial Account."/>
                    </add-error>
                </if-empty>
                <check-errors/>
                <entity-one entity-name="FinAccount" value-field="finAccount">
                    <field-map field-name="finAccountId" from-field="payment.finAccountId"/>
                </entity-one>
                <if-compare-field to-field="finAccount.currencyUomId" operator="not-equals" field="origCurrencyUomId">
                    <add-error>
                        <fail-message message="Financial Account currency and Payment currency mismatch."/>
                    </add-error>
                </if-compare-field>
                <set field="debitEntry.glAccountId" from="finAccount.postToGlAccountId"/>
            </if-compare>

            <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>

            <entity-condition distinct="false" entity-name="PaymentTds" filter-by-date="false" list="paymentTdsList"
                              use-cache="false">
                <condition-expr field-name="paymentId" from-field="parameters.paymentId"
                                ignore-if-null="false" operator="equals"/>
            </entity-condition>
            <iterate entry="paymentTds" list="paymentTdsList">
                <entity-condition distinct="false" entity-name="PaymentTdsGlAccount" filter-by-date="false"
                                  list="tdsTypeGlAccounts" use-cache="false">
                    <condition-list combine="and">
                        <condition-expr field-name="tdsTypeId" from-field="paymentTds.tdsTypeId"
                                        ignore-if-null="false" operator="equals"/>
                        <condition-expr field-name="organizationPartyId" from-field="organizationPartyId"
                                        ignore-if-null="false" operator="equals"/>
                    </condition-list>
                </entity-condition>
                <first-from-list entry="tdsType" list="tdsTypeGlAccounts"/>
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.glAccountId" from="tdsType.glAccountId"/>
                <set field="debitEntry.origAmount" from="paymentTds.amount"/>
                <set field="debitEntry.origCurrencyUomId" from="origCurrencyUomId"/>
                <set field="debitEntry.organizationPartyId" from="organizationPartyId"/>
                <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
            </iterate>

            <entity-one auto-field-map="true" entity-name="PaymentGlAccountTypeMap" use-cache="false"
                        value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId"/>
            </entity-one>
            <set field="creditGlAccountTypeId" from="paymentGlAccountTypeMap.glAccountTypeId"/>

            <calculate decimal-scale="${ledgerDecimals}" field="diffAmount" rounding-mode="${roundingMode}"
                       type="BigDecimal">
                <calcop operator="subtract">
                    <calcop field="payment.amount" operator="get"/>
                    <calcop field="amountAppliedTotal" operator="get"/>
                </calcop>
            </calculate>
            <if-compare field="diffAmount" operator="greater" type="BigDecimal" value="0">
                <!-- credit for diff amount -->
                <make-value entity-name="AcctgTransEntry" value-field="creditEntryWithDiffAmount"/>
                <set field="creditEntryWithDiffAmount.debitCreditFlag" value="C"/>
                <set field="creditEntryWithDiffAmount.origAmount" from="diffAmount"/>
                <set field="creditEntryWithDiffAmount.origCurrencyUomId" from="origCurrencyUomId"/>
                <set field="creditEntryWithDiffAmount.glAccountId" from="payment.overrideGlAccountId"/>
                <set field="creditEntryWithDiffAmount.glAccountTypeId" from="creditGlAccountTypeId"/>
                <set field="creditEntryWithDiffAmount.organizationPartyId" from="organizationPartyId"/>
                <set field="acctgTransEntries[]" from="creditEntryWithDiffAmount" type="Object"/>
            </if-compare>
            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from="partyId"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="createAcctgTransAndEntriesInMap.paymentId" from="paymentId"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="INCOMING_PAYMENT"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from="payment.effectiveDate"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>

            <log level="error" message="${createAcctgTransAndEntriesInMap}"/>
            <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="createAcctgTransAndEntries"
                          success-code="success">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            <!-- Now create accounting transactions for the payment applications -->
            <get-related list="paymentApplications" relation-name="PaymentApplication" use-cache="false"
                         value-field="payment"/>
            <iterate entry="paymentApplication" list="paymentApplications">
                <set field="createAcctgTransAndEntriesForPaymentApplicationInMap.paymentApplicationId"
                     from="paymentApplication.paymentApplicationId"/>
                <call-service break-on-error="true" error-code="error"
                              in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"
                              include-user-login="true"
                              require-new-transaction="false"
                              service-name="createAcctgTransAndEntriesForPaymentApplication" success-code="success">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
            </iterate>
        </if-compare>
    </simple-method>
    <!-- Service for the automatic creation of accounting transaction for Purchase Invoice -->


    <simple-method method-name="createAcctgTransForPurchaseInvoiceDefault"
                   short-description="Create an accounting transaction for a purchase invoice">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>

        <!-- Begin finding Invoice for PO is with Price including Tax -->
        <!-- -->
        <!-- -->
        <entity-one entity-name="Invoice" value-field="invoice"/>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>
        <if-compare field="invoiceType.parentTypeId" operator="equals" value="PURCHASE_INVOICE">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%TAX%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%ADJ%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%SHIPPING%"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
            </entity-condition>

            <iterate list="invoiceItems" entry="invoiceItem">
                <set field="amountFromOrder" type="BigDecimal" value="0"/>
                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
                <set field="quantity" type="BigDecimal" value="1"/>
                <if-not-empty field="invoiceItem.quantity">
                    <set field="quantity" from-field="invoiceItem.quantity"/>
                </if-not-empty>
                <calculate field="amountFromInvoice" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantity"/>
                        <calcop operator="get" field="invoiceItem.amount"/>
                    </calcop>
                </calculate>
                <calculate field="totalAmountFromInvoice" decimal-scale="${ledgerDecimals}"
                           rounding-mode="${roundingMode}">
                    <calcop operator="add">
                        <calcop operator="get" field="totalAmountFromInvoice"/>
                        <calcop operator="get" field="amountFromInvoice"/>
                    </calcop>
                </calculate>
                <get-related value-field="invoiceItem" relation-name="OrderItemBilling" list="orderItemBillings"/>
                <!-- <iterate list="orderItemBillings" entry="orderItemBilling">
                     <get-related-one value-field="orderItemBilling" relation-name="OrderItem"
                                      to-value-field="orderItem"/>
                     <calculate field="amountFromOrder" decimal-scale="${ledgerDecimals}"
                                rounding-mode="${roundingMode}">
                         <calcop field="amountFromOrder" operator="add">
                             <calcop operator="multiply">
                                 <calcop operator="get" field="orderItemBilling.quantity"/>
                                 <calcop operator="get" field="orderItem.unitPrice"/>
                             </calcop>
                         </calcop>
                     </calculate>
                 </iterate>-->
                <!-- Debit -->
                <if>
                    <condition>
                        <and>
                            <if-compare-field field="amountFromInvoice" to-field="amountFromOrder"
                                              operator="not-equals"/>
                            <if-compare field="amountFromOrder" operator="greater" value="0" type="BigDecimal"/>
                        </and>
                    </condition>
                    <then>
                        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                        <set field="debitEntry.debitCreditFlag" value="D"/>
                        <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                        <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                        <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                        <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
                        <set field="debitEntry.glAccountTypeId" value="PURCHASE_PRICE_VAR"/>
                        <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                            <calcop operator="subtract">
                                <calcop operator="get" field="amountFromInvoice"/>
                                <calcop operator="get" field="amountFromOrder"/>
                            </calcop>
                        </calculate>
                        <set field="debitEntry.origAmount" from-field="origAmount"/>
                        <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
                    </then>
                </if>
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
                <if-compare field="invoiceItem.invoiceItemTypeId" operator="equals" value="PINV_PUR_VAR">
                    <set field="debitEntry.glAccountTypeId" value="PURCHASE_PRICE_VAR"/>
                    <else>
                        <set field="debitEntry.glAccountTypeId" value="PURCHASE_ACCOUNT"/>
                    </else>
                </if-compare>
                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
                <if-compare field="amountFromOrder" operator="greater" value="0" type="BigDecimal">
                    <set field="origAmount" from-field="amountFromOrder"/>
                    <else>
                        <set field="origAmount" from-field="amountFromInvoice"/>
                    </else>
                </if-compare>
                <set field="debitEntry.origAmount" from-field="origAmount"/>
                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
            </iterate>

            <entity-condition distinct="false" entity-name="InvoiceItem" filter-by-date="false" list="invoiceItems"
                              use-cache="true">
                <condition-list combine="and">
                    <condition-list combine="or">
                        <condition-expr field-name="invoiceItemTypeId" value="%TAX%" operator="like"/>
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%ADJ%"/>
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%SHIPPING%"/>
                    </condition-list>
                    <condition-expr field-name="invoiceId" from-field="parameters.invoiceId" operator="equals"/>
                </condition-list>
            </entity-condition>
            <iterate entry="invoiceItem" list="invoiceItems">
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.organizationPartyId" from="invoice.partyId"/>
                <set field="debitEntry.partyId" from="invoiceItem.taxAuthPartyId"/>
                <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                <set field="debitEntry.origAmount" from="invoiceItem.amount"/>
                <set field="debitEntry.glAccountId" from="invoiceItem.overrideGlAccountId"/>
                <set field="debitEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
                <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
                <calculate field="invoiceTaxTotal" type="BigDecimal" decimal-scale="${ledgerDecimals}"
                           rounding-mode="${roundingMode}">
                    <calcop operator="add">
                        <calcop operator="get" field="invoiceTaxTotal"/>
                        <calcop operator="get" field="invoiceItem.amount"/>
                    </calcop>
                </calculate>
            </iterate>
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
            <calculate field="totalAmountFromInvoice" type="BigDecimal" decimal-scale="${ledgerDecimals}"
                       rounding-mode="${roundingMode}">
                <calcop operator="add">
                    <calcop operator="get" field="totalAmountFromInvoice"/>
                    <calcop operator="get" field="invoiceTaxTotal"/>
                </calcop>
            </calculate>
            <set field="creditEntry.origAmount" from-field="totalAmountFromInvoice"/>
            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>

            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PURCHASE_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="invoice.invoiceDate"
                 type="Timestamp"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>

            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>


    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForPurchaseInvoice" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transaction for a purchase invoice" use-transaction="true">

        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>
        <entity-one auto-field-map="true" entity-name="Invoice" use-cache="false" value-field="invoice"/>
        <get-related-one relation-name="InvoiceType" to-value-field="invoiceType" use-cache="false"
                         value-field="invoice"/>
        <set field="acctgTransEntries[]" type="Object"/>

        <if-compare field="invoiceType.parentTypeId" operator="not-equals" type="String" value="PURCHASE_INVOICE">
            <return/>
        </if-compare>

        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from-field="invoice.partyId"/>
        <log level="always" message="partyAccountingPreferencesCallMap  ${partyAccountingPreferencesCallMap}"/>
        <call-service in-map-name="partyAccountingPreferencesCallMap" service-name="getPartyAccountingPreferences"
                      success-code="success">
            <result-to-field field="partyAcctgPreference" result-name="partyAccountingPreference"/>
        </call-service>
        <log level="always" message="partyAcctgPreference  ${partyAcctgPreference}"/>

        <if-compare field="partyAcctgPreference.baseCurrencyUomId" operator="not-equals" value="ZMW">
            <call-simple-method method-name="createAcctgTransForPurchaseInvoiceDefault"/>
            <return/>
        </if-compare>


        <if-compare field="invoiceType.invoiceTypeId" operator="equals" type="String" value="PURCHASE_INVOICE">
            <entity-condition distinct="false" entity-name="InvoiceItem" filter-by-date="false" list="invoiceItems"
                              use-cache="true">
                <condition-list combine="and">
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%TAX%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%ADJ%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%SHIPPING%"/>
                    <condition-expr field-name="invoiceId" from-field="parameters.invoiceId" operator="equals"/>
                </condition-list>
            </entity-condition>
            <iterate entry="invoiceItem" list="invoiceItems">
                <set field="amountFromOrder" type="BigDecimal" value="0"/>
                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
                <if-empty field="invoiceItem.quantity">
                    <set field="invoiceItem.quantity" value="1"/>
                </if-empty>
                <calculate decimal-scale="${ledgerDecimals}" field="amountFromInvoice" rounding-mode="${roundingMode}"
                           type="BigDecimal">
                    <calcop operator="multiply">
                        <calcop field="invoiceItem.quantity" operator="get"/>
                        <calcop field="invoiceItem.amount" operator="get"/>
                    </calcop>
                </calculate>
                <calculate decimal-scale="${ledgerDecimals}" field="totalAmountFromInvoice"
                           rounding-mode="${roundingMode}" type="BigDecimal">
                    <calcop operator="add">
                        <calcop field="totalAmountFromInvoice" operator="get"/>
                        <calcop field="amountFromInvoice" operator="get"/>
                    </calcop>
                </calculate>
                <get-related list="orderItemBillings" relation-name="OrderItemBilling" use-cache="false"
                             value-field="invoiceItem"/>
                <iterate entry="orderItemBilling" list="orderItemBillings">
                    <get-related-one relation-name="OrderItem" to-value-field="orderItem" use-cache="false"
                                     value-field="orderItemBilling"/>
                    <calculate decimal-scale="${ledgerDecimals}" field="amountFromOrder" rounding-mode="${roundingMode}"
                               type="BigDecimal">
                        <calcop field="amountFromOrder" operator="add">
                            <calcop operator="multiply">
                                <calcop field="orderItemBilling.quantity" operator="get"/>
                                <calcop field="orderItem.unitPrice" operator="get"/>
                            </calcop>
                        </calcop>
                    </calculate>
                </iterate>
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.organizationPartyId" from="invoice.partyId"/>
                <set field="debitEntry.partyId" from="invoice.partyIdFrom"/>
                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                <set field="debitEntry.productId" from="invoiceItem.productId"/>
                <set field="debitEntry.glAccountTypeId" value="PURCHASE_ACCOUNT"/>
                <set field="debitEntry.origCurrencyUomId" from="invoice.currencyUomId"/>

                <entity-condition list="orderItemBillings" entity-name="OrderItemBilling">
                    <condition-list>
                        <condition-expr field-name="invoiceId" from-field="invoice.invoiceId"/>
                        <condition-expr field-name="invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
                    </condition-list>
                </entity-condition>
                <first-from-list entry="orderItemBilling" list="orderItemBillings"/>
                <entity-condition list="orderItemAdjustments" entity-name="OrderAdjustment">
                    <condition-list>
                        <condition-expr field-name="orderId" from-field="orderItemBilling.orderId"/>
                        <condition-expr field-name="orderItemSeqId" from-field="orderItemBilling.orderItemSeqId"/>
                        <condition-expr field-name="orderAdjustmentTypeId" value="SALES_TAX"/>
                    </condition-list>
                </entity-condition>
                <if-not-empty field="orderItemAdjustments">
                    <first-from-list entry="orderItemAdjustment" list="orderItemAdjustments"/>
                    <get-related-one relation-name="OverrideGlAccount" to-value-field="purchaseTaxGlAccount"
                                     value-field="orderItemAdjustment"/>
                    <entity-condition list="purchaseAccounts" entity-name="GlAccount">
                        <condition-list>
                            <condition-expr field-name="taxClassId" from-field="purchaseTaxGlAccount.taxClassId"/>
                            <condition-expr field-name="glAccountTypeId" value="PURCHASE_ACCOUNT"/>
                        </condition-list>
                    </entity-condition>
                    <first-from-list entry="purchaseAccount" list="purchaseAccounts"/>

                    <if-not-empty field="purchaseAccount.glAccountId">
                        <set field="debitEntry.glAccountId" from="purchaseAccount.glAccountId"/>
                    </if-not-empty>
                </if-not-empty>

                <if-empty field="debitEntry.glAccountId">
                    <set field="debitEntry.glAccountId" from="invoiceItem.overrideGlAccountId"/>
                </if-empty>
                <!--
                  Order Item Billing is not considered even if the invoice is created from Order
                  On creation on invoice the Invoice item are adjusted on creation from Order.
                 <if-compare field="amountFromOrder" operator="greater" type="BigDecimal" value="0">
                     <set field="origAmount" from="amountFromOrder"/>
                     <else>
                         <set field="origAmount" from="amountFromInvoice"/>
                     </else>
                 </if-compare>-->
                <set field="origAmount" from="amountFromInvoice"/>
                <set field="debitEntry.origAmount" from="origAmount"/>
                <set field="debitEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
                <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
            </iterate>
            <entity-condition distinct="false" entity-name="InvoiceItem" filter-by-date="false" list="invoiceItems"
                              use-cache="true">
                <condition-list combine="and">
                    <condition-list combine="or">
                        <condition-expr field-name="invoiceItemTypeId" ignore-if-null="false" operator="like"
                                        value="%TAX%"/>
                        <condition-expr field-name="invoiceItemTypeId" ignore-if-null="false" operator="like"
                                        value="%ADJ%"/>
                        <condition-expr field-name="invoiceItemTypeId" ignore-if-null="false" operator="like"
                                        value="%SHIPPING%"/>
                    </condition-list>
                    <condition-expr field-name="invoiceId" from-field="parameters.invoiceId"
                                    ignore-if-null="false" operator="equals"/>
                </condition-list>
            </entity-condition>
            <iterate entry="invoiceItem" list="invoiceItems">
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.organizationPartyId" from="invoice.partyId"/>
                <set field="debitEntry.partyId" from="invoiceItem.taxAuthPartyId"/>
                <set field="debitEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                <set field="debitEntry.origAmount" from="invoiceItem.amount"/>
                <set field="debitEntry.glAccountId" from="invoiceItem.overrideGlAccountId"/>
                <set field="debitEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
                <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
            </iterate>
            <set field="debitTotal" type="BigDecimal" value="0"/>
            <iterate entry="entry" list="acctgTransEntries">
                <calculate decimal-scale="${ledgerDecimals}" field="debitTotal" rounding-mode="${roundingMode}"
                           type="BigDecimal">
                    <calcop field="entry.origAmount" operator="get"/>
                    <calcop field="debitTotal" operator="get"/>
                </calculate>
            </iterate>

            <!--- Handle Commission Invoice, Transfer Shipment Invoice -->
        </if-compare>

        <if-compare field="invoiceType.invoiceTypeId" operator="not-equals" type="String" value="PURCHASE_INVOICE">
            <entity-condition entity-name="InvoiceItem" list="invoiceItems" use-cache="true">
                <condition-list>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                </condition-list>
            </entity-condition>

            <iterate list="invoiceItems" entry="invoiceItem">
                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
                <set field="quantity" type="BigDecimal" value="1"/>
                <if-not-empty field="invoiceItem.quantity">
                    <set field="quantity" from-field="invoiceItem.quantity"/>
                </if-not-empty>
                <calculate field="amountFromInvoice" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantity"/>
                        <calcop operator="get" field="invoiceItem.amount"/>
                    </calcop>
                </calculate>
                <calculate field="totalAmountFromInvoice" decimal-scale="${ledgerDecimals}"
                           rounding-mode="${roundingMode}">
                    <calcop operator="add">
                        <calcop operator="get" field="totalAmountFromInvoice"/>
                        <calcop operator="get" field="amountFromInvoice"/>
                    </calcop>
                </calculate>

                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.glAccountTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
                <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                <set field="acctgTransEntries[]" from="debitEntry"/>
            </iterate>
            <set field="debitTotal" from-field="totalAmountFromInvoice"/>
        </if-compare>

        <!-- Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.organizationPartyId" from="invoice.partyId"/>
        <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
        <set field="creditEntry.origAmount" from="debitTotal"/>
        <set field="creditEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
        <set field="creditEntry.partyId" from="invoice.partyIdFrom"/>
        <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <!-- Set header fields (AcctgTrans) -->
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <if-compare field="invoice.invoiceTypeId" operator="equals" value="XFR_SHIP_INVOICE">
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="XFR_SHIP_INVOICE"/>
            <else>
                <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PURCHASE_INVOICE"/>
            </else>
        </if-compare>
        <set field="createAcctgTransAndEntriesInMap.invoiceId" from="invoice.invoiceId"/>
        <set field="createAcctgTransAndEntriesInMap.partyId" from="invoice.partyIdFrom"/>
        <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
        <set field="createAcctgTransAndEntriesInMap.transactionDate" from-field="invoice.invoiceDate" type="Timestamp"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>

        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransForSalesInvoice" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create an accounting transaction for a sales invoice" use-transaction="true">

        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="totalOrigAmount" type="BigDecimal" value="0"/>
        <set field="totalTaxAmount" type="BigDecimal" value="0"/>
        <set field="subTotalAmount" type="BigDecimal" value="0"/>
        <set field="totalOtherAdjustment" type="BigDecimal" value="0"/>

        <set field="productTaxMap" type="Map"/>
        <set field="productTaxMap.T" value="T"/>
        <entity-one auto-field-map="true" entity-name="Invoice" use-cache="false" value-field="invoice"/>
        <if-compare field="invoice.invoiceTypeId" operator="equals" type="String" value="SALES_INVOICE">

            <entity-condition distinct="false" entity-name="InvoiceItem" filter-by-date="false" list="invoiceItems"
                              use-cache="true">
                <condition-list combine="and">
                    <condition-list combine="or">
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%TAX%"/>
                    </condition-list>
                    <condition-expr field-name="invoiceId" from-field="parameters.invoiceId" operator="equals"/>
                </condition-list>
            </entity-condition>

            <iterate entry="invoiceItem" list="invoiceItems">
                <calculate decimal-scale="${ledgerDecimals}" field="totalTaxAmount" rounding-mode="${roundingMode}"
                           type="BigDecimal">
                    <calcop operator="add">
                        <calcop field="totalTaxAmount" operator="get"/>
                        <calcop field="invoiceItem.amount" operator="get"/>
                    </calcop>
                </calculate>
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.glAccountTypeId" value="TAX_ACCOUNT"/>
                <set field="creditEntry.organizationPartyId" from="invoice.partyIdFrom"/>
                <set field="creditEntry.origAmount" from="invoiceItem.amount"/>
                <set field="creditEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
                <set field="creditEntry.glAccountId" from="invoiceItem.overrideGlAccountId"/>
                <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
                <call-bsh>
                    <![CDATA[
                        import java.util.Queue;
                        import java.util.LinkedList;
                        Queue taxQueue = (LinkedList)productTaxMap.get(invoiceItem.getString("productId"));
                        if(taxQueue==null){
                            taxQueue = new LinkedList();
                            taxQueue.add(invoiceItem.getBigDecimal("amount"));
                        }else{
                            taxQueue.add(invoiceItem.getBigDecimal("amount"));
                        }
                        productTaxMap.put(invoiceItem.getString("productId"),taxQueue);
                     ]]>
                </call-bsh>
            </iterate>

            <entity-condition distinct="false" entity-name="InvoiceItem" list="invoiceItems">
                <condition-list combine="and">
                    <condition-list combine="or">
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%ADJ%"/>
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%SHIPPING%"/>
                    </condition-list>
                    <condition-expr field-name="invoiceId" from-field="parameters.invoiceId"
                                    operator="equals"/>
                </condition-list>
            </entity-condition>

            <iterate entry="invoiceItem" list="invoiceItems">
                <calculate decimal-scale="${ledgerDecimals}" field="totalOtherAdjustment"
                           rounding-mode="${roundingMode}" type="BigDecimal">
                    <calcop operator="add">
                        <calcop field="totalOtherAdjustment" operator="get"/>
                        <calcop field="invoiceItem.amount" operator="get"/>
                    </calcop>
                </calculate>
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.organizationPartyId" from="invoice.partyIdFrom"/>
                <set field="creditEntry.origAmount" from="invoiceItem.amount"/>
                <set field="creditEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
                <set field="creditEntry.glAccountId" from="invoiceItem.overrideGlAccountId"/>

                <if-empty field="creditEntry.glAccountId">
                    <entity-one entity-name="InvoiceItemType" use-cache="false" value-field="invoiceItemType"
                                auto-field-map="true">
                        <field-map field-name="invoiceItemTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
                    </entity-one>
                    <if-not-empty field="invoiceItemType.defaultGlAccountId">
                        <set from-field="invoiceItemType.defaultGlAccountId" field="creditEntry.glAccountId"/>
                    </if-not-empty>
                </if-empty>
                <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
            </iterate>

            <set field="pricesIncludeTax" value="false" type="Boolean"/>
            <entity-condition distinct="false" entity-name="InvoiceItem" filter-by-date="false" list="invoiceItems"
                              use-cache="true">
                <condition-list combine="and">
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%TAX%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%ADJ%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%SHIPPING%"/>
                    <condition-expr field-name="invoiceId" from-field="parameters.invoiceId" operator="equals"/>
                </condition-list>
            </entity-condition>

            <first-from-list entry="invoiceItem" list="invoiceItems"/>
            <entity-condition list="orderItemBillings" entity-name="OrderItemBilling">
                <condition-list>
                    <condition-expr field-name="invoiceId" from-field="invoice.invoiceId"/>
                    <condition-expr field-name="invoiceItemSeqId" from-field="invoiceItem.invoiceItemSeqId"/>
                </condition-list>
            </entity-condition>
            <first-from-list entry="orderItemBilling" list="orderItemBillings"/>

            <if-not-empty field="orderItemBillings">
                <get-related-one relation-name="OrderHeader" value-field="orderItemBilling"
                                 to-value-field="orderHeader"/>
                <get-related-one relation-name="ProductStore" value-field="orderHeader" to-value-field="productStore"/>
                <get-related-one relation-name="OrderItem" value-field="orderItemBilling" to-value-field="orderItem"/>
                <if-not-empty field="productStore">
                    <if-compare field="productStore.pricesIncludeTax" operator="equals" value="Y">
                        <set field="pricesIncludeTax" value="true" type="Boolean"/>
                    </if-compare>
                </if-not-empty>
            </if-not-empty>
            <log level="always" message="invoiceItems ${invoiceItems}"/>
            <iterate entry="invoiceItem" list="invoiceItems">
                <!-- TODO: handle serialized inventory -->
                <if-empty field="invoiceItem.quantity">
                    <set field="invoiceItem.quantity" type="BigDecimal" value="1"/>
                </if-empty>

                <calculate field="origAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"
                           type="BigDecimal">
                    <calcop operator="multiply">
                        <calcop operator="get" field="invoiceItem.quantity"/>
                        <calcop operator="get" field="invoiceItem.amount"/>
                    </calcop>
                </calculate>

                <!-- Credit -->
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <if-compare field="invoiceItem.invoiceItemTypeId" operator="equals" value="INV_RENTAL_ITEM">
                    <set field="creditEntry.glAccountTypeId" value="RENTAL_INCOME"/>
                    <else>
                        <set field="creditEntry.glAccountTypeId" value="SALES_ACCOUNT"/>
                    </else>
                </if-compare>
                <set field="creditEntry.organizationPartyId" from="invoice.partyIdFrom"/>
                <set field="creditEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
                <set field="creditEntry.productId" from="invoiceItem.productId"/>
                <set field="creditEntry.origAmount" from="origAmount"/>
                <set field="creditEntry.glAccountId" from="invoiceItem.overrideGlAccountId"/>
                <if-empty field="invoiceItem.overrideGlAccountId">
                    <if-empty field="creditEntry.glAccountTypeId">
                        <set field="creditEntry.glAccountTypeId" from="invoice.invoiceItemTypeId"/>
                    </if-empty>
                </if-empty>
                <calculate field="subTotalAmount" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}"
                           type="BigDecimal">
                    <calcop operator="add">
                        <calcop field="subTotalAmount" operator="get"/>
                        <calcop field="origAmount" operator="get"/>
                    </calcop>
                </calculate>
                <if-compare field="pricesIncludeTax" operator="equals" value="true">
                    <call-bsh><![CDATA[
                        import java.math.BigDecimal;
                        import java.util.Queue;
                        System.out.println(productTaxMap);
                        Queue taxQueue = (Queue)productTaxMap.get(invoiceItem.getString("productId"));
                        if(taxQueue!=null){
                        BigDecimal productTaxAmt = taxQueue.poll();
                        System.out.println("productTaxAmt= "+productTaxAmt);
                        BigDecimal invLineAmt = origAmount.subtract(productTaxAmt);
                        creditEntry.put("origAmount",invLineAmt);
                        }
                    ]]>
                    </call-bsh>
                    <log level="always" message="creditEntry === ${creditEntry}"/>
                </if-compare>
                <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
            </iterate>
            <!-- Debit -->


            <log level="always" message=" Sub Total Amount ${subTotalAmount}"/>
            <log level="always" message=" Total Other Adjustment ${totalOtherAdjustment}"/>
            <log level="always" message=" Total Tax Amount ${totalTaxAmount}"/>
            <calculate field="totalOrigAmount">
                <calcop operator="add">
                    <calcop operator="get" field="subTotalAmount"/>
                    <calcop operator="get" field="totalOtherAdjustment"/>
                    <calcop operator="get" field="totalTaxAmount"/>
                </calcop>
            </calculate>

            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
            <set field="debitEntry.organizationPartyId" from="invoice.partyIdFrom"/>
            <if-compare field="pricesIncludeTax" operator="equals" value="true">
                <calculate field="totalOrigAmount">
                    <calcop operator="add">
                        <calcop operator="get" field="subTotalAmount"/>
                        <calcop operator="get" field="totalOtherAdjustment"/>
                    </calcop>
                </calculate>
            </if-compare>
            <set field="debitEntry.origAmount" from="totalOrigAmount"/>
            <set field="debitEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
            <set field="debitEntry.partyId" from="invoice.partyId"/>
            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from="invoice.partyId"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="SALES_INVOICE"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from="parameters.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from="invoice.invoiceDate" type="Timestamp"/>
            <log level="always" message="${createAcctgTransAndEntriesInMap}"/>
            <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="createAcctgTransAndEntries"
                          success-code="success">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        </if-compare>
    </simple-method>
    <!--automatic GL posting service triggered payment is created or when set payment status -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransAndEntriesForOutgoingPayment"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="create accounting transactions and accounting transaction entries for outgoing payment"
                   use-transaction="true">
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <set field="amountAppliedTotal" type="BigDecimal" value="0"/>
        <entity-one auto-field-map="true" entity-name="Payment" use-cache="false" value-field="payment"/>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isDisbursement"
                           ret-field="isDisbursement">
            <field field="payment" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <if-compare field="isDisbursement" operator="equals" type="Boolean" value="true">
            <set field="organizationPartyId" from="payment.partyIdFrom"/>
            <set field="partyId" from="payment.partyIdTo"/>
            <set field="roleTypeId" value="BILL_FROM_VENDOR"/>
            <entity-one auto-field-map="true" entity-name="PaymentGlAccountTypeMap" use-cache="false"
                        value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId"/>
            </entity-one>
            <set field="debitGlAccountTypeId" from="paymentGlAccountTypeMap.glAccountTypeId"/>
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <!-- TODO -->
            <!--set field="creditEntry.glAccountTypeId" from-field=""/ -->
            <set field="creditEntry.origAmount" from="payment.amount"/>
            <set field="creditEntry.origCurrencyUomId" from="payment.currencyUomId"/>
            <set field="creditEntry.organizationPartyId" from="payment.partyIdFrom"/>
            <set field="creditEntry.partyId" from="payment.partyIdTo"/>
            <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
            <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
            <entity-condition distinct="false" entity-name="PaymentTds" filter-by-date="false" list="paymentTdsList"
                              use-cache="false">
                <condition-expr field-name="paymentId" from-field="parameters.paymentId"
                                ignore-if-null="false" operator="equals"/>
            </entity-condition>
            <iterate entry="paymentTds" list="paymentTdsList">
                <entity-condition distinct="false" entity-name="PaymentTdsGlAccount" filter-by-date="false"
                                  list="tdsTypeGlAccounts" use-cache="false">
                    <condition-list combine="and">
                        <condition-expr field-name="tdsTypeId" from-field="paymentTds.tdsTypeId"
                                        ignore-if-null="false" operator="equals"/>
                        <condition-expr field-name="organizationPartyId" from-field="payment.partyIdFrom"
                                        ignore-if-null="false" operator="equals"/>
                    </condition-list>
                </entity-condition>
                <first-from-list entry="tdsType" list="tdsTypeGlAccounts"/>
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="C"/>
                <set field="debitEntry.glAccountId" from="tdsType.glAccountId"/>
                <set field="debitEntry.origAmount" from="paymentTds.amount"/>
                <set field="debitEntry.origCurrencyUomId" from="payment.currencyUomId"/>
                <set field="debitEntry.organizationPartyId" from="payment.partyIdFrom"/>
                <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
            </iterate>
            <calculate decimal-scale="${ledgerDecimals}" field="amount" rounding-mode="${roundingMode}"
                       type="BigDecimal">
                <calcop operator="subtract">
                    <calcop field="payment.amount" operator="get"/>
                    <calcop field="amountAppliedTotal" operator="get"/>
                </calcop>
            </calculate>
            <if-compare field="amount" operator="greater" type="BigDecimal" value="0">
                <make-value entity-name="AcctgTransEntry" value-field="debitEntryWithDiffAmount"/>
                <set field="debitEntryWithDiffAmount.debitCreditFlag" value="D"/>
                <set field="debitEntryWithDiffAmount.origAmount" from="amount"/>
                <set field="debitEntryWithDiffAmount.origCurrencyUomId" from="payment.currencyUomId"/>
                <set field="debitEntryWithDiffAmount.glAccountId" from="payment.overrideGlAccountId"/>
                <set field="debitEntryWithDiffAmount.glAccountTypeId" from="debitGlAccountTypeId"/>
                <set field="debitEntryWithDiffAmount.organizationPartyId" from="organizationPartyId"/>
                <set field="acctgTransEntries[]" from="debitEntryWithDiffAmount" type="Object"/>
            </if-compare>
            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" from="roleTypeId"/>
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="OUTGOING_PAYMENT"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from="partyId"/>
            <set field="createAcctgTransAndEntriesInMap.paymentId" from="payment.paymentId"/>
            <set field="createAcctgTransAndEntriesInMap.transactionDate" from="payment.effectiveDate" type="Timestamp"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>

            <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="createAcctgTransAndEntries"
                          success-code="success">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            <!-- Now create accounting transactions for the payment applications -->
            <entity-and entity-name="PaymentApplication" filter-by-date="false" list="paymentApplications"
                        use-cache="false">
                <field-map field-name="paymentId" from-field="payment.paymentId"/>
            </entity-and>
            <iterate entry="paymentApplication" list="paymentApplications">
                <set field="createAcctgTransAndEntriesForPaymentApplicationInMap.paymentApplicationId"
                     from="paymentApplication.paymentApplicationId" set-if-empty="true"
                     set-if-null="false"/>
                <call-service break-on-error="true" error-code="error"
                              in-map-name="createAcctgTransAndEntriesForPaymentApplicationInMap"
                              include-user-login="true"
                              require-new-transaction="false"
                              service-name="createAcctgTransAndEntriesForPaymentApplication" success-code="success">
                    <result-to-field result-name="acctgTransId"/>
                </call-service>
            </iterate>
        </if-compare>
    </simple-method>


    <!--service to clone an existing accounting transaction and its entries -->
    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="copyAcctgTransAndEntries"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="copy AcctgTransAndEntries" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="AcctgTrans" use-cache="false" value-field="acctgTrans">
            <field-map field-name="acctgTransId" from-field="parameters.fromAcctgTransId"/>
        </entity-one>
        <set field="acctgTrans.isReverted" value="Y"/>
        <store-value value-field="acctgTrans"/>
        <!--Cloning AcctgTrans -->
        <clone-value new-value-field="newAcctgTrans" value-field="acctgTrans"/>
        <clear-field field="newAcctgTrans.acctgTransId"/>
        <set-service-fields map="newAcctgTrans" service-name="createAcctgTrans" to-map="createAcctgTransInMap"/>
        <now-timestamp field="nowTimestamp"/>
        <set field="createAcctgTransInMap.transactionDate" from="nowTimestamp"/>
        <set field="createAcctgTransInMap.isPosted" value="N"/>
        <set field="originalAcctgTransId" from="parameters.fromAcctgTransId"/>
        <field-to-result field="originalAcctgTransId" result-name="acctgTransId"/>

        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransInMap"
                      include-user-login="true" require-new-transaction="false"
                      service-name="createAcctgTrans" success-code="success">
            <result-to-field field="newAcctgTrans.acctgTransId" result-name="acctgTransId"/>
            <result-to-result result-name="acctgTransId"/>
        </call-service>

        <get-related list="acctgTransEntries" relation-name="AcctgTransEntry" use-cache="false"
                     value-field="acctgTrans"/>
        <iterate entry="acctgTransEntry" list="acctgTransEntries">
            <!--Cloning AcctgTransEntry -->
            <clone-value new-value-field="newAcctgTransEntry" value-field="acctgTransEntry"/>
            <clear-field field="newAcctgTransEntry.acctgTransId"/>
            <set-service-fields map="newAcctgTransEntry" service-name="createAcctgTransEntry"
                                to-map="createAcctgTransAndEntryInMap"/>
            <set field="createAcctgTransAndEntryInMap.acctgTransId" from="newAcctgTrans.acctgTransId"/>
            <if-compare field="parameters.revert" operator="equals" type="String" value="Y">
                <if-compare field="newAcctgTransEntry.debitCreditFlag" operator="equals" type="String" value="D">
                    <set field="createAcctgTransAndEntryInMap.debitCreditFlag" value="C"/>
                </if-compare>
                <if-compare field="newAcctgTransEntry.debitCreditFlag" operator="equals" type="String" value="C">
                    <set field="createAcctgTransAndEntryInMap.debitCreditFlag" value="D"/>
                </if-compare>
                <else>
                    <set field="createAcctgTransAndEntryInMap.debitCreditFlag"
                         from="newAcctgTransEntry.debitCreditFlag"/>
                </else>
            </if-compare>
            <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntryInMap"
                          include-user-login="true"
                          require-new-transaction="false" service-name="createAcctgTransEntry" success-code="success"/>
        </iterate>
    </simple-method>

    <!-- Pradyumna: Not sure how it would be used.Copied from latest Ofbiz trunk-->
    <simple-method method-name="createAcctgTransForCustomerReturnInvoice"
                   short-description="Create an accounting transaction for a Customer Return Invoice">

        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <entity-one entity-name="Invoice" value-field="invoice"/>
        <get-related-one value-field="invoice" relation-name="InvoiceType" to-value-field="invoiceType"/>

        <!-- Check invoiceTypeId. This service works only for CustomerReturns -->
        <if-compare field="invoiceType.invoiceTypeId" operator="equals" value="CUST_RTN_INVOICE">
            <set field="totalAmountFromInvoice" type="BigDecimal" value="0"/>
            <set field="invoiceTaxTotal" type="BigDecimal" value="0"/>

            <set field="transPartyRoleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="acctgTransTypeId" value="CUST_RTN_INVOICE"/>
            <entity-condition entity-name="InvoiceItem" list="invoiceItems">
                <condition-list>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%TAX%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%ADJ%"/>
                    <condition-expr field-name="invoiceItemTypeId" operator="not-like" value="%SHIPPING%"/>
                    <condition-expr field-name="invoiceId" operator="equals" from-field="parameters.invoiceId"/>
                    <condition-expr field-name="amount" operator="greater" value="0"/>
                </condition-list>
            </entity-condition>

            <iterate list="invoiceItems" entry="invoiceItem">
                <set field="amountFromOrder" type="BigDecimal" value="0"/>
                <set field="amountFromInvoice" type="BigDecimal" value="0"/>
                <set field="quantity" type="BigDecimal" value="1"/>
                <if-not-empty field="invoiceItem.quantity">
                    <set field="quantity" from-field="invoiceItem.quantity"/>
                </if-not-empty>

                <!-- This InvoiceItem amount. -->
                <calculate field="amountFromInvoice" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                    <calcop operator="multiply">
                        <calcop operator="get" field="quantity"/>
                        <calcop operator="get" field="invoiceItem.amount"/>
                    </calcop>
                </calculate>
                <log level="always" message=" Invoice Item Amount ${amountFromInvoice}"/>
                <!-- Keep building Invoice Total for use in credit entry -->
                <calculate field="totalAmountFromInvoice" decimal-scale="${ledgerDecimals}"
                           rounding-mode="${roundingMode}">
                    <calcop operator="add">
                        <calcop operator="get" field="totalAmountFromInvoice"/>
                        <calcop operator="get" field="amountFromInvoice"/>
                    </calcop>
                </calculate>

                <!-- Debit -->
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.organizationPartyId" from-field="invoice.partyId"/>
                <set field="debitEntry.partyId" from-field="invoice.partyIdFrom"/>
                <set field="debitEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
                <set field="debitEntry.productId" from-field="invoiceItem.productId"/>
                <set field="debitEntry.glAccountTypeId" value="SALES_ACCOUNT"/>
                <if-not-empty field="invoiceItem.overrideGlAccountId">
                    <set field="debitEntry.glAccountId" from-field="invoiceItem.overrideGlAccountId"/>
                </if-not-empty>

                <!-- <if-empty field="debitEntry.glAccountId">
                     <entity-one entity-name="InvoiceItemType" use-cache="false" value-field="invoiceItemType"
                                 auto-field-map="true">
                         <field-map field-name="invoiceItemTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
                     </entity-one>
                     <if-not-empty field="invoiceItemType.defaultGlAccountId">
                         <set from-field="invoiceItemType.defaultGlAccountId" field="debitEntry.glAccountId"/>
                     </if-not-empty>
                 </if-empty>-->
                <set field="debitEntry.origAmount" from-field="amountFromInvoice"/>
                <set field="debitEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
                <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
            </iterate>
            <log level="info" message=" Total Invoiced Amount ${totalAmountFromInvoice}"/>
            <entity-condition distinct="false" entity-name="InvoiceItem" filter-by-date="false" list="invoiceItems"
                              use-cache="true">
                <condition-list combine="and">
                    <condition-list combine="or">
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%TAX%"/>
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%ADJ%"/>
                        <condition-expr field-name="invoiceItemTypeId" operator="like" value="%SHIPPING%"/>
                    </condition-list>
                    <condition-expr field-name="invoiceId" from-field="parameters.invoiceId"
                                    ignore-if-null="false" operator="equals"/>
                </condition-list>
            </entity-condition>
            <iterate entry="invoiceItem" list="invoiceItems">
                <calculate decimal-scale="${ledgerDecimals}" field="invoiceTaxTotal" rounding-mode="${roundingMode}"
                           type="BigDecimal">
                    <calcop operator="add">
                        <calcop field="invoiceTaxTotal" operator="get"/>
                        <calcop field="invoiceItem.amount" operator="get"/>
                    </calcop>
                </calculate>
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.organizationPartyId" from="invoice.partyId"/>
                <set field="debitEntry.origAmount" from="invoiceItem.amount"/>
                <set field="debitEntry.origCurrencyUomId" from="invoice.currencyUomId"/>
                <set field="debitEntry.glAccountId" from="invoiceItem.overrideGlAccountId"/>

                <if-empty field="debitEntry.glAccountId">
                    <entity-one entity-name="InvoiceItemType" use-cache="false" value-field="invoiceItemType"
                                auto-field-map="true">
                        <field-map field-name="invoiceItemTypeId" from-field="invoiceItem.invoiceItemTypeId"/>
                    </entity-one>
                    <if-not-empty field="invoiceItemType.defaultGlAccountId">
                        <set field="debitEntry.glAccountId" from-field="invoiceItemType.defaultGlAccountId"/>
                    </if-not-empty>
                </if-empty>
                <if-empty field="debitEntry.glAccountId">
                    <add-error>
                        <fail-message
                                message="No GL Account Mapping for Invoice Item Type ${invoiceItemType.invoiceItemTypeId}== ${invoiceItemType.description}"/>
                    </add-error>
                </if-empty>
                <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
            </iterate>
            <check-errors/>
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.organizationPartyId" from-field="invoice.partyId"/>
            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
            <calculate field="totalAmountFromInvoice" type="BigDecimal" decimal-scale="${ledgerDecimals}"
                       rounding-mode="${roundingMode}">
                <calcop operator="add">
                    <calcop operator="get" field="totalAmountFromInvoice"/>
                    <calcop operator="get" field="invoiceTaxTotal"/>
                </calcop>
            </calculate>
            <set field="creditEntry.origAmount" from-field="totalAmountFromInvoice"/>
            <set field="creditEntry.origCurrencyUomId" from-field="invoice.currencyUomId"/>
            <set field="creditEntry.partyId" from-field="invoice.partyIdFrom"/>
            <set field="creditEntry.roleTypeId" from-field="transPartyRoleTypeId"/>
            <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
            <!-- Set header fields (AcctgTrans) -->
            <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" from-field="acctgTransTypeId"/>
            <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="invoice.invoiceId"/>
            <set field="createAcctgTransAndEntriesInMap.partyId" from-field="invoice.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>

            <if-compare-field field="totalAmountFromInvoice" operator="equals" to-field="0">
                <return/>
            </if-compare-field>
            <log level="info" message="***** Entries ${createAcctgTransAndEntriesInMap}"/>
            <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
                <result-to-field result-name="acctgTransId"/>
            </call-service>
            <field-to-result field="acctgTransId" result-name="acctgTransId"/>
            <else>
                <!-- This invoice is not a Customer Return. Return error -->
                <add-error>
                    <fail-property resource="AccountingUiLabels" property="AccountingInvoiceBadInvoiceType"/>
                </add-error>
            </else>
        </if-compare>
    </simple-method>

    <!--service to create AcctgTransAndEntries For Customer Refund Payment Application-->
    <simple-method method-name="createAcctgTransAndEntriesForCustomerRefundPaymentApplication"
                   short-description="create AcctgTransAndEntries For Customer Refund PaymentApplication">

        <entity-one entity-name="PaymentApplication" value-field="paymentApplication">
            <field-map field-name="paymentApplicationId" from-field="parameters.paymentApplicationId"/>
        </entity-one>
        <get-related-one value-field="paymentApplication" relation-name="Payment" to-value-field="payment"/>
        <!-- if the payment transaction has not been already posted to gl then don't do nothing; the transaction for the payment application will be posted together with the payment -->
        <if-compare field="payment.statusId" operator="equals" value="PMNT_NOT_PAID">
            <return/>
        </if-compare>
        <!-- if the payment Debited account is already "accounts payable" then don't do nothing -->
        <entity-one entity-name="PaymentGlAccountTypeMap" value-field="paymentGlAccountTypeMap">
            <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
            <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
        </entity-one>
        <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" value="ACCOUNTS_RECEIVABLE">
            <return/>
        </if-compare>
        <!--Credit -->
        <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
        <set field="creditEntry.debitCreditFlag" value="C"/>
        <set field="creditEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
        <set field="creditEntry.partyId" from-field="payment.partyIdTo"/>
        <set field="creditEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <set field="creditEntry.origAmount" from-field="paymentApplication.amountApplied"/>
        <set field="creditEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
        <set field="creditEntry.glAccountId" from-field="payment.overrideGlAccountId"/>
        <set field="creditEntry.glAccountTypeId" from-field="paymentGlAccountTypeMap.glAccountTypeId"/>
        <!-- Debit -->
        <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
        <set field="debitEntry.debitCreditFlag" value="D"/>
        <set field="debitEntry.organizationPartyId" from-field="payment.partyIdFrom"/>
        <set field="debitEntry.partyId" from-field="payment.partyIdTo"/>
        <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <set field="debitEntry.origAmount" from-field="paymentApplication.amountApplied"/>
        <set field="debitEntry.origCurrencyUomId" from-field="payment.currencyUomId"/>
        <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
        <if-not-empty field="paymentApplication.overrideGlAccountId">
            <set field="debitEntry.glAccountId" from-field="paymentApplication.overrideGlAccountId"/>
        </if-not-empty>
        <set field="acctgTransEntries[]" from-field="debitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from-field="creditEntry" type="Object"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from-field="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PAYMENT_APPL"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.paymentId" from-field="paymentApplication.paymentId"/>
        <set field="createAcctgTransAndEntriesInMap.invoiceId" from-field="paymentApplication.invoiceId"/>
        <set field="createAcctgTransAndEntriesInMap.partyId" from-field="payment.partyIdTo"/>
        <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
        <call-service service-name="createAcctgTransAndEntries" in-map-name="createAcctgTransAndEntriesInMap">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>
    <!-- End Pradyumna -->

    <!--service to create AcctgTransAndEntries For Payment Application -->
    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createAcctgTransAndEntriesForPaymentApplication"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="create AcctgTransAndEntries For PaymentApplication" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="PaymentApplication" use-cache="false"
                    value-field="paymentApplication">
            <field-map field-name="paymentApplicationId" from-field="parameters.paymentApplicationId"/>
        </entity-one>
        <get-related-one relation-name="Payment" to-value-field="payment" use-cache="false"
                         value-field="paymentApplication"/>
        <!-- if the payment transaction has not been already posted to gl then don't do nothing; the transaction for the payment application will be posted together with 
			the payment -->
        <if-compare field="payment.statusId" operator="equals" type="String" value="PMNT_NOT_PAID">
            <return response-code="success"/>
        </if-compare>
        <call-class-method class-name="org.ofbiz.accounting.util.UtilAccounting" method-name="isReceipt"
                           ret-field="isReceipt">
            <field field="payment" type="org.ofbiz.entity.GenericValue"/>
        </call-class-method>
        <if-compare field="isReceipt" operator="equals" type="Boolean" value="true">
            <!-- if the payment Credited account is already "accounts receivable" then don't do nothing -->
            <entity-one auto-field-map="true" entity-name="PaymentGlAccountTypeMap" use-cache="false"
                        value-field="paymentGlAccountTypeMap">
                <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                <field-map field-name="organizationPartyId" from-field="payment.partyIdTo"/>
            </entity-one>
            <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" type="String"
                        value="ACCOUNTS_RECEIVABLE">
                <return response-code="success"/>
            </if-compare>
            <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" type="String"
                        value="ACCOUNTS_PAYABLE">
                <return response-code="success"/>
            </if-compare>

            <!--Debit -->
            <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
            <set field="debitEntry.debitCreditFlag" value="D"/>
            <set field="debitEntry.organizationPartyId" from="payment.partyIdTo"/>
            <set field="debitEntry.partyId" from="payment.partyIdFrom"/>
            <set field="debitEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="debitEntry.origAmount" from="paymentApplication.amountApplied"/>
            <set field="debitEntry.origCurrencyUomId" from="payment.currencyUomId"/>
            <set field="debitEntry.glAccountId" from="payment.overrideGlAccountId"/>
            <set field="debitEntry.glAccountTypeId" from="paymentGlAccountTypeMap.glAccountTypeId"/>
            <!-- Credit -->
            <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
            <set field="creditEntry.debitCreditFlag" value="C"/>
            <set field="creditEntry.organizationPartyId" from="payment.partyIdTo"/>
            <set field="creditEntry.partyId" from="payment.partyIdFrom"/>
            <set field="creditEntry.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <set field="creditEntry.origAmount" from="paymentApplication.amountApplied"/>
            <set field="creditEntry.origCurrencyUomId" from="payment.currencyUomId"/>
            <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
            <else>
                <!-- if the payment Debited account is already "accounts payable" then don't do nothing -->
                <entity-one auto-field-map="true" entity-name="PaymentGlAccountTypeMap" use-cache="false"
                            value-field="paymentGlAccountTypeMap">
                    <field-map field-name="paymentTypeId" from-field="payment.paymentTypeId"/>
                    <field-map field-name="organizationPartyId" from-field="payment.partyIdFrom"/>
                </entity-one>
                <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" type="String"
                            value="ACCOUNTS_PAYABLE">
                    <return response-code="success"/>
                </if-compare>
                <if-compare field="paymentGlAccountTypeMap.glAccountTypeId" operator="equals" type="String"
                            value="ACCOUNTS_RECEIVABLE">
                    <return response-code="success"/>
                </if-compare>
                <!--Credit -->
                <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                <set field="creditEntry.debitCreditFlag" value="C"/>
                <set field="creditEntry.organizationPartyId" from="payment.partyIdFrom"/>
                <set field="creditEntry.partyId" from="payment.partyIdTo"/>
                <set field="creditEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                <set field="creditEntry.origAmount" from="paymentApplication.amountApplied"/>
                <set field="creditEntry.origCurrencyUomId" from="payment.currencyUomId"/>
                <set field="creditEntry.glAccountId" from="payment.overrideGlAccountId"/>
                <set field="creditEntry.glAccountTypeId" from="paymentGlAccountTypeMap.glAccountTypeId"/>
                <!-- Debit -->
                <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                <set field="debitEntry.debitCreditFlag" value="D"/>
                <set field="debitEntry.organizationPartyId" from="payment.partyIdFrom"/>
                <set field="debitEntry.partyId" from="payment.partyIdTo"/>
                <set field="debitEntry.roleTypeId" value="BILL_FROM_VENDOR"/>
                <set field="debitEntry.origAmount" from="paymentApplication.amountApplied"/>
                <set field="debitEntry.origCurrencyUomId" from="payment.currencyUomId"/>
                <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
                <if-not-empty field="paymentApplication.overrideGlAccountId">
                    <set field="debitEntry.glAccountId" from="paymentApplication.overrideGlAccountId"/>
                    <else>
                        <if-not-empty field="paymentApplication.taxAuthGeoId">
                            <entity-one auto-field-map="true" entity-name="TaxAuthorityGlAccount" use-cache="false"
                                        value-field="taxAuthorityGlAccount">
                                <field-map field-name="organizationPartyId" from-field="organizationPartyId"/>
                                <field-map field-name="taxAuthGeoId" from-field="paymentApplication.taxAuthGeoId"/>
                                <field-map field-name="taxAuthPartyId" from-field="partyId"/>
                            </entity-one>
                            <set field="debitEntry.glAccountId" from="taxAuthorityGlAccount.glAccountId"/>
                        </if-not-empty>
                    </else>
                </if-not-empty>
            </else>
        </if-compare>
        <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>
        <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
        <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="PAYMENT_APPL"/>
        <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
        <set field="createAcctgTransAndEntriesInMap.paymentId" from="paymentApplication.paymentId"/>
        <set field="createAcctgTransAndEntriesInMap.invoiceId" from="paymentApplication.invoiceId"/>
        <set field="createAcctgTransAndEntriesInMap.transactionDate" from="payment.effectiveDate" type="Timestamp"/>

        <if-compare field="isReceipt" operator="equals" type="Boolean" value="true">
            <set field="createAcctgTransAndEntriesInMap.partyId" from="payment.partyIdFrom"/>
            <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_TO_CUSTOMER"/>
            <else>
                <set field="createAcctgTransAndEntriesInMap.partyId" from="payment.partyIdTo"/>
                <set field="createAcctgTransAndEntriesInMap.roleTypeId" value="BILL_FROM_VENDOR"/>
            </else>
        </if-compare>
        <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="createAcctgTransAndEntries" success-code="success">
            <result-to-field result-name="acctgTransId"/>
        </call-service>
        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
    </simple-method>
    <!-- Party GlAccount services -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createPartyGlAccount"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Associate a party to a General Ledger Account" use-transaction="true">
        <make-value entity-name="PartyGlAccount" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updatePartyGlAccount"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Update an existing General Ledger Account of a Party" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="PartyGlAccount" use-cache="false" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="deletePartyGlAccount"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Delete an existing General Ledger Account of a Party" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="PartyGlAccount" use-cache="false" value-field="lookedUpValue"/>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>
    <!-- Entity Specific Inline Methods -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getVarianceReasonGlAccountInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Gets VarianceReasonGlAccount on the basis of primary key" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="VarianceReasonGlAccount" use-cache="false"
                    value-field="varianceReasonGlAccount">
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
            <field-map field-name="varianceReasonId" from-field="parameters.glAccountTypeId"/>
        </entity-one>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getPartyGlAccountInline"
                   service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage"
                   service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList" service-success-message-name="successMessage"
                   short-description="Gets PartyGlAccount on the basis of primary key" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="PartyGlAccount" use-cache="false" value-field="partyGlAccount">
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="roleTypeId" from-field="parameters.roleTypeId"/>
            <field-map field-name="glAccountTypeId" from-field="parameters.glAccountTypeId"/>
        </entity-one>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getCreditCardTypeGlAccountInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Gets CreditCardTypeGlAccount on the basis of primary key" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="CreditCardTypeGlAccount" use-cache="false"
                    value-field="creditCardTypeGlAccount">
            <field-map field-name="cardType" from-field="creditCard.cardType"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getPaymentMethodTypeGlAccountInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Gets PaymentMethodTypeGlAccount on the basis of primary key"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="PaymentMethodTypeGlAccount" use-cache="false"
                    value-field="paymentMethodTypeGlAccount">
            <field-map field-name="paymentMethodTypeId" from-field="payment.paymentMethodTypeId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getProductGlAccountInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Gets ProductGlAccount on the basis of primary key" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ProductGlAccount" use-cache="true"
                    value-field="productGlAccount"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getProductCategoryGlAccountInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Gets ProductCategoryGlAccount on the basis of primary key" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ProductCategoryGlAccount" use-cache="false"
                    value-field="productCategoryGlAccount">
            <field-map field-name="productCategoryId" from-field="productCategoryMember.productCategoryId"/>
            <field-map field-name="glAccountTypeId" from-field="parameters.glAccountTypeId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getInvoiceItemTypeGlAccountInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Gets InvoiceItemTypeGlAccount on the basis of primary key" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="InvoiceItemTypeGlAccount" use-cache="false"
                    value-field="invoiceItemTypeGlAccount">
            <field-map field-name="invoiceItemTypeId" from-field="parameters.glAccountTypeId"/>
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
        </entity-one>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getGlAccountTypeDefaultInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Gets GlAccountTypeDefault on the basis of primary key" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="GlAccountTypeDefault" use-cache="true"
                    value-field="lookedUpValue">
            <field-map field-name="organizationPartyId" from-field="parameters.organizationPartyId"/>
            <field-map field-name="glAccountTypeId" from-field="parameters.glAccountTypeId"/>
        </entity-one>
        <log level="error" message=" GLACCOUNT TYPE DEFAULT MAP******* ${lookedUpValue}"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createGlAcctCatMemFromCostCenters" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Create GlAccountCategroyMember from CostCenters" use-transaction="true">
        <set field="glAccountId" from="parameters.glAccountId"/>
        <set field="glAccountCategoryId" from="parameters.glAccountCategoryId"/>
        <set field="amountPercentage" from="parameters.amountPercentage" type="BigDecimal"/>
        <set field="totalAmountPercentage" from="parameters.totalAmountPercentage" type="BigDecimal"/>
        <entity-and entity-name="GlAccountCategoryMember" filter-by-date="true" list="glAccountCategoryMemberList"
                    use-cache="false">
            <field-map field-name="glAccountId" from-field="glAccountId"/>
            <field-map field-name="glAccountCategoryId" from-field="glAccountCategoryId"/>
        </entity-and>
        <first-from-list entry="glAccountCategoryMember" list="glAccountCategoryMemberList"/>
        <if-compare field="totalAmountPercentage" operator="equals" type="BigDecimal" value="100">
            <if-empty field="glAccountCategoryMember">
                <set field="createGlAccountCategoryMemberMap.amountPercentage" from="amountPercentage"
                     type="BigDecimal"/>
                <set field="createGlAccountCategoryMemberMap.glAccountCategoryId" from="glAccountCategoryId"/>
                <set field="createGlAccountCategoryMemberMap.glAccountId" from="glAccountId"/>
                <now-timestamp field="createGlAccountCategoryMemberMap.fromDate"/>
                <call-service break-on-error="true" error-code="error" in-map-name="createGlAccountCategoryMemberMap"
                              include-user-login="true"
                              require-new-transaction="false" service-name="createGlAccountCategoryMember"
                              success-code="success"/>
                <log level="info"
                     message="GlAccountCategoryMember created for [${glAccountCategoryId}] and [${glAccountId}]"/>
                <else>
                    <set-service-fields map="glAccountCategoryMember" service-name="updateGlAccountCategoryMember"
                                        to-map="updateGlAccountCategoryMemberMap"/>
                    <set field="updateGlAccountCategoryMemberMap.amountPercentage" from="amountPercentage"
                         type="BigDecimal"/>
                    <call-service break-on-error="true" error-code="error"
                                  in-map-name="updateGlAccountCategoryMemberMap" include-user-login="true"
                                  require-new-transaction="false" service-name="updateGlAccountCategoryMember"
                                  success-code="success"/>
                </else>
            </if-empty>
            <else>
                <if-compare field="totalAmountPercentage" operator="equals" type="BigDecimal" value="0">
                    <if-not-empty field="glAccountCategoryMember">
                        <now-timestamp field="glAccountCategoryMember.thruDate"/>
                        <store-value do-cache-clear="true" value-field="glAccountCategoryMember"/>
                        <log level="info"
                             message="GlAccountCategoryMember expired for [${glAccountCategoryId}] and [${glAccountId}]"/>
                    </if-not-empty>
                    <else>
                        <add-error error-list-name="error_list">
                            <fail-property property="AccountingTotalAmountPercentageIsNotEqualOneHundred"
                                           resource="AccountingUiLabels"/>
                        </add-error>
                        <check-errors error-code="error" error-list-name="error_list"/>
                    </else>
                </if-compare>
            </else>
        </if-compare>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="updateGlAccountCategoryMember" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Update GL Account Category Member"
                   use-transaction="true">
        <if-not-empty field="parameters.amountPercentage">
            <entity-one auto-field-map="true" entity-name="GlAccountCategoryMember" use-cache="false"
                        value-field="lookedUpValue"/>
            <if-compare-field field="lookedUpValue.amountPercentage" operator="not-equals"
                              to-field="parameters.amountPercentage" type="BigDecimal">
                <clone-value new-value-field="newLookedUpValue" value-field="lookedUpValue"/>
                <now-timestamp field="lookedUpValue.thruDate"/>
                <store-value do-cache-clear="true" value-field="lookedUpValue"/>
                <set field="newLookedUpValue.amountPercentage" from="parameters.amountPercentage" type="BigDecimal"/>
                <now-timestamp field="newLookedUpValue.fromDate"/>
                <create-value do-cache-clear="true" or-store="false" value-field="newLookedUpValue"/>
                <log level="info"
                     message="GlAccountCategoryMember updated for [${parameters.glAccountCategoryId}] and [${parameters.glAccountId}]"/>
            </if-compare-field>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getGlAcctgOrgWithPostedBalanceSplit" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Posted amounts split by cost center from GlAccountOrganization"
                   use-transaction="true">
        <!-- retrieve ledger rounding properties -->
        <call-simple-method method-name="getGlArithmeticSettingsInline"/>
        <now-timestamp field="nowTimestamp"/>
        <set field="fromDate" from="parameters.fromDate" type="Timestamp"/>
        <set default="${nowTimestamp}" field="thruDate" from="parameters.thruDate" type="Timestamp"/>
        <if-empty field="fromDate">
            <entity-one auto-field-map="false" entity-name="CustomTimePeriod" use-cache="false"
                        value-field="customTimePeriod">
                <field-map field-name="customTimePeriodId" from-field="parameters.timePeriod"/>
            </entity-one>
            <set field="fromDate" from="customTimePeriod.fromDate" type="Timestamp"/>
            <set field="thruDate" from="customTimePeriod.thruDate" type="Timestamp"/>
        </if-empty>
        <set field="organizationPartyId" from="parameters.organizationPartyId"/>
        <set field="partyIds"
             from="groovy:org.ofbiz.party.party.PartyWorker.getAssociatedPartyIdsByRelationshipType(delegator, organizationPartyId, 'GROUP_ROLLUP')"
             type="List"/>
        <set field="partyIds[]" from="organizationPartyId"/>
        <entity-condition distinct="false" entity-name="GlAccountOrganization" filter-by-date="false"
                          list="glAccountOrganizations" use-cache="true">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" from-field="partyIds"
                                ignore-if-null="false" operator="in"/>
                <condition-expr field-name="postedBalance" ignore-if-null="false" operator="not-equals"
                                value=""/>
                <condition-expr field-name="fromDate" from-field="fromDate" ignore-if-null="false"
                                operator="greater-equals"/>
                <condition-expr field-name="fromDate" from-field="thruDate" ignore-if-null="false"
                                operator="less"/>
            </condition-list>
            <order-by field-name="glAccountId"/>
        </entity-condition>
        <if-not-empty field="glAccountOrganizations">
            <entity-and entity-name="GlAccountCategory" filter-by-date="false" list="glAccountCategories"
                        use-cache="true">
                <field-map field-name="glAccountCategoryTypeId" value="COST_CENTER"/>
                <order-by field-name="glAccountCategoryId"/>
            </entity-and>
            <if-not-empty field="glAccountCategories">
                <iterate entry="glAccountOrganization" list="glAccountOrganizations">
                    <clear-field field="glAcctgOrgAndCostCenterMap"/>
                    <set field="postedBalance" from="glAccountOrganization.postedBalance" type="BigDecimal"/>
                    <if-compare field="postedBalance" operator="less" type="BigDecimal" value="0">
                        <set field="postedBalance" from="groovy:postedBalance.negate()" type="BigDecimal"/>
                    </if-compare>
                    <set field="glAcctgOrgAndCostCenterMap.postedBalance" from="postedBalance"/>
                    <entity-one auto-field-map="false" entity-name="GlAccount" use-cache="false"
                                value-field="glAccount">
                        <field-map field-name="glAccountId" from-field="glAccountOrganization.glAccountId"/>
                    </entity-one>
                    <set field="glAcctgOrgAndCostCenterMap.glAccountId" from="glAccount.glAccountId"/>
                    <set field="glAcctgOrgAndCostCenterMap.accountCode" from="glAccount.accountCode"/>
                    <set field="glAcctgOrgAndCostCenterMap.accountName" from="glAccount.accountName"/>
                    <iterate entry="glAccountCategory" list="glAccountCategories">
                        <entity-and entity-name="GlAccountCategoryMember" filter-by-date="true"
                                    list="glAccountCategoryMembers" use-cache="false">
                            <field-map field-name="glAccountId" from-field="glAccountOrganization.glAccountId"/>
                            <field-map field-name="glAccountCategoryId"
                                       from-field="glAccountCategory.glAccountCategoryId"/>
                        </entity-and>
                        <if-not-empty field="glAccountCategoryMembers">
                            <first-from-list entry="glAccountCategoryMember" list="glAccountCategoryMembers"/>
                            <if-not-empty field="glAccountCategoryMember">
                                <set field="divisor" type="BigDecimal" value="100"/>
                                <set field="splitAmount"
                                     from="groovy:postedBalance.multiply(glAccountCategoryMember.amountPercentage).divide(divisor, Integer.valueOf(ledgerDecimals), BigDecimal.ROUND_HALF_UP)"
                                     type="BigDecimal"/>
                                <set field="glAcctgOrgAndCostCenterMap[glAccountCategory.glAccountCategoryId]"
                                     from="splitAmount" type="BigDecimal"/>
                            </if-not-empty>
                        </if-not-empty>
                    </iterate>
                    <field-to-list field="glAcctgOrgAndCostCenterMap" list="glAcctgOrgAndCostCenterList"/>
                </iterate>
            </if-not-empty>
            <field-to-result field="glAcctgOrgAndCostCenterList"/>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getGlAcctgAndAmountPercentage" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Get amount percentage and glAccount for cost center" use-transaction="true">
        <set field="glAcctgAndAmountPercentageList" from="nullfield" type="List"/>
        <set field="organizationPartyId" from="parameters.organizationPartyId"/>
        <set field="partyIds"
             from="groovy:org.ofbiz.party.party.PartyWorker.getAssociatedPartyIdsByRelationshipType(delegator, organizationPartyId, 'GROUP_ROLLUP')"
             type="List"/>
        <set field="partyIds[]" from="organizationPartyId"/>
        <entity-condition distinct="false" entity-name="GlAccountOrganization" filter-by-date="false"
                          list="glAccountOrganizations" use-cache="true">
            <condition-expr field-name="organizationPartyId" from-field="partyIds"
                            ignore-if-null="false" operator="in"/>
            <order-by field-name="glAccountId"/>
        </entity-condition>
        <if-not-empty field="glAccountOrganizations">
            <entity-and entity-name="GlAccountCategory" filter-by-date="false" list="glAccountCategories"
                        use-cache="true">
                <field-map field-name="glAccountCategoryTypeId" value="COST_CENTER"/>
                <order-by field-name="glAccountCategoryId"/>
            </entity-and>
            <if-not-empty field="glAccountCategories">
                <iterate entry="glAccountOrganization" list="glAccountOrganizations">
                    <clear-field field="glAcctgOrgAndCostCenterMap"/>
                    <get-related-one relation-name="GlAccount" to-value-field="glAccount" use-cache="false"
                                     value-field="glAccountOrganization"/>
                    <set field="glAcctgOrgAndCostCenterMap.glAccountId" from="glAccount.glAccountId"/>
                    <set field="glAcctgOrgAndCostCenterMap.accountCode" from="glAccount.accountCode"/>
                    <set field="glAcctgOrgAndCostCenterMap.accountName" from="glAccount.accountName"/>
                    <iterate entry="glAccountCategory" list="glAccountCategories">
                        <entity-and entity-name="GlAccountCategoryMember" filter-by-date="true"
                                    list="glAccountCategoryMembers" use-cache="false">
                            <field-map field-name="glAccountId" from-field="glAccountOrganization.glAccountId"/>
                            <field-map field-name="glAccountCategoryId"
                                       from-field="glAccountCategory.glAccountCategoryId"/>
                        </entity-and>
                        <if-not-empty field="glAccountCategoryMembers">
                            <first-from-list entry="glAccountCategoryMember" list="glAccountCategoryMembers"/>
                            <if-not-empty field="glAccountCategoryMember">
                                <set field="glAcctgOrgAndCostCenterMap[glAccountCategory.glAccountCategoryId]"
                                     from="glAccountCategoryMember.amountPercentage" set-if-empty="true"
                                     set-if-null="false" type="BigDecimal"/>
                            </if-not-empty>
                        </if-not-empty>
                    </iterate>
                    <field-to-list field="glAcctgOrgAndCostCenterMap" list="glAcctgAndAmountPercentageList"/>
                </iterate>
                <field-to-result field="glAccountCategories"/>
            </if-not-empty>
            <field-to-result field="glAcctgAndAmountPercentageList"/>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="getInventoryValuationList" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage"
                   short-description="Retrieves list for Inventory Valuation Report" use-transaction="true">
        <entity-condition distinct="false" entity-name="ProductInventoryItem" filter-by-date="false"
                          list="productInventoryItems" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="productId" from-field="parameters.productId" ignore="false"
                                ignore-case="false" ignore-if-empty="true"
                                ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore="false"
                                ignore-case="false" ignore-if-empty="true"
                                ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="primaryProductCategoryId" from-field="parameters.productCategoryId"
                                ignore="false" ignore-case="false"
                                ignore-if-empty="true" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="datetimeReceived" from-field="parameters.fromDate" ignore="false"
                                ignore-case="false" ignore-if-empty="true"
                                ignore-if-null="false" operator="greater-equals"/>
                <condition-expr field-name="datetimeReceived" from-field="parameters.thruDate" ignore="false"
                                ignore-case="false" ignore-if-empty="true"
                                ignore-if-null="false" operator="less-equals"/>
            </condition-list>
            <order-by field-name="productId"/>
        </entity-condition>
        <if-not-empty field="productInventoryItems">
            <set field="productIds"
                 from="groovy:org.ofbiz.entity.util.EntityUtil.getFieldListFromEntityList(productInventoryItems, 'productId', true);"
                 type="List"/>
            <iterate entry="productId" list="productIds">
                <set field="totalQuantityOnHand" type="BigDecimal" value="0"/>
                <set field="totalInventoryCost" type="BigDecimal" value="0"/>
                <set field="productAverageCost" type="BigDecimal" value="0"/>
                <iterate entry="productInventoryItem" list="productInventoryItems">
                    <if-compare-field field="productId" operator="equals" to-field="productInventoryItem.productId"
                                      type="String">
                        <if-compare field="parameters.cogsMethodId" operator="equals" type="String"
                                    value="COGS_AVG_COST">
                            <entity-one auto-field-map="false" entity-name="InventoryItem" use-cache="false"
                                        value-field="inventoryItem">
                                <field-map field-name="inventoryItemId"
                                           from-field="productInventoryItem.inventoryItemId"/>
                            </entity-one>
                            <set field="getProdAvgCostMap.inventoryItem" from="inventoryItem"/>
                            <call-service break-on-error="true" error-code="error" in-map-name="getProdAvgCostMap"
                                          include-user-login="true" require-new-transaction="false"
                                          service-name="getProductAverageCost" success-code="success">
                                <result-to-field field="productAverageCost" result-name="unitCost"/>
                            </call-service>
                        </if-compare>
                        <set field="totalQuantityOnHand"
                             from="totalQuantityOnHand + productInventoryItem.quantityOnHandTotal" type="BigDecimal"/>
                        <set field="currencyUomId" from="productInventoryItem.currencyUomId"/>
                        <set field="totalInventoryCost"
                             from="totalInventoryCost + (productInventoryItem.quantityOnHandTotal * productAverageCost)"
                             set-if-empty="true"
                             set-if-null="false" type="BigDecimal"/>
                    </if-compare-field>
                </iterate>
                <set field="inventoryValuation.productId" from="productId"/>
                <set field="inventoryValuation.totalQuantityOnHand" from="totalQuantityOnHand" type="BigDecimal"/>
                <set field="inventoryValuation.totalInventoryCost" from="totalInventoryCost" type="BigDecimal"/>
                <set field="inventoryValuation.productAverageCost" from="productAverageCost" type="BigDecimal"/>
                <set field="inventoryValuation.currencyUomId" from="currencyUomId"/>
                <set field="inventoryValuationList[]" from="inventoryValuation"/>
                <clear-field field="inventoryValuation"/>
            </iterate>
            <field-to-result field="inventoryValuationList"/>
        </if-not-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="false"
                   method-name="getGlArithmeticSettingsInline" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="getGlArithmeticSettingsInline"
                   use-transaction="true">
        <property-to-field default="4" field="ledgerDecimals" no-locale="false" property="ledger.decimals"
                           resource="arithmetic"/>
        <property-to-field default="HalfUp" field="roundingMode" no-locale="false" property="ledger.rounding"
                           resource="arithmetic"/>
        <log level="info"
             message="Got settings from arithmetic.properties: ledgerDecimals=${ledgerDecimals}, roundingMode=${roundingMode}"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="setGlReconciliationStatus" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Set Gl Reconciliation status"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="GlReconciliation" use-cache="false"
                    value-field="glReconciliation"/>
        <field-to-result field="glReconciliation.statusId" result-name="oldStatusId"/>
        <if-compare-field field="glReconciliation.statusId" operator="not-equals" to-field="parameters.statusId"
                          type="String">
            <entity-one auto-field-map="false" entity-name="StatusValidChange" use-cache="false"
                        value-field="statusChange">
                <field-map field-name="statusId" from-field="glReconciliation.statusId"/>
                <field-map field-name="statusIdTo" from-field="parameters.statusId"/>
            </entity-one>
            <if-empty field="statusChange">
                <add-error error-list-name="error_list">
                    <fail-property property="AccountingPSInvalidStatusChange" resource="AccountingUiLabels"/>
                </add-error>
                <log level="error" message="Cannot change from ${glReconciliation.statusId} to ${parameters.statusId}"/>
                <check-errors error-code="error" error-list-name="error_list"/>
                <else>
                    <set field="glReconciliation.statusId" from="parameters.statusId"/>
                    <store-value do-cache-clear="true" value-field="glReconciliation"/>
                </else>
            </if-empty>
        </if-compare-field>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createForexSalesTransaction" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create Forex Gain/Loss Transaction"
                   use-transaction="true">
        <entity-one auto-field-map="true" entity-name="Invoice" use-cache="false" value-field="invoice"/>

        <if-compare field="invoice.invoiceTypeId" operator="not-equals" value="SALES_INVOICE" type="String">
            <return/>
        </if-compare>
        <!--
                                       Forex Gain / Loss Implementation
                                       if invoice amount > payment amount
                                       if invoice type is sales invoice then
                                       Debit Foreign exchange loss,
                                       Credit Account receivable

                                       if invoice type is Purchase invoice then
                                       Debit Account payable,
                                       Credit Foreign exchange gain

                                       if invoice amount < payment amount
                                       if invoice type is sales invoice then
                                       Debit Account receivable,
                                       Credit Foreign exchange gain

                                       if invoice type is purchase invoice then
                                       Debit Foreign exchange loss,
                                       Credit Account payable
                               -->
        <set field="invoiceAmount" from="bsh:org.ofbiz.accounting.invoice.InvoiceWorker.getInvoiceTotal(invoice)"
             type="BigDecimal"/>
        <set field="paymentAmount" from="bsh:org.ofbiz.accounting.invoice.InvoiceWorker.getInvoiceApplied(invoice)"
             type="BigDecimal"/>
        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from="invoice.partyIdFrom"/>
        <call-service break-on-error="true" error-code="error" in-map-name="partyAccountingPreferencesCallMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="getPartyAccountingPreferences"
                      success-code="success">
            <result-to-field field="partyAcctgPreference" result-name="partyAccountingPreference"/>
        </call-service>
        <if-compare-field field="partyAcctgPreference.baseCurrencyUomId" operator="not-equals"
                          to-field="invoice.currencyUomId" type="String">
            <clear-field field="convertUomInMap"/>
            <set field="convertUomInMap.originalValue" from="invoiceAmount"/>
            <set field="convertUomInMap.uomId" from="invoice.currencyUomId"/>
            <set field="convertUomInMap.uomIdTo" from="partyAcctgPreference.baseCurrencyUomId"/>
            <set field="convertUomInMap.asOfDate" from="invoice.invoiceDate"/>
            <!-- TODO: set the optional asOfDate input parameter -->
            <call-service break-on-error="true" error-code="error" in-map-name="convertUomInMap"
                          include-user-login="true"
                          require-new-transaction="false"
                          service-name="convertUom" success-code="success">
                <result-to-field field="invoiceAmount" result-name="convertedValue"/>
            </call-service>

            <entity-condition entity-name="PaymentApplication" list="payments">
                <condition-expr field-name="invoiceId" from-field="invoice.invoiceId"></condition-expr>
            </entity-condition>
            <iterate list="payments" entry="paymentApplied">
                <clear-field field="convertUomInMap"/>
                <entity-one entity-name="Payment" value-field="payment">
                    <field-map field-name="paymentId" from-field="paymentApplied.paymentId"/>
                </entity-one>
                <set field="convertUomInMap.originalValue" from="paymentApplied.amountApplied"/>
                <set field="convertUomInMap.uomId" from="invoice.currencyUomId"/>
                <set field="convertUomInMap.uomIdTo" from="partyAcctgPreference.baseCurrencyUomId"/>
                <set field="convertUomInMap.asOfDate" from="payment.effectiveDate"/>
                <!-- TODO: set the optional asOfDate input parameter -->
                <call-service break-on-error="true" error-code="error" in-map-name="convertUomInMap"
                              include-user-login="true"
                              require-new-transaction="false"
                              service-name="convertUom" success-code="success">
                    <result-to-field field="paymentAmount" result-name="convertedValue"/>
                </call-service>
                <calculate field="totalPayment" type="BigDecimal">
                    <calcop operator="add">
                        <calcop operator="get" field="paymentAmount"/>
                        <calcop operator="get" field="totalPayment"/>
                    </calcop>
                </calculate>
            </iterate>
        </if-compare-field>
        <log level="error" message=" Invoice Amount ${invoiceAmount} Payment Applied ${totalPayment}"/>
        <if>
            <condition>
                <if-compare-field field="invoiceAmount" operator="greater" to-field="totalPayment" type="BigDecimal"/>
            </condition>
            <then>
                <calculate field="lossAmount" type="BigDecimal">
                    <calcop operator="subtract">
                        <calcop operator="get" field="invoiceAmount"/>
                        <calcop operator="get" field="totalPayment"/>
                    </calcop>
                </calculate>
                <if-compare operator="greater" field="lossAmount" value="0" type="BigDecimal">
                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.glAccountTypeId" value="FX_LOSS_ACCOUNT"/>
                    <set field="debitEntry.organizationPartyId" from="invoice.partyIdFrom"/>
                    <set field="debitEntry.origAmount" from="lossAmount"/>
                    <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>

                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
                    <set field="creditEntry.partyId" from="invoice.partyId"/>
                    <set field="creditEntry.roleTypeId" from="BILL_TO_CUSTOMER"/>
                    <set field="creditEntry.organizationPartyId" from="invoice.partyIdFrom"/>
                    <set field="creditEntry.origAmount" from="lossAmount"/>
                    <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>

                    <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
                    <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="FX_GAINLOSS_ACCTG"/>
                    <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                    <set field="createAcctgTransAndEntriesInMap.invoiceId" from="invoice.invoiceId"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                                  include-user-login="true"
                                  require-new-transaction="false" service-name="createAcctgTransAndEntries"
                                  success-code="success">
                        <result-to-field result-name="acctgTransId"/>
                    </call-service>
                </if-compare>
            </then>
        </if>

        <if>
            <condition>
                <if-compare-field field="invoiceAmount" operator="less" to-field="totalPayment" type="BigDecimal"/>
            </condition>
            <then>
                <calculate field="gainAmount" type="BigDecimal">
                    <calcop operator="subtract">
                        <calcop operator="get" field="totalPayment"/>
                        <calcop operator="get" field="invoiceAmount"/>
                    </calcop>
                </calculate>
                <if-compare operator="greater" field="gainAmount" value="0" type="BigDecimal">
                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.glAccountTypeId" value="FX_GAIN_ACCOUNT"/>
                    <set field="creditEntry.organizationPartyId" from="invoice.partyIdFrom"/>
                    <set field="creditEntry.origAmount" from="gainAmount"/>
                    <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>

                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_RECEIVABLE"/>
                    <set field="debitEntry.partyId" from="invoice.partyId"/>
                    <set field="debitEntry.roleTypeId" from="BILL_TO_CUSTOMER"/>
                    <set field="debitEntry.organizationPartyId" from="invoice.partyIdFrom"/>
                    <set field="debitEntry.origAmount" from="gainAmount"/>
                    <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>

                    <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
                    <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="FX_GAINLOSS_ACCTG"/>
                    <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                    <set field="createAcctgTransAndEntriesInMap.invoiceId" from="invoice.invoiceId"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                                  include-user-login="true"
                                  require-new-transaction="false" service-name="createAcctgTransAndEntries"
                                  success-code="success">
                        <result-to-field result-name="acctgTransId"/>
                    </call-service>
                </if-compare>
            </then>
        </if>


        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        <!-- -->
    </simple-method>


    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_"
                   event-event-message-name="_event_message_"
                   event-request-object-name="request" event-response-code-name="_response_code_"
                   event-response-object-name="response" login-required="true"
                   method-name="createForexPurchaseTransaction" service-error-message-list-name="errorMessageList"
                   service-error-message-map-name="errorMessageMap"
                   service-error-message-name="errorMessage" service-response-message-name="responseMessage"
                   service-success-message-list-name="successMessageList"
                   service-success-message-name="successMessage" short-description="Create Forex Gain/Loss Transaction"
                   use-transaction="true">

        <entity-one auto-field-map="true" entity-name="Invoice" use-cache="false" value-field="invoice"/>
        <if-compare field="invoice.invoiceTypeId" operator="not-equals" value="PURCHASE_INVOICE" type="String">
            <return/>
        </if-compare>
        <set field="partyAccountingPreferencesCallMap.organizationPartyId" from="invoice.partyId"/>
        <call-service break-on-error="true" error-code="error" in-map-name="partyAccountingPreferencesCallMap"
                      include-user-login="true"
                      require-new-transaction="false" service-name="getPartyAccountingPreferences"
                      success-code="success">
            <result-to-field field="partyAcctgPreference" result-name="partyAccountingPreference"/>
        </call-service>
        <!--
                                       Forex Gain / Loss Implementation
                                       if invoice amount > payment amount
                                       Debit Account payable,
                                       Credit Foreign exchange gain
                                       if invoice amount < payment amount
                                       Debit Foreign exchange loss,
                                       Credit Account payable
                               -->
        <set field="invoiceAmount" from="bsh:org.ofbiz.accounting.invoice.InvoiceWorker.getInvoiceTotal(invoice)"
             type="BigDecimal"/>
        <set field="paymentAmount" from="bsh:org.ofbiz.accounting.invoice.InvoiceWorker.getInvoiceApplied(invoice)"
             type="BigDecimal"/>
        <if-compare-field field="partyAcctgPreference.baseCurrencyUomId" operator="not-equals"
                          to-field="invoice.currencyUomId" type="String">
            <clear-field field="convertUomInMap"/>
            <set field="convertUomInMap.originalValue" from="invoiceAmount"/>
            <set field="convertUomInMap.uomId" from="invoice.currencyUomId"/>
            <set field="convertUomInMap.uomIdTo" from="partyAcctgPreference.baseCurrencyUomId"/>
            <set field="convertUomInMap.asOfDate" from="invoice.invoiceDate"/>
            <!-- TODO: set the optional asOfDate input parameter -->
            <call-service break-on-error="true" error-code="error" in-map-name="convertUomInMap"
                          include-user-login="true"
                          require-new-transaction="false"
                          service-name="convertUom" success-code="success">
                <result-to-field field="invoiceAmount" result-name="convertedValue"/>
            </call-service>
            <entity-condition entity-name="PaymentApplication" list="payments">
                <condition-expr field-name="invoiceId" from-field="invoice.invoiceId"></condition-expr>
            </entity-condition>
            <iterate list="payments" entry="paymentApplied">
                <clear-field field="convertUomInMap"/>
                <entity-one entity-name="Payment" value-field="payment">
                    <field-map field-name="paymentId" from-field="paymentApplied.paymentId"/>
                </entity-one>
                <set field="convertUomInMap.originalValue" from="paymentApplied.amountApplied"/>
                <set field="convertUomInMap.uomId" from="invoice.currencyUomId"/>
                <set field="convertUomInMap.uomIdTo" from="partyAcctgPreference.baseCurrencyUomId"/>
                <set field="convertUomInMap.asOfDate" from="payment.effectiveDate"/>
                <!-- TODO: set the optional asOfDate input parameter -->
                <call-service break-on-error="true" error-code="error" in-map-name="convertUomInMap"
                              include-user-login="true"
                              require-new-transaction="false"
                              service-name="convertUom" success-code="success">
                    <result-to-field field="paymentAmount" result-name="convertedValue"/>
                </call-service>
                <calculate field="totalPayment" type="BigDecimal">
                    <calcop operator="add">
                        <calcop operator="get" field="paymentAmount"/>
                        <calcop operator="get" field="totalPayment"/>
                    </calcop>
                </calculate>
            </iterate>
        </if-compare-field>
        <if>
            <condition>
                <if-compare-field field="invoiceAmount" operator="greater" to-field="totalPayment" type="BigDecimal"/>
            </condition>
            <then>
                <calculate field="gainAmount" type="BigDecimal">
                    <calcop operator="subtract">
                        <calcop operator="get" field="invoiceAmount"/>
                        <calcop operator="get" field="totalPayment"/>
                    </calcop>
                </calculate>

                <if-compare operator="greater" field="gainAmount" value="0" type="BigDecimal">

                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
                    <set field="debitEntry.organizationPartyId" from="invoice.partyId"/>
                    <set field="debitEntry.partyId" from="invoice.partyIdFrom"/>
                    <set field="debitEntry.roleTypeId" from="BILL_FROM_VENDOR"/>
                    <set field="debitEntry.origAmount" from="gainAmount"/>
                    <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>

                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.glAccountTypeId" value="FX_GAIN_ACCOUNT"/>
                    <set field="creditEntry.organizationPartyId" from="invoice.partyId"/>
                    <set field="creditEntry.origAmount" from="gainAmount"/>
                    <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>

                    <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
                    <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="FX_GAINLOSS_ACCTG"/>
                    <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                    <set field="createAcctgTransAndEntriesInMap.invoiceId" from="invoice.invoiceId"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                                  include-user-login="true"
                                  require-new-transaction="false" service-name="createAcctgTransAndEntries"
                                  success-code="success">
                        <result-to-field result-name="acctgTransId"/>
                    </call-service>
                </if-compare>
            </then>
        </if>
        <if>
            <condition>
                <if-compare-field field="totalPayment" operator="greater" to-field="invoiceAmount" type="BigDecimal"/>
            </condition>
            <then>
                <calculate field="lossAmount" type="BigDecimal">
                    <calcop operator="subtract">
                        <calcop operator="get" field="totalPayment"/>
                        <calcop operator="get" field="invoiceAmount"/>
                    </calcop>
                </calculate>
                <if-compare operator="greater" field="lossAmount" value="0" type="BigDecimal">
                    <make-value entity-name="AcctgTransEntry" value-field="creditEntry"/>
                    <set field="creditEntry.debitCreditFlag" value="C"/>
                    <set field="creditEntry.glAccountTypeId" value="ACCOUNTS_PAYABLE"/>
                    <set field="creditEntry.organizationPartyId" from="invoice.partyId"/>
                    <set field="creditEntry.partyId" from="invoice.partyIdFrom"/>
                    <set field="creditEntry.roleTypeId" from="BILL_FROM_VENDOR"/>
                    <set field="creditEntry.origAmount" from="lossAmount"/>
                    <set field="acctgTransEntries[]" from="creditEntry" type="Object"/>

                    <make-value entity-name="AcctgTransEntry" value-field="debitEntry"/>
                    <set field="debitEntry.debitCreditFlag" value="D"/>
                    <set field="debitEntry.glAccountTypeId" value="FX_LOSS_ACCOUNT"/>
                    <set field="debitEntry.organizationPartyId" from="invoice.partyId"/>
                    <set field="debitEntry.origAmount" from="lossAmount"/>
                    <set field="acctgTransEntries[]" from="debitEntry" type="Object"/>

                    <set field="createAcctgTransAndEntriesInMap.acctgTransEntries" from="acctgTransEntries"/>
                    <set field="createAcctgTransAndEntriesInMap.acctgTransTypeId" value="FX_GAINLOSS_ACCTG"/>
                    <set field="createAcctgTransAndEntriesInMap.glFiscalTypeId" value="ACTUAL"/>
                    <set field="createAcctgTransAndEntriesInMap.invoiceId" from="invoice.invoiceId"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="createAcctgTransAndEntriesInMap"
                                  include-user-login="true"
                                  require-new-transaction="false" service-name="createAcctgTransAndEntries"
                                  success-code="success">
                        <result-to-field result-name="acctgTransId"/>
                    </call-service>
                </if-compare>
            </then>
        </if>


        <field-to-result field="acctgTransId" result-name="acctgTransId"/>
        <!-- -->
    </simple-method>

</simple-methods>
