<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except 
	in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to 
	in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See 
	the License for the specific language governing permissions and limitations under the License. -->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">
    <!-- ========= Miscellaenous services for accounting ========= -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="createPartyAcctgPreference" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Create accounting preference settings for a party" use-transaction="true">
        <!-- permission checking is done in the services definition file (services_other.xml) -->
        <!-- check that the party is an INTERNAL_ORGANIZATION, as defined in PartyRole -->
        <set field="lookupParams.partyId" from="parameters.partyId" set-if-empty="true" set-if-null="false"/>
        <set field="lookupParams.roleTypeId" set-if-empty="true" set-if-null="false" value="INTERNAL_ORGANIZATIO"/>
        <find-by-primary-key entity-name="PartyRole" map="lookupParams" use-cache="true" value-field="partyRole"/>
        <if-empty field="partyRole">
            <add-error error-list-name="error_list">
                <fail-property property="AccountingPartyMustBeInternalOrganization" resource="AccountingUiLabels"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-empty>
        <!-- Does not check if the Party is actually a company because real people have to pay taxes too -->
        <!-- TODO: maybe check to make sure that all fields are not null -->
        <make-value entity-name="PartyAcctgPreference" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="false" method-name="getPartyAccountingPreferences" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Get the accounting preference settings for a party (organization)" use-transaction="true">
        <make-value entity-name="PartyAcctgPrefAndGroupAll" value-field="aggregatedPartyAcctgPref"/>
        <set field="currentOrganizationPartyId" from="parameters.organizationPartyId" set-if-empty="true" set-if-null="false"/>
        <set field="containsEmptyFields" set-if-empty="true" set-if-null="false" type="Boolean" value="true"/>
        <while>
            <condition>
                <and>
                    <not>
                        <if-empty field="currentOrganizationPartyId"/>
                    </not>
                    <if-compare field="containsEmptyFields" operator="equals" type="String" value="true"/>
                </and>
            </condition>
            <then>
                <clear-field field="parentPartyRelationship"/>
                <clear-field field="entityKey"/>
                <clear-field field="entityValue"/>
                <entity-one auto-field-map="true" entity-name="PartyAcctgPrefAndGroupAll" use-cache="false" value-field="currentPartyAcctgPref">
                    <field-map field-name="partyId" from-field="currentOrganizationPartyId"/>
                </entity-one>
                <set field="containsEmptyFields" set-if-empty="true" set-if-null="false" type="Boolean" value="false"/>
                <if-not-empty field="currentPartyAcctgPref">
                    <iterate-map key="entityKey" map="currentPartyAcctgPref" value="entityValue">
                        <if-empty field="aggregatedPartyAcctgPref.${entityKey}">
                            <if-not-empty field="entityValue">
                                <set field="aggregatedPartyAcctgPref.${entityKey}" from="entityValue" set-if-empty="true" set-if-null="false"/>
                                <else>
                                    <set field="containsEmptyFields" set-if-empty="true" set-if-null="false" type="Boolean" value="true"/>
                                </else>
                            </if-not-empty>
                        </if-empty>
                    </iterate-map>
                    <else>
                        <set field="containsEmptyFields" set-if-empty="true" set-if-null="false" type="Boolean" value="true"/>
                    </else>
                </if-not-empty>
                <entity-and entity-name="PartyRelationship" filter-by-date="true" list="parentPartyRelationships" use-cache="false">
                    <field-map field-name="partyIdTo" from-field="currentOrganizationPartyId"/>
                    <field-map field-name="partyRelationshipTypeId" value="GROUP_ROLLUP"/>
                    <field-map field-name="roleTypeIdFrom" value="_NA_"/>
                    <field-map field-name="roleTypeIdTo" value="_NA_"/>
                </entity-and>
                <if-not-empty field="parentPartyRelationships">
                    <first-from-list entry="parentPartyRelationship" list="parentPartyRelationships"/>
                    <set field="currentOrganizationPartyId" from="parentPartyRelationship.partyIdFrom" set-if-empty="true" set-if-null="false"/>
                    <else>
                        <clear-field field="currentOrganizationPartyId"/>
                    </else>
                </if-not-empty>
            </then>
        </while>
        <if-not-empty field="aggregatedPartyAcctgPref">
            <set field="aggregatedPartyAcctgPref.partyId" from="parameters.organizationPartyId" set-if-empty="true" set-if-null="false"/>
            <field-to-result field="aggregatedPartyAcctgPref" result-name="partyAccountingPreference"/>
        </if-not-empty>
    </simple-method>
    <!-- update currency conversion rates in the UomConversionDated entity -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="updateFXConversion" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Update Foreign Exchange conversion rate" use-transaction="true">
        <!-- set the FX rate changes as of now -->
        <if-empty field="parameters.asOfTimestamp">
            <now-timestamp field="nowTimestamp"/>
            <else>
                <set field="nowTimestamp" from="parameters.asOfTimestamp" set-if-empty="true" set-if-null="false"/>
            </else>
        </if-empty>
        <!-- find the existing exchange rates for this currency pair -->
        <entity-condition distinct="false" entity-name="UomConversionDated" filter-by-date="true" list="uomConversions" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="uomId" from-field="parameters.uomId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="uomIdTo" from-field="parameters.uomIdTo" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="purposeEnumId" from-field="parameters.purposeEnumId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="false" operator="equals"/>
            </condition-list>
        </entity-condition>
        <!-- expire all of them -->
        <iterate entry="uomConversion" list="uomConversions">
            <set field="uomConversion.thruDate" from="nowTimestamp" set-if-empty="true" set-if-null="false"/>
        </iterate>
        <store-list do-cache-clear="true" list="uomConversions"/>
        <!-- now create a new conversion relationship -->
        <set-service-fields map="parameters" service-name="createUomConversionDated" to-map="createParams"/>
        <if-empty field="parameters.fromDate">
            <set field="createParams.fromDate" from="nowTimestamp" set-if-empty="true" set-if-null="false"/>
        </if-empty>
        <call-service break-on-error="true" error-code="error" in-map-name="createParams" include-user-login="true" require-new-transaction="false" service-name="createUomConversionDated" success-code="success"/>
    </simple-method>
    <!-- Get currency conversion rates in the UomConversionDated entity -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="getFXConversion" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Get Foreign Exchange conversion rate" use-transaction="true">
        <if-empty field="parameters.asOfTimestamp">
            <now-timestamp field="asOfTimestamp"/>
            <else>
                <set field="asOfTimestamp" from="parameters.asOfTimestamp" set-if-empty="true" set-if-null="false"/>
            </else>
        </if-empty>
        <!-- find the existing exchange rates -->
        <entity-condition distinct="false" entity-name="UomConversionDated" filter-by-date="true" list="rates" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="uomId" from-field="parameters.uomId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="uomIdTo" from-field="parameters.uomIdTo" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="fromDate" from-field="asOfTimestamp" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="less-equals"/>
                <condition-list combine="or">
                    <condition-expr field-name="thruDate" from-field="asOfTimestamp" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="greater-equals"/>
                    <condition-expr field-name="thruDate" from-field="nullField" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                </condition-list>
            </condition-list>
            <order-by field-name="-fromDate"/>
        </entity-condition>
        <set field="conversionRate" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
        <if-not-empty field="rates">
            <set field="conversionFactor" from="rates[0].conversionFactor" set-if-empty="true" set-if-null="false"/>
            <set field="originalValue" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
            <calculate decimal-scale="2" field="conversionRate" rounding-mode="HalfUp" type="BigDecimal">
                <calcop operator="divide">
                    <calcop field="originalValue" operator="get"/>
                    <calcop field="conversionFactor" operator="get"/>
                </calcop>
            </calculate>
            <else>
                <log level="error" message="Could not find conversion rate"/>
            </else>
        </if-not-empty>
        <field-to-result field="conversionRate" result-name="conversionRate"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="createPartyManufacPreference" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Create manufacturer preference settings for a party" use-transaction="true">
        <set field="lookupParams.partyId" from="parameters.partyId" set-if-empty="true" set-if-null="false"/>
        <set field="lookupParams.roleTypeId" set-if-empty="true" set-if-null="false" value="INTERNAL_ORGANIZATIO"/>
        <find-by-primary-key entity-name="PartyRole" map="lookupParams" use-cache="true" value-field="partyRole"/>
        <if-empty field="partyRole">
            <add-error error-list-name="error_list">
                <fail-property property="AccountingPartyMustBeInternalOrganization" resource="AccountingUiLabels"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-empty>
        <make-value entity-name="PartyMenufacturerUnit" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="createPaymentTdsType" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <make-value entity-name="PaymentTdsType" map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <if-empty field="tdsTypeId">
            <sequenced-id field="newEntity.tdsTypeId" get-long-only="false" sequence-name="PaymentTdsType"/>
        </if-empty>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <field-to-result field="newEntity.tdsTypeId" result-name="tdsTypeId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="updatePaymentTdsType" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="PaymentTdsType" use-cache="false" value-field="lookedUpEntity">
            <field-map field-name="tdsTypeId" from-field="parameters.tdsTypeId"/>
        </entity-one>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpEntity"/>
        <store-value do-cache-clear="true" value-field="lookedUpEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="createPaymentTdsGlAccount" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <make-value entity-name="PaymentTdsGlAccount" map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="removePaymentTdsGlAccount" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="PaymentTdsGlAccount" use-cache="false" value-field="lookedUpEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="lookedUpEntity"/>
        <remove-value do-cache-clear="true" value-field="lookedUpEntity"/>
    </simple-method>
    
    <simple-method  default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" 
    	event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" 
    	login-required="true" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true" method-name="createGlAccountGroupType">
    	<make-value entity-name="GlAccountGroupType" map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>
    
       <simple-method  default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" 
    	event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" 
    	login-required="true" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" 
    	service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" 
    	short-description="" use-transaction="true" method-name="updateGlAccountGroupType">
    	<entity-one auto-field-map="true" entity-name="GlAccountGroupType" use-cache="false" value-field="lookedUpEntity">
            <field-map field-name="glAccountGroupTypeId" from-field="parameters.glAccountGroupTypeId"/>
        </entity-one>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpEntity"/>
        <store-value do-cache-clear="true" value-field="lookedUpEntity"/>
    </simple-method>
    
    
    
     <simple-method  default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" 
    	event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" 
    	login-required="true" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage"
    	 service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description=""
    	 use-transaction="true" method-name="createGlAccountGroupMember">
    	<make-value entity-name="GlAccountGroupMember" map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>
    
     <simple-method  default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" 
    	event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" 
    	login-required="true" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage"
    	 service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description=""
    	 use-transaction="true" method-name="createGlAccountGroup">
    	<make-value entity-name="GlAccountGroup" map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <sequenced-id sequence-name="GlAccountGroup" field="newEntity.glAccountGroupId"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>
    
     <simple-method  default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" 
    	event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" 
    	login-required="true" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage"
    	 service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description=""
    	 use-transaction="true" method-name="updateGlAccountGroup">
    	<entity-one auto-field-map="true" entity-name="GlAccountGroup" use-cache="false" value-field="lookedUpEntity">
            <field-map field-name="glAccountGroupId" from-field="parameters.glAccountGroupId"/>
        </entity-one>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpEntity"/>
        <store-value do-cache-clear="true" value-field="lookedUpEntity"/>
    </simple-method>
    
    
     <simple-method  default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" 
    	event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" 
    	login-required="true" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage"
    	 service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description=""
    	 use-transaction="true" method-name="deleteGlAccountGroupMember">
    	<entity-one auto-field-map="true" entity-name="GlAccountGroupMember" use-cache="false" value-field="lookedUpEntity">
            <field-map field-name="glAccountId" from-field="parameters.glAccountId"/>
            <field-map field-name="glAccountGroupTypeId" from-field="parameters.glAccountGroupTypeId"/>
            <field-map field-name="glAccountGroupId" from-field="parameters.glAccountGroupId"/>
        </entity-one>
        <remove-value value-field="lookedUpEntity"/>
    </simple-method>
    
    
     <simple-method  default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" 
    	event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" 
    	login-required="true" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage"
    	 service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description=""
    	 use-transaction="true" method-name="updateGlAccountGroupMember">
    	 <log message="${parameters}" level="error"/>
    	<entity-one auto-field-map="true" entity-name="GlAccountGroupMember" use-cache="false" value-field="lookedUpEntity">
            <field-map field-name="glAccountId" from-field="parameters.glAccountId"/>
            <field-map field-name="glAccountGroupTypeId" from-field="parameters.glAccountGroupTypeId"/>
            <field-map field-name="glAccountGroupId" from-field="parameters.glAccountGroupId"/>
        </entity-one>
        <set-nonpk-fields value-field="lookedUpEntity" map="parameters"/>
        <log message="${lookedUpEntity}" level="error"/>
        <store-value value-field="lookedUpEntity" do-cache-clear="true"/>
    </simple-method>
    
</simple-methods>
