<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <simple-method method-name="commonGenericPermission" short-description="Main permission logic">
        <set field="primaryPermission" value="COMMON"/>
        <call-simple-method method-name="genericBasePermissionCheck" xml-resource="component://common/script/org/ofbiz/common/permission/CommonPermissionServices.xml"/>
    </simple-method>

    <simple-method method-name="createKeywordThesaurus" short-description="Create a KeywordThesaurus">
        <check-permission action="_CREATE" permission="CATALOG">
            <fail-property property="CommonGenericPermissionError" resource="CommonUiLabels"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="KeywordThesaurus" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <call-object-method method-name="toLowerCase" obj-field="newEntity.enteredKeyword" ret-field="newEntity.enteredKeyword"/>
        <call-object-method method-name="toLowerCase" obj-field="newEntity.alternateKeyword" ret-field="newEntity.alternateKeyword"/>
        <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="updateKeywordThesaurus" short-description="Update a KeywordThesaurus">
        <check-permission action="_UPDATE" permission="CATALOG">
            <fail-property property="CommonGenericPermissionError" resource="CommonUiLabels"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="KeywordThesaurus" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <store-value do-cache-clear="true" value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="deleteKeywordThesaurus" short-description="Delete a KeywordThesaurus">
        <check-permission action="_DELETE" permission="CATALOG">
            <fail-property property="CommonGenericPermissionError" resource="CommonUiLabels"/>
        </check-permission>
        <check-errors/>
        <make-value entity-name="KeywordThesaurus" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <remove-by-and do-cache-clear="true" entity-name="KeywordThesaurus" map="newEntity"/>
    </simple-method>
    <!-- Uom Conversion service -->

    <simple-method method-name="createUomConversionDated" short-description="Create a new dated UOM conversion entity">
        <make-value entity-name="UomConversionDated" value-field="newEntity"/>
        <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method login-required="false" method-name="convertUom" short-description="Convert UOM values">
        <!-- base case: if both uomIds are the same, return the original value -->
        <if-compare-field field="parameters.uomId" operator="equals" to-field="parameters.uomIdTo">
            <field-to-result field="parameters.originalValue" result-name="convertedValue"/>
            <return/>
        </if-compare-field>
        <if-empty field="parameters.asOfDate">
            <now-timestamp field="nowTimestamp"/>
            <set field="asOfDate" from="nowTimestamp"/>
            <else>
                <set field="asOfDate" from="parameters.asOfDate"/>
            </else>
        </if-empty>
        <!-- first try the regular UomConversion entity (no dates) -->
        <entity-one auto-field-map="true" entity-name="UomConversion" use-cache="true" value-field="uomConversion"/>
        <!-- if not found, try the dated uom conversion entity -->
        <if-empty field="uomConversion">
            <entity-condition distinct="false" entity-name="UomConversionDated" filter-by-date="false" list="uomConversions" use-cache="true">
                <condition-list combine="and">
                    <condition-expr field-name="uomId" from-field="parameters.uomId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    <condition-expr field-name="uomIdTo" from-field="parameters.uomIdTo" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    <condition-expr field-name="purposeEnumId" from-field="parameters.purposeEnumId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="false" operator="equals"/>
                    <condition-expr field-name="fromDate" from-field="asOfDate" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="less-equals"/>
                    <condition-list combine="or">
                        <condition-expr field-name="thruDate" from-field="asOfDate" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="greater-equals"/>
                        <condition-expr field-name="thruDate" from-field="nullField" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    </condition-list>
                </condition-list>
                <!-- sort by descending fromDate to get newest (biggest) first -->
                <order-by field-name="-fromDate"/>
            </entity-condition>
            <first-from-list entry="uomConversion" list="uomConversions"/>
            <!-- if no conversion found with specified purpose, try w/o purpose -->
            <if-empty field="uomConversion">
                <if-not-empty field="parameters.purposeEnumId">
                    <entity-condition distinct="false" entity-name="UomConversionDated" filter-by-date="false" list="uomConversions" use-cache="true">
                        <condition-list combine="and">
                            <condition-expr field-name="uomId" from-field="parameters.uomId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                            <condition-expr field-name="uomIdTo" from-field="parameters.uomIdTo" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                            <condition-expr field-name="fromDate" from-field="asOfDate" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="less-equals"/>
                            <condition-list combine="or">
                                <condition-expr field-name="thruDate" from-field="asOfDate" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="greater-equals"/>
                                <condition-expr field-name="thruDate" from-field="nullField" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                            </condition-list>
                        </condition-list>
                        <order-by field-name="-fromDate"/>
                    </entity-condition>
                    <first-from-list entry="uomConversion" list="uomConversions"/>
                </if-not-empty>
            </if-empty>
        </if-empty>
        <log level="error" message="${parameters.uomId} -> ${parameters.uomIdTo} ${parameters.asOfDate} --> using conversion factor =${uomConversion.conversionFactor}"/>
        <if-empty field="uomConversion">
            <!-- if still no uom conversion entity, then no conversion is possible -->
            <add-error>
                <fail-property property="CommonNoUomConversionFound" resource="CommonUiLabels"/>
            </add-error>
            <check-errors/>
            <else>
                <!-- Do custom conversion, if we have customMethodId -->
                <if-not-empty field="uomConversion.customMethodId">
                    <!-- custom conversion? -->
                    <log level="verbose" message="using custom conversion customMethodId=${uomConversion.customMethodId}"/>
                    <set-service-fields map="parameters" service-name="convertUomCustom" to-map="customParms"/>
                    <set field="customParms.uomConversion" from="uomConversion"/>
                    <call-service in-map-name="customParms" service-name="convertUomCustom">
                        <result-to-field result-name="convertedValue"/>
                    </call-service>
                    <else>
                        <!-- not custom conversion -->
                        <!-- do the conversion -->
                        <calculate decimal-scale="15" field="convertedValue" rounding-mode="HalfEven" type="BigDecimal">
                            <calcop operator="multiply">
                                <calcop field="parameters.originalValue" operator="get"/>
                                <calcop field="uomConversion.conversionFactor" operator="get"/>
                            </calcop>
                        </calculate>
                    </else>
                </if-not-empty>
                <!-- custom conversion? -->
                <!-- round result, if UomConversion[Dated] so specifies -->
                <set default="${parameters.defaultRoundingMode}" field="roundingMode" from="uomConversion.roundingMode"/>
                <set default="${parameters.defaultDecimalScale}" field="decimalScale" from="uomConversion.decimalScale"/>
                <if-not-empty field="roundingMode">
                    <calculate decimal-scale="${decimalScale}" field="roundedValue" rounding-mode="${roundingMode}" type="BigDecimal">
                        <calcop field="convertedValue" operator="get"/>
                    </calculate>
                    <set field="convertedValue" from="roundedValue"/>
                </if-not-empty>
            </else>
        </if-empty>
        <!-- no UomConversion or UomConversionDated found -->
        <!-- all done -->
        <field-to-result field="convertedValue"/>
        <log level="error" message="Uom conversion of [${parameters.originalValue}] from [${parameters.uomId}] to [${parameters.uomIdTo}] using conversion factor [${uomConversion.conversionFactor}], result is [${convertedValue}]"/>
    </simple-method>
    <!-- convertUomCustom: Dispatcher for calling Custom Method for UoM conversion -->

    <simple-method login-required="false" method-name="convertUomCustom" short-description="Convert UOM values using CustomMethod">
        <set field="customMethodId" from="parameters.uomConversion.customMethodId"/>
        <entity-one auto-field-map="true" entity-name="CustomMethod" use-cache="true" value-field="customMethod"/>
        <if-empty field="customMethod.customMethodName">
            <add-error>
                <fail-property property="CommonNoCustomMethodName" resource="CommonUiLabels"/>
            </add-error>
            <check-errors/>
            <else>
                <log level="verbose" message="calling custom method ${customMethod.customMethodName}"/>
                <set field="args.arguments" from="parameters"/>
                <call-service in-map-name="args" service-name="${customMethod.customMethodName}">
                    <result-to-result result-name="convertedValue"/>
                </call-service>
            </else>
        </if-empty>
    </simple-method>

    <simple-method method-name="getFileUploadProgressStatus" short-description="Look up progress made in File Upload process">
        <set field="uploadProgressListener" from="parameters.uploadProgressListener"/>
        <if-not-empty field="uploadProgressListener">
            <call-object-method method-name="getContentLength" obj-field="uploadProgressListener" ret-field="parameters.contentLength"/>
            <field-to-result field="parameters.contentLength" result-name="contentLength"/>
            <call-object-method method-name="getBytesRead" obj-field="uploadProgressListener" ret-field="parameters.bytesRead"/>
            <field-to-result field="parameters.bytesRead" result-name="bytesRead"/>
            <call-object-method method-name="hasStarted" obj-field="uploadProgressListener" ret-field="parameters.hasStarted"/>
            <field-to-result field="parameters.hasStarted" result-name="hasStarted"/>
            <call-bsh><![CDATA[
                contentLength = parameters.get("contentLength");
                bytesRead = parameters.get("bytesRead");
                int readPercent = (bytesRead* 100)/contentLength;
                parameters.put("readPercent", readPercent);
            ]]></call-bsh>
            <field-to-result field="parameters.readPercent" result-name="readPercent"/>
            <field-to-result field="parameters.hasStarted" result-name="hasStarted"/>
        </if-not-empty>
    </simple-method>

    <simple-method login-required="false" method-name="getVisualThemeResources" short-description="Get visual theme resources">
        <set field="visualThemeId" from-field="parameters.visualThemeId"/>
        <set field="themeResources" from-field="parameters.themeResources"/>
        <entity-condition distinct="false" entity-name="VisualThemeResource" filter-by-date="false" list="resourceList" use-cache="true">
            <condition-expr field-name="visualThemeId" from-field="visualThemeId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            <order-by field-name="resourceTypeEnumId"/>
            <order-by field-name="sequenceId"/>
        </entity-condition>
        <if-empty field="resourceList">
            <!-- if not found use the good old initial ofbiz theme so the system will at least start up and will be usable -->
            <log level="error" message="Could not find the '${visualThemeId}' theme, reverting back to the good old OFBiz theme..."/>
            <entity-condition distinct="false" entity-name="VisualThemeResource" filter-by-date="false" list="resourceList" use-cache="true">
                <condition-expr field-name="visualThemeId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals" value="FLAT_GREY"/>
                <order-by field-name="resourceTypeEnumId"/>
                <order-by field-name="sequenceId"/>
            </entity-condition>
        </if-empty>
        <if-empty field="resourceList">
            <add-error>
                <fail-property property="CommonVisualThemeResourcesNotFound" resource="CommonUiLabels"/>
            </add-error>
            <check-errors/>
        </if-empty>
        <iterate entry="resourceRecord" list="resourceList">
            <set field="resourceTypeEnumId" from-field="resourceRecord.resourceTypeEnumId"/>
            <set field="resourceValue" from-field="resourceRecord.resourceValue"/>
            <if-empty field="resourceValue">
                <property-to-field field="warningMsg" no-locale="false" property="CommonVisualThemeInvalidRecord" resource="CommonUiLabels"/>
                <log level="warning" message="${warningMsg}"/>
                <else>
                    <set field="themeResources[resourceTypeEnumId][]" from-field="resourceValue"/>
                </else>
            </if-empty>
        </iterate>
        <field-to-result field="themeResources"/>
    </simple-method>

    <simple-method method-name="updateNote" short-description="Update a note">
        <entity-one entity-name="NoteData" value-field="noteData">
            <field-map field-name="noteId" from-field="parameters.noteId"/>
        </entity-one>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="noteData"/>
        <store-value do-cache-clear="true" value-field="noteData"/>
        <field-to-result field="noteData.noteId" result-name="noteId"/>
    </simple-method>

    <simple-method login-required="false" method-name="getCountryList" short-description="Returns a list of country">
        <call-class-method class-name="org.ofbiz.common.CommonWorkers" method-name="getCountryList" ret-field="geoList">
            <field field="delegator" type="org.ofbiz.entity.Delegator"/>
        </call-class-method>
        <iterate entry="countryGeo" list="geoList">
            <set field="countryName" value="${countryGeo.geoName}: ${countryGeo.geoId}"/>
            <field-to-list field="countryName" list="countryList"/>
        </iterate>
        <field-to-result field="countryList"/>
    </simple-method>

    <simple-method login-required="false" method-name="getAssociatedStateList" short-description="set the state options for selected country">
        <set field="countryGeoId" from="parameters.countryGeoId"/>
        <set field="listOrderBy" from="parameters.listOrderBy"/>
        <call-class-method class-name="org.ofbiz.common.CommonWorkers" method-name="getAssociatedStateList" ret-field="geoList">
            <field field="delegator" type="org.ofbiz.entity.Delegator"/>
            <field field="countryGeoId" type="String"/>
            <field field="listOrderBy" type="String"/>
        </call-class-method>
        <iterate entry="stateGeo" list="geoList">
            <set field="stateName" value="${stateGeo.geoName}: ${stateGeo.geoId}"/>
            <field-to-list field="stateName" list="stateList"/>
        </iterate>
        <if-empty field="stateList">
            <property-to-field field="noOptions" no-locale="false" property="CommonNoStatesProvinces" resource="CommonUiLabels"/>
            <field-to-list field="noOptions" list="stateList"/>
        </if-empty>
        <field-to-result field="stateList"/>
    </simple-method>

    <simple-method method-name="linkGeos" short-description="Link Geos to another Geo">
        <entity-and distinct="false" entity-name="GeoAssoc" filter-by-date="false" list="geoAssocs" use-cache="false">
            <field-map field-name="geoId" from-field="parameters.geoId"/>
        </entity-and>
        <!-- Current list contains old values? -->
        <iterate entry="geoAssoc" list="geoAssocs">
            <if-compare-field field="parameters.geoIds" operator="contains" to-field="geoAssoc.geoIdTo">
                <!-- Yes, nothing to do, it already exists and we keep it -->
                <else>
                    <!-- Remove -->
                    <entity-one entity-name="GeoAssoc" value-field="oldGeoAssoc">
                        <field-map field-name="geoId" from-field="parameters.geoId"/>
                        <field-map field-name="geoIdTo" from-field="geoAssoc.geoIdTo"/>
                    </entity-one>
                    <remove-value do-cache-clear="true" value-field="oldGeoAssoc"/>
                </else>
            </if-compare-field>
        </iterate>
        <!-- Old list contains current values -->
        <iterate entry="geoIdTo" list="parameters.geoIds">
            <if-compare-field field="oldGeoIds" operator="contains" to-field="geoIdTo">
                <!-- Yes, nothing to do, it already exists and we keep it -->
                <else>
                    <entity-one entity-name="GeoAssoc" value-field="oldGeoAssoc">
                        <field-map field-name="geoId" from-field="parameters.geoId"/>
                        <field-map field-name="geoIdTo" from-field="geoIdTo"/>
                    </entity-one>
                    <if-empty field="oldGeoAssoc">
                        <!-- Add as it does not exist -->
                        <make-value entity-name="GeoAssoc" value-field="newGeoAssoc"/>
                        <set field="newGeoAssoc.geoId" from="parameters.geoId"/>
                        <set field="newGeoAssoc.geoIdTo" from="geoIdTo"/>
                        <set field="newGeoAssoc.geoAssocTypeId" from="parameters.geoAssocTypeId"/>
                        <create-value value-field="newGeoAssoc"/>
                    </if-empty>
                </else>
            </if-compare-field>
        </iterate>
        <check-errors/>
    </simple-method>

    <simple-method login-required="false" method-name="getRelatedGeos" short-description="get related geos to a geo through a geoAssoc">
        <entity-and distinct="false" entity-name="GeoAssoc" filter-by-date="false" list="geoAssoc" use-cache="false">
            <field-map field-name="geoId" from-field="parameters.geoId"/>
            <field-map field-name="geoAssocTypeId" from-field="parameters.geoAssocTypeId"/>
        </entity-and>
        <if-empty field="geoAssoc">
            <set field="noOptions" value="____"/>
            <field-to-list field="noOptions" list="geoList"/>
            <else>
                <iterate entry="geo" list="geoAssoc">
                    <field-to-list field="geo.geoIdTo" list="geoList"/>
                </iterate>
            </else>
        </if-empty>
        <field-to-result field="geoList"/>
    </simple-method>

    <simple-method method-name="checkUomConversion" short-description="Returns true if an UomConversion exists">
        <entity-one entity-name="UomConversion" value-field="uomConversion">
            <field-map field-name="uomId" from-field="parameters.uomId"/>
            <field-map field-name="uomIdTo" from-field="parameters.uomIdTo"/>
        </entity-one>
        <if-not-empty field="uomConversion">
            <set field="exist" type="Boolean" value="true"/>
            <else>
                <set field="exist" type="Boolean" value="false"/>
            </else>
        </if-not-empty>
        <field-to-result field="exist"/>
    </simple-method>
</simple-methods>
