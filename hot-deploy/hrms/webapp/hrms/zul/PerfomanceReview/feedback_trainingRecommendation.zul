<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk>
	<window title="${c:l('HRMS_PROVIDE_FEEDBACK_AND_TRAINING') }" border="normal"
		id="feedbackAndtrainingRec" self="@{define(content)}" apply=""
		width="600px" maximizable="true" closable="true">
		<div align="center">
			<vbox>
				<label value="${c:l('FormFieldTitle_trainingType') }" />
				<listbox id="listboxTrainingType" mold="select"
					disabled="true" />
				<zscript><![CDATA[
	import org.ofbiz.entity.GenericDelegator;
	import org.ofbiz.entity.GenericValue;
	import org.zkoss.zk.ui.Executions;
	import org.ofbiz.entity.condition.EntityCondition;
	import org.ofbiz.entity.GenericEntityException;
	import org.ofbiz.entity.condition.EntityExpr;
	GenericValue userLogin = (GenericValue) Executions.getCurrent().getDesktop().getSession().getAttribute("userLogin");

	boolean isManager = security.hasPermission("HUMANRES_MGR", userLogin);

	GenericDelegator delegator1 = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
	String reviewId = (String) Executions.getCurrent().getArg().get(0);
	String reviewerId = (String) Executions.getCurrent().getArg().get(1);
	if (org.ofbiz.base.util.UtilValidate.isEmpty(reviewerId)) {
		reviewerId = userLogin.getString("partyId");
	}
	List trainingClassTypeList = delegator1.findList("TrainingClassType", null, null, null, null, false);
	//trainingClassTypeList.add(0,null);
	List findTrainingClassType = delegator1.findByAnd("EmplPerfTraining",
			org.ofbiz.base.util.UtilMisc.toMap("emplPerfReviewId", reviewId, "reviewerId", reviewerId));
	for (int c = 0; c < trainingClassTypeList.size(); c++) {
		GenericValue trainingClassId = (GenericValue) trainingClassTypeList.get(c);
		if (trainingClassId == null) {
			listboxTrainingType.appendItemApi(null, null);
		} else {
			String value = trainingClassId.getString("trainingClassTypeId");
			String label = trainingClassId.getString("description");
			listboxTrainingType.appendItemApi(label, value);
			if (!(org.ofbiz.base.util.UtilValidate.isEmpty(findTrainingClassType))) {
				GenericValue findTrainingClassTypeGV = (GenericValue) findTrainingClassType.get(0);
				if (value.equals(findTrainingClassTypeGV.getString("trainingClassTypeId"))) {
					listboxTrainingType.setSelectedIndex(c);
				}
			}
		}
	}
]]></zscript>
				<label value="${c:l('HRMS_TRAINING_DESCRIPTION') }" />
				<textbox width="500px" height="60px"
					id="trainingDescriptionTextBox" multiline="true" readonly="true" />
				<label value="Feedback" />
				<textbox width="500px" height="60px"
					id="feedbackTextBox" multiline="true" readonly="true" />
				<zscript>
	String trainingId = new String();
	if (!(org.ofbiz.base.util.UtilValidate.isEmpty(findTrainingClassType))) {
		GenericValue findTrainingClassTypeGV = (GenericValue) findTrainingClassType.get(0);

		String trainingDescription = findTrainingClassTypeGV.getString("comments");
		trainingId = findTrainingClassTypeGV.getString("trainingId");
		trainingDescriptionTextBox.setValue(trainingDescription);
		String feedback = findTrainingClassTypeGV.getString("feedback");
		feedbackTextBox.setValue(feedback);
	}
	org.ofbiz.security.Security security = requestScope.get("security");
	boolean isManager = security.hasPermission("HUMANRES_MGR", userLogin);
	if (isManager) {
		listboxTrainingType.setDisabled(false);
		trainingDescriptionTextBox.setReadonly(false);
		feedbackTextBox.setReadonly(false);
	}
</zscript>
			</vbox>
		</div>
		<div align="center">
			<hbox>
				<button id="feedbackAndtrainingSaveButton" label="${c:l('btnSave') }"
					onClick="feedbackAndtrainingSaveButton();" visible="${isManager}" />
				<button id="feedbackAndtrainingCancelButton"
					label="${c:l('ButtonCancel') }" onClick="feedbackAndtrainingRec.detach();" />
			</hbox>
		</div>
		<zscript><![CDATA[
	import org.ofbiz.entity.GenericDelegator;
	import org.ofbiz.entity.GenericValue;
	import org.zkoss.zk.ui.Executions;
	import org.ofbiz.entity.GenericEntityException;
	import org.ofbiz.entity.condition.EntityCondition;
	import org.ofbiz.entity.condition.EntityExpr;
	void feedbackAndtrainingSaveButton() throws GenericEntityException {
		String trainingClassTypeId = null;
		GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");

		String managerId = (String) userLogin.get("partyId");
		if (org.ofbiz.base.util.UtilValidate.isEmpty(trainingId)) {
			trainingId = delegator.getNextSeqId("trainingId");
		}
		EntityCondition condition = EntityCondition.makeCondition("emplPerfReviewId", org.ofbiz.entity.condition.EntityOperator.EQUALS, reviewId);
		List findEmployeePartyId = delegator.findList("EmplPerfReview", condition, null, null, null, false);
		GenericValue employeePartyIdGV = (GenericValue) findEmployeePartyId.get(0);
		String employeePartyId = employeePartyIdGV.getString("partyId");
		String trainingDescription = trainingDescriptionTextBox.getValue();
		Listitem trainingType = (Listitem) listboxTrainingType.getSelectedItem();
		if (trainingType != null) {
			trainingClassTypeId = (String) trainingType.getValue();
		}
		String feedback = feedbackTextBox.getValue();
		HashMap getPerfReviewTraining = new HashMap();
		GenericValue putPerfReviewTraining = null;
		getPerfReviewTraining.put("reviewerId", managerId);
		getPerfReviewTraining.put("partyId", employeePartyId);
		getPerfReviewTraining.put("emplPerfReviewId", reviewId);
		getPerfReviewTraining.put("trainingId", trainingId);
		getPerfReviewTraining.put("trainingClassTypeId", trainingClassTypeId);
		getPerfReviewTraining.put("comments", trainingDescription);
		getPerfReviewTraining.put("feedback", feedback);
		try {
			putPerfReviewTraining = (GenericValue) delegator.makeValue("EmplPerfTraining", getPerfReviewTraining);
			delegator.createOrStore(putPerfReviewTraining);
		} catch (GenericEntityException e) {
			e.printStackTrace();
		}
		Messagebox.show(org.zkoss.util.resource.Labels.getLabel("MessageDescription_SavedSuccessfully"), "Success", 1, null);
		feedbackAndtrainingRec.detach();
	}
]]>
	</zscript>

	</window>
</zk>