<?component name="positionTypebox" macroURI="../macros/textfindMacro.zul" id="macro2"?>
<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk>
	<zscript>
	<![CDATA[
	import org.ofbiz.entity.*;
	import org.ofbiz.entity.condition.*;
	import org.ofbiz.base.util.*;
	import org.zkoss.zul.*;
	import org.zkoss.util.resource.Labels;
	GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
	String partyId = (String) Executions.getCurrent().getArg().get("partyId");
	Div div = (Div) Executions.getCurrent().getArg().get("window");
	GenericValue postionGv = null;
	String positionId = null;
	String positionType = null;
	String departmentName = null;
	String joiningDate = null;
	String joiningDateInOrg = null;
	String confirmDate = null;
	
	String positionCategory=null;
	String adminStatus=null;

	String departmentNameForPosition = null;
	List emplPositionTypeList = null;
	GenericValue emplPositionTypeGv = null;
	java.sql.Timestamp joiningDateType = null;
	java.sql.Timestamp confirmationDateType = null;
	postionGv = org.ofbiz.humanresext.util.HumanResUtil.getEmplPositionForParty(partyId, delegator);
	if (postionGv != null) {
		positionId = (String) postionGv.getString("emplPositionId");
		
	}
	emplPositionTypeList = delegator.findByAnd("EmplPosition",org.ofbiz.base.util.UtilMisc.toMap("emplPositionId", positionId));

	if (emplPositionTypeList.size() > 0) {
		emplPositionTypeGv = org.ofbiz.entity.util.EntityUtil.getFirst(emplPositionTypeList);
		positionType = (String) emplPositionTypeGv.getString("emplPositionTypeId");
		departmentName = (String) emplPositionTypeGv.getString("partyId");
		
	}
	
	 List emplPositionTypeList1 = null;
     	
     emplPositionTypeList1 = delegator.findByAnd("DepartmentPosition", UtilMisc.toMap("departmentId",departmentName));

     GenericValue emplPositionTypeList1Gv = org.ofbiz.entity.util.EntityUtil.getFirst(emplPositionTypeList1);
     departmentNameForPosition=emplPositionTypeList1Gv!=null? emplPositionTypeList1Gv.getString("departmentName"):"";
     
     List employmentList =null;
     String roleTypeIdFrom = null;
     String roleTypeIdTo = null;
     String partyIdFrom = null;
     String partyIdTo = null;
 	employmentList= delegator.findByAnd("Employment",org.ofbiz.base.util.UtilMisc.toMap("partyIdTo",partyId,"thru_date",null));
 	GenericValue employmentGv = org.ofbiz.entity.util.EntityUtil.getFirst(employmentList);
 	if(employmentGv != null){
 	roleTypeIdFrom = (String) employmentGv.getString("roleTypeIdFrom");
 	roleTypeIdTo = (String) employmentGv.getString("roleTypeIdTo");
 	partyIdFrom = (String) employmentGv.getString("partyIdFrom");
 	partyIdTo = (String) employmentGv.getString("partyIdTo");
 	joiningDateType = employmentGv.getTimestamp("fromDate");
 	java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("dd-MM-yyyy");
 	if(joiningDateType != null){
 	joiningDate = format.format(joiningDateType);
 	}
 	confirmationDateType = employmentGv.getTimestamp("confirmationDate");
 	java.text.SimpleDateFormat format1 = new java.text.SimpleDateFormat("dd-MM-yyyy");
 	if(confirmationDateType != null){
 	confirmDate = format1.format(confirmationDateType);
 	}
 	}
	
 	List allEmploymentList =null;
	allEmploymentList= delegator.findByAnd("Employment",org.ofbiz.base.util.UtilMisc.toMap("partyIdTo",partyId));
	java.sql.Timestamp joinedDate = new java.sql.Timestamp(new Date().getTime());
	for(Object obj : allEmploymentList){
		GenericValue gv = (GenericValue) obj;
		java.sql.Timestamp joiningDateType = gv.getTimestamp("fromDate");
		if(joiningDateType.before(joinedDate)){
			joinedDate = joiningDateType;
		}
	}

	java.text.SimpleDateFormat formatJoiningDate = new java.text.SimpleDateFormat("dd-MM-yyyy");
	joiningDateInOrg= formatJoiningDate.format(joinedDate);
 	
	List departments = delegator.findByAnd("PartyRelationship", UtilMisc.toMap("partyIdFrom", "Company", "partyRelationshipTypeId","GROUP_ROLLUP"));
	departments.add(0, null);
	departmentsArray = departments.toArray(new GenericValue[departments.size()]);
	SimpleListModel departmentList = new SimpleListModel(departmentsArray);
	public class DepartmentItemRenderer implements ListitemRenderer {

		public DepartmentItemRenderer() {
		}

		public void render(Listitem li, Object data) {
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("partyIdTo"));
				li.setValue(val.getString("partyIdTo"));
				if (departmentName.equals(val.getString("partyIdTo"))) {
					li.setSelected(true);
				}
			}
		}
	}
	ListitemRenderer departmentItemRenderer = new DepartmentItemRenderer();
	
	List positionTypeList = delegator.findList("EmplPositionType", null, null,null, null, false);
	positionTypeList.add(0, null);
	positionTypeListArray = positionTypeList.toArray(new GenericValue[positionTypeList.size()]);
	SimpleListModel positionTypeModel = new SimpleListModel(positionTypeListArray);
	public class PositionTypeItemRenderer implements ListitemRenderer {

		public PositionTypeItemRenderer() {
		}

		public void render(Listitem li, Object data) {
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("description"));
				li.setValue(val.getString("emplPositionTypeId"));
				if (positionType.equals(val.getString("emplPositionTypeId"))) {
					li.setSelected(true);
				}
			}
		}
	}
	ListitemRenderer positionTypeItemRenderer = new PositionTypeItemRenderer();

	
	List departmentNameList = delegator.findList("DepartmentPosition",null,null,null,null,false);
	departmentNameList.add(0,null);
	departmentNameListArray = departmentNameList.toArray(new GenericValue[departmentNameList.size()]);
	SimpleListModel departmentNameModel = new SimpleListModel(departmentNameListArray);
	public class DepartmentNameItemRenderer implements ListitemRenderer{
		public DepartmentNameItemRenderer(){
			}
		public void render(Listitem li, Object data){
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("departmentName"));
				li.setValue(val.getString("departmentId"));
				if (departmentName.equals(val.getString("departmentId"))) {
					li.setSelected(true);
				}
		}
	}
	}
	ListitemRenderer departmentNameItemRenderer = new DepartmentNameItemRenderer();
	
	com.ndz.controller.SearchController controller = new com.ndz.controller.SearchController();
	com.ndz.zkoss.GenericValueRenderer listItemRenderer = new com.ndz.zkoss.GenericValueRenderer(
			new String[] { "emplPositionId", "partyId", "statusId",	"emplPositionTypeId" });
	com.ndz.controller.UpdateEmployeeProfileController updateEmployeeProfileController = new com.ndz.controller.UpdateEmployeeProfileController();
]]>
</zscript>
	<window border="normal" width="35%" height="40%" closable="true"
		id="editPositionFulfillmentWindow" maximizable="true">
		<caption label="${c:l('HRMS_EDIT_POSITION_FULFILLMENT') }"></caption>
		<separator height="10px"></separator>
		<textbox id="employeeId" value="${partyId}" visible="false"></textbox>
		<hbox>
			<div align="right" width="150px">
				<label value="${c:l('HRMS_POSITIONID') }"></label>
			</div>
			<div align="left">
				<label value="${positionId}" visible="true"></label>
				<bandbox id="searchPanel" apply="${controller}"
					value="${positionId}" readonly="true" style="background:none" visible="false">
					<custom-attributes entityName="EmplPosition"
						companyWide="true">
					</custom-attributes>

					<bandpopup width="550px">
						<vbox>
							<hbox>
								<positionTypebox
									fieldLabel="${c:l('HumanResEditEmplPositionType') }"
									name="emplPositionTypeId" type="text" cols="18" />
							</hbox>
							<hbox>

							</hbox>
							<button mold="os"
								label="${c:l('HumanResSearch') }" id="searchPerCompany"
								autodisable="self" />
						</vbox>
						<paging id="paging" width="550px" />
						<listbox id="dataGrid"
							itemRenderer="${listItemRenderer}" width="550px"
							onSelect="searchPanel.value=self.selectedItem.label; searchPanel.close();">
							<listhead>
								<listheader
									label="${c:l('Hrms_PositionId') }" />
								<listheader
									label="${c:l('HRMS_DEPARTMENT_NAME') }" />
								<listheader
									label="${c:l('HumanResPerfReviewStatus') }" />
								<listheader
									label="${c:l('HumanResEmplPositionType') }" />
							</listhead>
						</listbox>
					</bandpopup>
				</bandbox>
				<textbox value="${positionId}" visible="false"
					id="emplPositionId" />
			</div>
		</hbox>
		<separator></separator>
		<hbox>
			<div align="right" width="150px">
				<label value="${c:l('HRMS_DEPARTMENT_NAME') }"></label>
				<label value="*" style="color:red"/>
			</div>
			<div align="left">
				<listbox id="departmentName" model="${departmentNameModel}"
					itemRenderer="${departmentNameItemRenderer}" mold="select" onSelect="Clients.closeErrorBox(self)" />
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="150px">
				<label value="${c:l('HRMS_JOINING_DATE') }"></label>
			</div>
			<div align="left">
			<label id="joiningDate" value="${joiningDateInOrg}"></label>
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="150px">
				<label value="${c:l('HRMS_CONFIRMATION_DATE') }"></label>
			</div>
			<div align="left">
				<datebox name="confirmDate"  id="confirmationDate" buttonVisible="true" width="120px" visible="${confirmationDateType == null}"/>
				<label value="${confirmDate}" visible="${confirmationDateType != null}"/>
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="150px">
				<label value="${c:l('HRMS_POSITIONTYPE') }"/>
				<label value="*" style="color:red"/>
			</div>
			<div align="left">
				<listbox id="positionType" model="${positionTypeModel}"
					itemRenderer="${positionTypeItemRenderer}" mold="select" onSelect="Clients.closeErrorBox(self)" />
			</div>
		</hbox>
		<separator />
		<zscript>
		<![CDATA[
	import org.zkoss.zul.*;
	Toolbarbutton toolBarBtn = (Toolbarbutton) div
			.getFellow("positionFullfillmentBtn");
	void validate(){
		if(searchPanel.getValue().equals("")){
			throw new WrongValueException(searchPanel,Labels.getLabel("HRMS_REQUIRED_POSITION_ID"));
		}
		if(com.ndz.zkoss.HrmsUtil.listboxValidation(positionType)){
			throw new WrongValueException(positionType,Labels.getLabel("HRMS_REQUIRED_POSITION_TYPE"));
		}
		if(com.ndz.zkoss.HrmsUtil.listboxValidation(departmentName)){
			throw new WrongValueException(departmentName,"Department Name Required");
		}
		
	}
	void validateConfirmationDate() {
		if (confirmationDate.getValue() == null) {
			throw new WrongValueException(confirmationDate,Labels.getLabel("HRMS_EPFD_REQUIRED_CONFIRMATION_DATE"));
		}
		java.sql.Timestamp cofirmationDateInTimeStamp = new java.sql.Timestamp(confirmationDate.getValue().getTime());	
		if(joiningDateType.after(cofirmationDateInTimeStamp)){
			throw new WrongValueException(confirmationDate,Labels.getLabel("HRMS_EPFD_CONFIRMATION_DATE_CANNOT_BE_BEFORE_JOINING_DATE"));
		}
	}
]]>
		</zscript>
		<separator />
		<div align="right" width="415px">
			<hbox>
				<button id="update" label="${c:l('btnSave') }"
					onClick='validate();com.ndz.controller.UpdateEmployeeProfileController.updatePositionFulfillment(event);Events.postEvent("onClick",toolBarBtn,null);editPositionFulfillmentWindow.detach()'>
				</button>
				<button label="${c:l('HRMS_CONFIRM_EMPLOYMENT') }" disabled="${confirmationDateType !=null}" onClick='validateConfirmationDate();updateEmployeeProfileController.updateConfirmationDate(editPositionFulfillmentWindow,toolBarBtn);'>
				</button>
				<button id="cancel" label="${c:l('ButtonCancel') }"
					onClick="editPositionFulfillmentWindow.detach()">
				</button>
			</hbox>
		</div>
	</window>
</zk>