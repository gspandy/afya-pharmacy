<?component name="findbox" macroURI="../macros/findbox.zul" id="macro1"?>
<?component name="fromDatebox" macroURI="../macros/datefindMacro.zul" id="macro2"?>
<?component name="thruDatebox" macroURI="../macros/datefindMacro.zul" id="macro3"?>
<?component name="selectbox" macroURI="../macros/findselectbox.zul" id="macro4"?>
<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<?page title="HRMS-Position Reporting Structure" id="leavemgmt"?>
<zk xmlns:h="http://www.zkoss.org/2005/zk/native">
	<zscript>
		import com.ndz.controller.*;
		Button reportingStructBtn = arg.get("reportingStructBtn");
		SearchController controller = new SearchController();
	</zscript>
	<window id="searchPanel" apply="${controller}">
		<custom-attributes entityName="EmplPositionReportingStruct"></custom-attributes>
		<textbox id="emplPositionIdReportingTo_1adminfld" visible="false" />
		<textbox id="emplPositionIdManagedBy_1adminfld" visible="false" />
		<separator height="10px"></separator>
		<h:table width="100%">
			<h:tr>
				<h:td style="text-align:right">
					<label value="${c:l('HRMS_EmployeeId') }" />
				</h:td>
				<h:td style="text-align:left">
					<employeebox onChange="setEmployeePosId(self.value)" />
				</h:td>
				<h:td style="text-align:right">
					<label value="${c:l('HRMS_MANAGER_ID') }" />
				</h:td>
				<h:td>
					<managerbox onChange="setManagerPosId(self.value)" />
				</h:td>
			</h:tr>
			<h:tr>
				<h:td width="50%" colspan="2">
					<fromDatebox fieldLabel="${c:l('HumanResLeaveSummaryFromDate') }" name="fromDate" type="date" />
				</h:td>
				<h:td width="50%" colspan="2">
					<thruDatebox fieldLabel="${c:l('HumanResLeaveSummaryThruDate') }" name="thruDate" type="date" />
				</h:td>
			</h:tr>
		</h:table>
		<zscript>
			<![CDATA[
				import org.ofbiz.entity.*;
				GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
				void setEmployeePosId(String employeeId) {
					GenericValue emplPosGv = HumanResUtil.getEmplPositionForParty(employeeId, delegator);
					String emplPosId = emplPosGv == null ? null : emplPosGv.getString("emplPositionId");
					emplPositionIdManagedBy_1adminfld.setValue(emplPosId);
				}
				void setManagerPosId(String managerId) {
					GenericValue emplPosGv = HumanResUtil.getEmplPositionForParty(managerId, delegator);
					String emplPosId = emplPosGv == null ? null : emplPosGv.getString("emplPositionId");
					emplPositionIdReportingTo_1adminfld.setValue(emplPosId);
				}
			]]>
		</zscript>
		<box width="100%" height="30px" align="center">
			<hbox>
				<button label="${c:l('HRMS_SearchButton') }" mold="os" id="searchPerCompany"
					onClick="results.setVisible(true);results.setFocus(true)">
				</button>
				<button label="${c:l('HRMS_ResetButton') }" onClick='Events.postEvent("onClick",reportingStructBtn,null)' />
			</hbox>
		</box>
		<zscript>
			<![CDATA[
				import org.zkoss.util.resource.Labels;
				import org.ofbiz.base.util.*;
				import org.zkoss.zk.ui.event.EventListener;
				import org.ofbiz.humanresext.util.HumanResUtil;
				import org.ofbiz.entity.*;
				class MyRowRenderer implements RowRenderer {
			
					MyRowRenderer() {
					}
			
					public void render(Row row, Object data) {
						row.setTooltiptext(Labels.getLabel("HRMS_DOUBLE_CLICK_TO_EDIT/UPDATE"));
						GenericValue gv = ((GenericValue) data);
						GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
						String managerPartyId = null;
						String managerPositionId = null;
						String managerName = null;
						String employeePartyId = null;
						String employeePositionId = null;
						String employeeName = null;
						GenericValue person = null;
						
						List positionFulfillmentList = delegator.findByAnd("EmplPositionFulfillment",
								org.ofbiz.base.util.UtilMisc.toMap("emplPositionId",gv.getString("emplPositionIdManagedBy")));
						if(positionFulfillmentList.size()<=0){
							row.setVisible(false);
						}
						if (gv.getString("emplPositionIdReportingTo") != null) {
							managerPositionId = gv.getString("emplPositionIdReportingTo");
							managerPartyId = HumanResUtil.getPartyIdForPositionId(managerPositionId, delegator);
							if (managerPartyId != null) {
								person = delegator.findByPrimaryKey("Person", UtilMisc.toMap("partyId", managerPartyId));
								if (person != null) {
									managerName = person.getString("firstName") + " " + person.getString("lastName");
									new Label(managerName).setParent(row);
								} else {
									new Label(" ").setParent(row);
								}
							} else {
								new Label(" ").setParent(row);
							}
						} else {
							new Label(" ").setParent(row);
						}
						if (gv.getString("emplPositionIdReportingTo") != null) {
							new Label(managerPartyId).setParent(row);
						} else {
							new Label(" ").setParent(row);
						}
						if (gv.getString("emplPositionIdManagedBy") != null) {
							employeePositionId = gv.getString("emplPositionIdManagedBy");
							employeePartyId = HumanResUtil.getPartyIdForPositionId(employeePositionId, delegator);
							if (employeePartyId != null) {
								person = delegator.findByPrimaryKey("Person", UtilMisc.toMap("partyId", employeePartyId));
								if (person != null) {
									employeeName = person.getString("firstName") + " " + person.getString("lastName");
									new Label(employeeName).setParent(row);
								} else {
									new Label("").setParent(row);
								}
							} else {
								new Label(" ").setParent(row);
							}
						} else {
							new Label(" ").setParent(row);
						}
						if (gv.getString("emplPositionIdManagedBy") != null) {
							new Label(employeePartyId).setParent(row);
						} else {
							new Label(" ").setParent(row);
						}
						if (gv.getTimestamp("fromDate") != null) {
							new Label(UtilDateTime.formatDate(new Date(gv.getTimestamp("fromDate").getTime()))).setParent(row);
						} else {
							new Label(" ").setParent(row);
						}
						if (gv.getTimestamp("thruDate") != null) {
							new Label(UtilDateTime.formatDate(new Date(gv.getTimestamp("thruDate").getTime()))).setParent(row);
						} else {
							new Label(" ").setParent(row);
						}
						Button btn = new com.ndz.zkoss.HrmsButton();
						btn.setParent(row);
						btn.setLabel(Labels.getLabel("ButtonDelete"));
						btn.setTooltiptext(Labels.getLabel("ToolTipText_DoubleClickToDelete"));
						btn.setSclass("btnDelete");
						Map arg = new HashMap();
						arg.put("gv", gv);
						row.addEventListener(Events.ON_DOUBLE_CLICK, new EventListener() {
							public void onEvent(Event event) throws Exception {
								Window win = (Window) Executions.createComponents("/zul/employeeRequisition/editReportingStructure.zul", null, arg);
								win.doModal();
							}
						});
						btn.addEventListener("onClick", new EventListener() {
							public void onEvent(Event event) throws Exception {
								Messagebox.show(Labels.getLabel("HRMS_DO_YOU_WANT_TO_DELETE_THIS_RECORD_WARNING_MSG"), "Warning", Messagebox.YES | Messagebox.NO, Messagebox.QUESTION,
									new org.zkoss.zk.ui.event.EventListener() {
										public void onEvent(Event evt) {
											if ("onYes".equals(evt.getName())) {
												EmployeeRequisitionController.deleteReportingStruct(event, gv);
												Events.postEvent("onClick", searchPerCompany, null);
											}
										}
									});
							}
						});
					}
				}
				RowRenderer tableRenderer = new MyRowRenderer();
			]]>
		</zscript>
		<separator />
		<div id="results" visible="false">
			<h:table style="border:0px" cellspacing="0px" cellpadding="0px">
				<h:tr>
					<h:td width="90%">
						<label value="${c:l('HRMS_SEARCHRESULTS') }"></label>
					</h:td>
					<h:td width="10%" style="text-align:right">
						<paging id="paging" />
					</h:td>
				</h:tr>
			</h:table>

			<grid id="dataGrid" rowRenderer="${tableRenderer}">
				<columns menupopup="auto">
					<column label="${c:l('HRMS_MANAGER_NAME') }" onDrop="move(event.dragged)" draggable="col" droppable="col" sortDirection="ascending" />
					<column label="${c:l('HRMS_MANAGER_ID') }" onDrop="move(event.dragged)" draggable="col" droppable="col" sortDirection="ascending" />
					<column label="${c:l('Hrms_EmployeeName') }" onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_EmployeeId') }" onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('HRMS_FROMDATE') }" onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('HRMS_THRUDATE') }" onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('HRMS_ACTION') }" onDrop="move(event.dragged)" draggable="col" droppable="col" />
				</columns>
			</grid>
		</div>
		<zscript>
			<![CDATA[
				Events.postEvent("onClick", searchPerCompany, null);
				void move(Component dragged) {
					if (dragged.getClass().getName().endsWith("Column")) {
						int maxRows = dragged.getGrid().getRows().getChildren().size();
						int i = dragged.getParent().getChildren().indexOf(dragged);
						int j = self.getParent().getChildren().indexOf(self);
			
						//move celles for each row 
						for (int k = 0; k < maxRows; k++)
							self.getGrid().getCell(k, j).parent.insertBefore(self.getGrid().getCell(k, i), self.getGrid().getCell(k, j));
					}
			
					self.parent.insertBefore(dragged, self);
				}
			]]>
		</zscript>
	</window>
</zk>