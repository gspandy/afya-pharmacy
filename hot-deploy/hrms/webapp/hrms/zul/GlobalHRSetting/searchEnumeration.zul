<?component name="findbox" macroURI="../macros/textfindMacro.zul" id="macro1"?>
<?component name="findbox1" macroURI="../macros/textfindMacro.zul" id="macro5"?>
<?component name="fromDatebox" macroURI="../macros/datefindMacro.zul" id="macro2"?>
<?component name="thruDatebox" macroURI="../macros/datefindMacro.zul" id="macro3"?>
<?component name="selectbox" macroURI="../macros/findselectbox.zul" id="macro4"?>
<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk xmlns:h="http://www.zkoss.org/2005/zk/native">
	<zscript>
	import com.ndz.controller.*;
	SearchController controller = new SearchController();
	
	org.ofbiz.security.Security security = requestScope.get("security");
	org.ofbiz.entity.GenericValue userLogin = (org.ofbiz.entity.GenericValue) Executions
			.getCurrent().getDesktop().getSession().getAttribute("userLogin");
	boolean isAdmin = security.hasPermission("HUMANRES_ADMIN", userLogin);
	Tab resetTab=arg.get("resetTab");

	
</zscript>
	<window id="searchPanel" apply="${controller}" border="normal"
		if="${isAdmin }">
		<custom-attributes entityName="Enumeration"></custom-attributes>
		<caption id="caption" label="Currency Base Type">
			<div align="right">
				<toolbarbutton label="New"
					image="/images/icon/update.png" style="color:#FFFFFF">
					<attribute name="onClick">
	{
		final Window win = (Window) Executions.createComponents(
				"/zul/GlobalHRSetting/addEnumeration.zul", null, map);
		win.setMaximizable(true);
		win.doModal();
	}
</attribute>
				</toolbarbutton>
			</div>
		</caption>
		<zscript><![CDATA[
	Map map = Executions.getCurrent().getArg();
	String captionLabel = (String) map.get(1);
	caption.setLabel(captionLabel);
	String id = (String) map.get(0);
	String mapLabel = (String) map.get(1);
	String description = "Search" + " " + mapLabel + " " + "Using";
	String hiddenValue = (String) map.get(2);
	System.out.println("\n\n\n\n\n\n\n\n MAPPPPP" + map);
	
	if("Loan Type".equals(hiddenValue)){
		mapLabel="Loan Type";
	}
		if("Leave Type".equals(hiddenValue)){
			mapLabel="Leave Type";
		}
			if("Claim Type".equals(hiddenValue)){
				mapLabel="Claim Type";
			}
			
				if("Currency Base Type".equals(hiddenValue)){
					mapLabel="Currency Type";
			}
		

	
]]>
		</zscript>
		<separator />
		<textbox visible="false" value="${hiddenValue }"
			id="enumTypeId_1adminfld">
		</textbox>
		<separator height="10px"></separator>
		<div align="center">
			<findbox fieldLabel="${mapLabel}"  name="enumCode" type="text"
				cols="40" />
		</div>
		<separator height="10px"></separator>
		<div align="center">
			<findbox1 fieldLabel="Description" name="description" type="text"
				cols="40" />
		</div>
		
		
		
		
		<box width="100%" height="30px" align="center">
			<hbox>
				<button label="${c:l('HumanResSearch') }" mold="os"
					id="searchPerCompany"
					onClick="results.setVisible(true);results.setFocus(true)">
				</button>
				<button label="${c:l('HRMS_ResetButton') }"
						onClick='Events.postEvent("onClick",resetTab,null)'/>
					
			</hbox>
		</box>
		<zscript>
		<![CDATA[
	import org.zkoss.util.resource.Labels;
	import org.ofbiz.base.util.*;
	import org.zkoss.zk.ui.event.EventListener;
	import org.ofbiz.entity.*;
	import com.ndz.controller.BudgetManagementController;
	BudgetManagementController BudgetManagementController = new BudgetManagementController();
	class MyRowRenderer implements RowRenderer {

		MyRowRenderer() {
		}

		public void render(Row row, Object data) {
			org.ofbiz.entity.GenericValue gv = ((org.ofbiz.entity.GenericValue) data);
			String loantype = gv.getString("enumId");
			new Label(gv.getString("enumId")).setParent(row);
			GenericValue enumTypeGv = delegator.findByPrimaryKey(
					"EnumerationType", UtilMisc.toMap("enumTypeId", gv
							.getString("enumTypeId")));
			String enumItemType = enumTypeGv.getString("description");
			new Label(enumItemType).setParent(row);
			new Label(gv.getString("enumCode")).setParent(row);
			//new Label(gv.getString("sequenceId")).setParent(row);
			new Label(gv.getString("description")).setParent(row);
			row.setTooltiptext(Labels.getLabel("ToolTipText_DoubleClickToEdit"));
			row.addEventListener("onDoubleClick",
					new org.zkoss.zk.ui.event.EventListener() {
						public void onEvent(Event event) throws Exception {
							BudgetManagementController.editEnumeration(event,
									gv, map);
						}
					});

			Button btn = new com.ndz.zkoss.HrmsButton();
			btn.setParent(row);
			btn.setLabel(Labels.getLabel("ButtonDelete"));
			btn.setTooltiptext(Labels.getLabel("ToolTipText_DoubleClickToDelete"));
			btn.setSclass("btnDelete");
			btn.addEventListener("onClick",
					new org.zkoss.zk.ui.event.EventListener() {
						public void onEvent(Event event) throws Exception {
							org.ofbiz.entity.GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//org.ofbiz.entity.GenericDelegator.getGenericDelegator("default");
					if("ELOAN_TYPE".equals(hiddenValue)){
					List loanType = delegator.findByAnd("ELoanLimit",
							org.ofbiz.base.util.UtilMisc.toMap(
									"loanType", loantype));
					if (loanType.size() > 0) {
						Messagebox
								.show( "Selected Loan Type is in use, can't be deleted", "Error", 1, null);
					}else {
						BudgetManagementController.delete(event, gv.getString("enumId"));
						
					}
					}
					if("CLAIM_TYPE".equals(hiddenValue)){	
					List claimType = delegator.findByAnd("EmployeeClaimDetail",
							org.ofbiz.base.util.UtilMisc.toMap(
									"claimTypeId", loantype));
					if (claimType.size() > 0) {
						Messagebox
								.show("Selected Claim Type is in Use, can't be deleted", "Error", 1, null);
					}else {
						BudgetManagementController.delete(event, gv
								.getString("enumId"));
						
					}
					}
					if("LEAVE_TYPE".equals(hiddenValue)){
					List leaveType = delegator.findByAnd("EmplLeaveLimit",
							org.ofbiz.base.util.UtilMisc.toMap(
									"leaveTypeId", loantype));
					if (leaveType.size() > 0) {
						Messagebox
								.show("Selected Leave Type is in use, can't be deleted", "Error", 1, null);
					}else {
						BudgetManagementController.delete(event, gv.getString("enumId"));
					}
					}
					
					if("BASELINE_TYPE".equals(hiddenValue)){
						List leaveType = delegator.findByAnd("EmployeeRequisition",
								org.ofbiz.base.util.UtilMisc.toMap(
										"enumId", loantype));
						if (leaveType.size() > 0) {
							Messagebox
									.show("Selected Currency Base Type is in use, can't be deleted", "Error", 1, null);
						}else {
							BudgetManagementController.delete(event, gv.getString("enumId"));
						}
						}
					
							
							}
					});
		}
	}
	RowRenderer tableRenderer = new MyRowRenderer();
]]>
</zscript>
		<separator />
		<panel id="results" visible="false" width="99%">
			<panelchildren>

				<h:table width="99%" style="border:0px"
					cellspacing="0px" cellpadding="0px">
					<h:tr>
						<h:td width="80%">
							<label
								value="${c:l('HRMS_SEARCHRESULTS') }">
							</label>
						</h:td>
						<h:td width="20%" style="text-align:right">
							<paging id="paging" width="100%" />
						</h:td>
					</h:tr>
				</h:table>
				<div id="enumdiv" style="overflow: auto;"
					height="200px">
					<grid width="99%" id="dataGrid"
						rowRenderer="${tableRenderer}">
						<columns menupopup="auto">
							<column label="${id}"
								onDrop="move(event.dragged)" draggable="col" droppable="col"
								style="font-weight:bold" sortDirection="ascending" />
							<column label="Enum Type"
								onDrop="move(event.dragged)" draggable="col" droppable="col"
								style="font-weight:bold" sortDirection="ascending"
								visible="false" />
							<column label="${mapLabel}"
								onDrop="move(event.dragged)" draggable="col" droppable="col"
								style="font-weight:bold" />
							<column label="Description"
								onDrop="move(event.dragged)" draggable="col" droppable="col"
								style="font-weight:bold" />
							<column label="Action"
								onDrop="move(event.dragged)" draggable="col" droppable="col"
								style="font-weight:bold" />
						</columns>
					</grid>
				</div>
			</panelchildren>
		</panel>
		<zscript><![CDATA[
	Events.postEvent("onClick", searchPerCompany, null);
	void move(Component dragged) {
		if (dragged.getClass().getName().endsWith("Column")) {
			int maxRows = dragged.getGrid().getRows().getChildren().size();
			int i = dragged.getParent().getChildren().indexOf(dragged);
			int j = self.getParent().getChildren().indexOf(self);

			//move celles for each row 
			for (int k = 0; k < maxRows; k++)
				self.getGrid().getCell(k, j).parent.insertBefore(self.getGrid()
						.getCell(k, i), self.getGrid().getCell(k, j));
		}

		self.parent.insertBefore(dragged, self);
	}
]]></zscript>
	</window>
</zk>