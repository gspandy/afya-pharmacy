<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk>
	<zscript>
	<![CDATA[
	import org.ofbiz.entity.*;
	import org.ofbiz.entity.condition.*;
	import org.ofbiz.base.util.*;
	GenericValue gv = (GenericValue)Executions.getCurrent().getArg().get("gv");
	String partyIdDep = gv.getString("partyId");
	String empPositionId = gv.getString("emplPositionId");
	String statusId = gv.getString("statusId");
	String positionStatus = statusId;
	String status = gv.getRelatedOne("StatusItem").getString("description");
	String budgetId = "";
	if (gv.getString("budgetId") != null) {
		budgetId = gv.getString("budgetId");
	}
	String budgetItemSeqId = "";
	if (gv.getString("budgetItemSeqId") != null) {
		budgetItemSeqId = gv.getString("budgetItemSeqId");
	}
	String empPositionTypeId = gv.getString("emplPositionTypeId");
	java.sql.Timestamp estimatedFromDateType = gv.getTimestamp("estimatedFromDate");
	Date estimatedFromDate = null;
	if (estimatedFromDateType != null) {
		Date estimatedFromDate = new Date(estimatedFromDateType.getTime());
	}
	java.sql.Timestamp estimatedThruDateType = gv
			.getTimestamp("estimatedThruDate");
	if (estimatedThruDateType != null) {
		Date estimatedThruDate = new Date(estimatedThruDateType.getTime());
	}
	java.sql.Timestamp actualThruDateType = gv.getTimestamp("actualThruDate");
	if (actualThruDateType != null) {
		Date actualThruDate = new Date(actualThruDateType.getTime());
	}
	java.sql.Timestamp actualFromDateType = gv.getTimestamp("actualFromDate");
	if (actualFromDateType != null) {
		Date actualFromDate = new Date(actualFromDateType.getTime());
	}
	GenericValue userLogin = (GenericValue) Executions.getCurrent()
			.getDesktop().getSession().getAttribute("userLogin");
	GenericDelegator delegator = userLogin.getDelegator();
	List departments = delegator.findList("DepartmentPosition",null,null,null,null,false);
	List positionTypeList = delegator.findList("EmplPositionType",null,null,null,null,false);
	positionTypeList.add(0, null);
	positionTypeArray = positionTypeList
			.toArray(new GenericValue[positionTypeList.size()]);
	SimpleListModel positionTypeModel = new SimpleListModel(positionTypeArray);
	List statusList = delegator.findByAnd("StatusValidChange", UtilMisc.toMap("statusId", statusId));
	statusList.add(0, null);
	statusArray = statusList.toArray(new GenericValue[statusList.size()]);
	SimpleListModel statusModel = new SimpleListModel(statusArray);

	public class PositionTypeItemRenderer implements ListitemRenderer {

		public PositionTypeItemRenderer() {
		}

		public void render(Listitem li, Object data) {
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("description"));
				li.setValue(val.getString("emplPositionTypeId"));
				if (empPositionTypeId.equals(val.getString("emplPositionTypeId"))) {
					li.setSelected(true);
				}
			}
		}
	}
	ListitemRenderer positionTypeItemRenderer = new PositionTypeItemRenderer();
	public class StatusItemRenderer implements ListitemRenderer {

		public StatusItemRenderer() {
		}

		public void render(Listitem li, Object data) {
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("transitionName"));
				li.setValue(val.getString("statusIdTo"));
				if (statusId.equals(val.getString("statusIdTo"))) {
					li.setSelected(true);
				}
			}
		}
	}
	ListitemRenderer statusItemRenderer = new StatusItemRenderer();
	com.ndz.zkoss.GenericValueRenderer listItemRenderer = new com.ndz.zkoss.GenericValueRenderer(
			new String[] { "budgetId", "budgetTypeId" });
	List positionResponsibilityList = null;
	List addpositionResponsibilityList=null;
	positionResponsibilityList = delegator.findByAnd(
			"EmplPositionResponsibility", UtilMisc.toMap("emplPositionId",
					empPositionId));
	addpositionResponsibilityList=delegator.findByAnd(
			"EmplPosition", UtilMisc.toMap("emplPositionId",
					empPositionId));
	GenericValue positionResponsibilityGv = null;
	GenericValue addpositionResponsibilityGv=null;
	positionResponsibilityGv = org.ofbiz.entity.util.EntityUtil
			.getFirst(positionResponsibilityList);
	addpositionResponsibilityGv = org.ofbiz.entity.util.EntityUtil
	.getFirst(addpositionResponsibilityList);
	String responsibilityTypeId = null;
	String addresponse=null;
	if (positionResponsibilityGv != null) {
		responsibilityTypeId = (String) positionResponsibilityGv
				.getString("responsibilityTypeId");
		
	}
	if(addpositionResponsibilityGv != null){
		 addresponse=(String) addpositionResponsibilityGv
			.getString("additionalResponsibility");
	}
	Set fieldToSelect = new HashSet();
	fieldToSelect.add("responsibilityTypeId");
	fieldToSelect.add("description");
	List employeeResponsibility = null;
	employeeResponsibility = delegator.findList("ResponsibilityType", null,
			fieldToSelect, null, null, false);
	employeeResponsibilityArray = employeeResponsibility
			.toArray(new GenericValue[employeeResponsibility.size()]);
	SimpleListModel responsibilityList = new SimpleListModel(
			employeeResponsibilityArray);
	public class ResponsibilityItemRenderer implements ListitemRenderer {

		public ResponsibilityItemRenderer() {
		}

		public void render(Listitem li, Object data) {
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("description"));
				li.setValue(val.getString("responsibilityTypeId"));
				for(GenericValue positionResponsibilityGv : positionResponsibilityList){
					String responsibilityTypeId = positionResponsibilityGv.getString("responsibilityTypeId");
					if(responsibilityTypeId.equals(val.getString("responsibilityTypeId")))
							li.setSelected(true);
				}
			}
		}
	}
	ListitemRenderer responsibilityItemRenderer = new ResponsibilityItemRenderer();
]]>
</zscript>
	<window id="editPositionWindow" width="60%" height="95%"
		position="center" closable="true" border="normal"
		contentStyle="overflow:auto" maximizable="true">
		<caption label="Edit Position" />
		<separator height="10px" />
		<hbox>
			<div align="right" width="165px">
				<label value="Position Id" style="font-weight:bold" />
			</div>

			<div width="300px" align="left">
				<label id="emplPosId" value="${empPositionId}" style="font-weight:regular"/>
			</div>

		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Department" style="font-weight:bold" /><label value="*" style="color:red" />
			</div>

			<div width="300px" align="left">
				<combobox readonly="true" id="partyId">
					<comboitem forEach="${departments}" label='${each.departmentName}' description="${each.departmentId}"
						value="${each.departmentId}">
						<attribute name="onCreate">
						  GenericValue depPos = delegator.findByPrimaryKey("DepartmentPosition",UtilMisc.toMap("departmentId",self.getValue()));
						  GenericValue loc = delegator.findByPrimaryKey("Location",UtilMisc.toMap("locationId",depPos.getString("locationId")));
                        if(loc!=null)
						  self.setDescription(loc.getString("locationName"));
						  if(partyIdDep.equals(self.getValue()))
						  	partyId.setSelectedItem(self);
						</attribute>
					</comboitem>
				</combobox>
			</div>
		</hbox>
		<separator />
		<hbox>

			<div align="right" width="165px">
				<label value="Position Type" style="font-weight:bold" /><label value="*" style="color:red" />
			</div>
			<div align="left">
				<listbox id="emplPositionTypeId" mold="select"
					model="${positionTypeModel}"
					itemRenderer="${positionTypeItemRenderer}" />

			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Position Responsibility"
					style="font-weight:bold" />
					<label value="*" style="color:red" />
			</div>
			<div align="left" width="450px">
				<paging id="responsibilityPaging" pageSize="5"
					pageIncrement="1"/>
				<listbox id="responsibilityTypeId" checkmark="true" multiple="true"
					itemRenderer="${responsibilityItemRenderer}" 
					model="${responsibilityList}"
					onSelect="Clients.closeErrorBox(self)" pagingPosition="top"
					paginal="${responsibilityPaging}" mold="paging"/>
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Position Status" style="font-weight:bold" /><label value="*" style="color:red" />
			</div>
			<div align="left">
				<listbox id="statusId" mold="select"
					model="${statusModel}" itemRenderer="${statusItemRenderer}" />
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Estimated From Date"
					style="font-weight:bold" />
					<label value="*" style="color:red"/>
			</div>
			<div align="left" onCreate="setEstimatedFromDate();">
				<datebox id="estimatedFromDate"
					constraint="no empty:Estimated From Date Required" />
			</div>
			<zscript>
	void setEstimatedFromDate() {
		if (estimatedFromDateType != null)
			estimatedFromDate.setValue(estimatedFromDateType);
	}
</zscript>
			<div align="right" width="180px">
				<label value="Estimated Thru Date"
					style="font-weight:bold" />
			</div>
			<div align="left" width="130px">
				<datebox id="estimatedThruDate"
					value="${estimatedThruDateType}" />
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Actual From Date"
					style="font-weight:bold" />
			</div>
			<div align="left">
				<datebox id="actualFromDate"
					value="${actualFromDateType }" />
			</div>
			<div align="right" width="180px">
				<label value="Actual Thru Date"
					style="font-weight:bold" />
			</div>
			<div align="left" width="130px">
				<datebox id="actualThruDate"
					value="${actualThruDateType }" />
			</div>
		</hbox>
		<separator />
		<hbox visible="false">
			<div align="right" width="165px">
				<label value="Budget Id" style="font-weight:bold" />
			</div>
			<div align="left">
				<bandbox id="budgetId" value="${budgetId}">
					<bandpopup>
						<paging id="budgetPaging" width="425px"
							pageSize="10" pageIncrement="1" />
						<listbox id="budgetListbox" width="425px"
							onSelect="budgetId.value=self.selectedItem.label; budgetId.close();"
							itemRenderer="${listItemRenderer}" mold="paging"
							paginal="${budgetPaging}">
							<listhead>
								<listheader label="Budget Id"
									style="font-weight:bold" />
								<listheader label="Budget Type Id"
									style="font-weight:bold" />
							</listhead>
						</listbox>
					</bandpopup>
				</bandbox>
				<zscript>
				<![CDATA[
	import org.ofbiz.entity.*;
	import org.zkoss.zul.*;
	GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
	Set fieldToSelect = new HashSet();
	fieldToSelect.add("budgetTypeId");
	fieldToSelect.add("budgetId");
	List budgetList = null;
	budgetList = delegator.findList("Budget", null, fieldToSelect, null, null,
			false);
	budgetArray = budgetList.toArray(new GenericValue[budgetList.size()]);
	SimpleListModel budgetModel = new SimpleListModel(budgetArray);
	Listbox budgetLstbox = (Listbox) editPositionWindow
			.getFellow("budgetListbox");
	budgetLstbox.setModel(budgetModel);
	com.ndz.zkoss.GenericValueRenderer budgetItemRenderer = new com.ndz.zkoss.GenericValueRenderer(
			new String[] { "budgetItemSeqId", "budgetItemTypeId", "amount" });
]]>
				</zscript>
			</div>
		
		<separator />
		
			<div align="right" width="165px">
				<label value="Budget Item Seq Id"
					style="font-weight:bold" />
			</div>
			<div width="290px" align="left">
				<bandbox id="budgetItemSeqId"
					value="${budgetItemSeqId}">
					<bandpopup>
						<paging id="budgetItemPaging" width="425px"
							pageSize="10" pageIncrement="1" />
						<listbox id="budgetItemListbox" width="425px"
							onSelect="budgetItemSeqId.value=self.selectedItem.label; budgetItemSeqId.close();"
							itemRenderer="${budgetItemRenderer}" mold="paging"
							paginal="${budgetItemPaging}">
							<listhead>
								<listheader label="Budget Item Seq Id"
									style="font-weight:bold" />
								<listheader label="Budget Item Type Id"
									style="font-weight:bold" />
								<listheader label="Amount"
									style="font-weight:bold" />
							</listhead>
						</listbox>
					</bandpopup>
				</bandbox>
			</div>
			<zscript>
				<![CDATA[
	import org.ofbiz.entity.*;
	import org.zkoss.zul.*;
	GenericDelegator delegator1 = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
	Set budgetItemSelect = new HashSet();
	budgetItemSelect.add("budgetItemTypeId");
	budgetItemSelect.add("budgetItemSeqId");
	budgetItemSelect.add("amount");
	List budgetItemList = null;
	budgetItemList = delegator1.findList("BudgetItem", null, budgetItemSelect,
			null, null, false);
	budgetItemArray = budgetItemList.toArray(new GenericValue[budgetItemList
			.size()]);
	SimpleListModel budgetItemModel = new SimpleListModel(budgetItemArray);
	Listbox budgetItemLstbox = (Listbox) editPositionWindow
			.getFellow("budgetItemListbox");
	budgetItemLstbox.setModel(budgetItemModel);
]]>

		boolean salFlag = "Y".equalsIgnoreCase((String)gv.get("salaryFlag"));
		boolean exeFlag = "Y".equalsIgnoreCase((String)gv.get("exemptFlag"));
		boolean fullFlag = "Y".equalsIgnoreCase((String)gv.get("fulltimeFlag"));
		boolean TempFlag = "Y".equalsIgnoreCase((String)gv.get("temporaryFlag"));
				</zscript>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Salary Flag" style="font-weight:bold" />
			</div>
			<div align="left" width="130px">
				<listbox id="salaryFlag" mold="select">
					<listitem label="Yes" value="Y" selected="${salFlag}"/>
					<listitem label="No" value="N" selected="${!salFlag}"/>
				</listbox>
			</div>
			<div align="right">
				<label value="Exempt Flag" style="font-weight:bold" />
			</div>
			<div align="right" width="65px">
				<listbox id="exemptFlag" mold="select">
					<listitem label="Yes" value="Y" selected="${exeFlag}"></listitem>
					<listitem label="No" value="N" selected="${!exeFlag}"></listitem>
				</listbox>
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Fulltime Flag" style="font-weight:bold" />
			</div>
			<div align="left">
				<listbox id="fulltimeFlag" mold="select">
					<listitem label="Yes" value="Y" selected="${fullFlag}"></listitem>
	                <listitem label="No" value="N" selected="${!fullFlag}" ></listitem>
				</listbox>
			</div>
			<div align="right" width="180px">
				<label value="Temporary Flag" style="font-weight:bold" />
			</div>
			<div align="left">
				<listbox id="temporaryFlag" mold="select">
					<listitem label="Yes" value="Y" selected="${TempFlag}"></listitem>
					<listitem label="No" value="N" selected="${!TempFlag}"></listitem>
				</listbox>
			</div>
		</hbox>
		<separator />
		<hbox>
			<div align="right" width="165px">
				<label value="Additional Responsibility"></label>
			</div>
			<div align="left">
				<textbox id="responsibilitySubType" value="${addresponse}"  rows="4"
					cols="50" >
				</textbox>
			</div>
		</hbox>
		<zscript>
		<![CDATA[
	void validateForm() {
		if (UtilValidate.isEmpty(partyId.getValue())) {
			throw new WrongValueException(partyId, "Department Name Required");
		}
		if (emplPositionTypeId.getSelectedItem() == null) {
			throw new WrongValueException(emplPositionTypeId,
					"Position Type Required");
		}
		if (emplPositionTypeId.getSelectedItem() != null) {
			String emplPosId = (String) emplPositionTypeId.getSelectedItem().getLabel();
			if(emplPosId.equals("")){
			throw new WrongValueException(emplPositionTypeId,
					"Position Type Required");
			}
		}
		if (responsibilityTypeId.getSelectedItem() == null) {
			throw new WrongValueException(responsibilityTypeId,
					"Position Responsibility Required");
		}
		/*if(statusId.getSelectedItem().getValue().equals("EMPL_POS_FULFILLED")){
			throw new WrongValueException(statusId, "You can't create the Position with Status as Fulfilled");
		}*/
		if (statusId.getSelectedItem() == null) {
			throw new WrongValueException(statusId, "Position Status Required");
		}
		if (statusId.getSelectedItem() != null) {
			String statusStr =(String) statusId.getSelectedItem().getLabel();
			if(statusStr.equals("")){
			throw new WrongValueException(statusId, "Position Status Required");
			}
		}
		if(estimatedFromDate.getValue() == null){
			throw new WrongValueException(estimatedFromDate,"Estimated From Date Required");
		}
		if(estimatedThruDate.getValue() != null){
		if(com.ndz.zkoss.HrmsUtil.dateCompare(estimatedFromDate.getValue(),estimatedThruDate.getValue()) == 1){
			throw new WrongValueException(estimatedThruDate,"Estimated Thru Date Must Be Greater Than Or Equal To Estimated From Date");
		}
		}
		if(actualThruDate.getValue() != null){
			if(actualFromDate.getValue() == null){
				throw new WrongValueException(actualFromDate,"Actual From Date Required");
			}
			if(com.ndz.zkoss.HrmsUtil.dateCompare(actualFromDate.getValue(),actualThruDate.getValue()) == 1){
				throw new WrongValueException(actualThruDate,"Actual Thru Date Must Be Greater Than Or Equal To Actual From Date");
			}
		}
	}
]]>
		</zscript>
		<separator />
		<hbox>
			<div align="right" width="278px">
				<button id="createPositionButton" label="Save"
					onClick='validateForm();com.ndz.controller.EmployeeManagementController.updatePosition(event);Events.postEvent("onClick", Path
				.getComponent("/searchPanel//searchPerCompany"), null);editPositionWindow.detach();' />
				<button id="applyLeaveCancelButton"
					label="${c:l('ButtonCancel') }"
					onClick="editPositionWindow.detach()" />

			</div>
		</hbox>
	</window>
</zk>