<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<?component name="findbox" macroURI="../macros/textFindIgnoreCase.zul" id="macro1"?>
<?component name="fromDatebox" macroURI="../macros/fromDateMacro.zul" id="macro2"?>
<?component name="thruDatebox" macroURI="../macros/thruDateMacro.zul" id="macro3"?>
<?component list="${claimTypesList}" renderer="${claimTypeItemRenderer}" name="selectbox" macroURI="../macros/findselectbox.zul" id="macro4" ?>
<zk xmlns:h="http://www.zkoss.org/2005/zk/native">
	<zscript>
	import com.ndz.controller.*;
	import org.ofbiz.entity.*;
	import org.ofbiz.base.util.*;
	List claimTypes = null;
	Button myClaimBtn = arg.get("myClaimBtn");
	GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
	claimTypes = delegator.findByAnd("Enumeration",UtilMisc.toMap("enumTypeId", "CLAIM_TYPE"));
	claimTypes.add(0, null);
	claimTypesArray = claimTypes.toArray(new GenericValue[claimTypes.size()]);
	SimpleListModel claimTypesList = new SimpleListModel(claimTypesArray);
	public class ClaimTypeItemRenderer implements ListitemRenderer {

		public ClaimTypeItemRenderer() {
		}

		public void render(Listitem li, Object data) {
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("description"));
				li.setValue(val.getString("enumId"));
			}
		}
	}
	ListitemRenderer claimTypeItemRenderer = new ClaimTypeItemRenderer();
	SearchController controller = new SearchController();
	
	
	org.ofbiz.security.Security security = requestScope.get("security");
	boolean isAdmin = security.hasPermission("HUMANRES_ADMIN", userLogin);
	boolean isManager = security.hasPermission("HUMANRES_MGR", userLogin);
	boolean bothAccess = false;
	if (isAdmin || isManager) {
		bothAccess = true;
	}
	
</zscript>
	<window id="searchPanel" apply="${controller}"
		onOK="activateSearch()" onCreate='Events.postEvent("onClick",searchPanel.getFellow("searchButton"),null)'>

		<custom-attributes entityName="MaxClaimDetail"></custom-attributes>
		<separator height="10px"></separator>
		<div style="margin-left:120px">
		<h:table>
			<h:tr>
				<h:td >
					<findbox fieldLabel="${c:l('Hrms_ClaimId') }"
							name="claimId" type="text" cols="20" />
				</h:td>
				<h:td width="50%">
					<selectbox value="${values}"
							fieldLabel="${c:l('Hrms_ClaimType') }" name="claimType" />
				</h:td>
			</h:tr>
			<h:tr>
				<h:td>
				<div align="left">
					<fromDatebox
							fieldLabel="${c:l('HumanResLeaveSummaryFromDate') }"
							name="beginDate" type="date" />
							</div>
				</h:td>
				<h:td style="text-align:left" width="50%">
					<thruDatebox
							fieldLabel="${c:l('HumanResLeaveSummaryThruDate') }"
							name="endDate" type="date" />
				</h:td>
			</h:tr>
            <h:tr>
                <h:td style="text-align:left" >
                        <hbox>
                            <div width="150px" align="right">
                                <label value="${c:l('HRMS_EmployeeId') }" visible="true" if="${isManager}"/>
                            </div>
                            <div align="left" style="margin-left:8px">
                                <employeebox id="partyId_searchfld" visible="true" if="${isManager}">
                                    <attribute name="onChange"><![CDATA[
                                        controller.employeeId=self.getValue();
						]]></attribute>
                                </employeebox>
                            </div>
                        </hbox>
                </h:td>
            </h:tr>
		</h:table>
		</div>
		<separator />
		<box width="100%" height="30px" align="center">
			<hbox>
				<button label="${c:l('HumanResSearch') }" mold="os"
					id="searchButton"
					onClick="results.setVisible(true);results.setFocus(true)">
				</button>
				<button label="${c:l('HRMS_ResetButton') }" >
					<attribute name="onClick">
					Events.postEvent("onClick",myClaimBtn,null);
					</attribute>
					</button>
			</hbox>
		</box>
		<zscript>
	void activateSearch() {
		Events.postEvent("onClick", searchButton, null);
	}
</zscript>
		<zscript><![CDATA[
	import org.ofbiz.base.util.*;
	import org.zkoss.zk.ui.event.EventListener;
	import org.zkoss.util.resource.Labels;
	ClaimManagementController claimManagementController = new ClaimManagementController();
	class MyRowRenderer implements RowRenderer {

		MyRowRenderer() {
		}

		public void render(Row row, Object data) {
			org.ofbiz.entity.GenericValue gv = ((org.ofbiz.entity.GenericValue) data);
			row.setTooltiptext("DoubleClick To Edit/Submit");
			new Label(gv.getString("claimId")).setParent(row);
			org.ofbiz.entity.GenericValue personGV = delegator.findByPrimaryKey("Person",UtilMisc.toMap("partyId",gv.getString("partyId")));
	        new Label(gv.getString("partyId") + " "+"-"+" " +personGV.getString("firstName") + " " + personGV.getString("lastName")).setParent(row);
			new Label(gv.getString("description")).setParent(row);
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd-MM-yyyy");
			new Label(sdf.format(gv.getDate("beginDate"))).setParent(row);
			new Label(sdf.format(gv.getDate("endDate"))).setParent(row);
			new Label((com.ndz.zkoss.util.CurrencyFormatter.format(gv.getBigDecimal("amount").doubleValue()))+ " " + gv.getString("currencyUomId")).setParent(row);
			org.ofbiz.entity.condition.EntityCondition condition = org.ofbiz.entity.condition.EntityCondition
					.makeCondition("statusId",
							org.ofbiz.entity.condition.EntityOperator.EQUALS,
							gv.getString("statusId"));
			List statusItemList = delegator.findList("StatusItem", condition,
					null, null, null, false);
			GenericValue statusItemGV = (GenericValue) statusItemList.get(0);
			new Label(statusItemGV.getString("description")).setParent(row);

			if(gv.getString("baseCurrencyAmount") != null){
			new Label(com.ndz.zkoss.util.CurrencyFormatter.format(gv.getDouble("baseCurrencyAmount")) + " " + gv.getString("admincurrencyUomId")).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getDouble("fxRate") != null && (gv.getString("statusId").equals("CL_MGR_APPROVED")||gv.getString("statusId").equals("CL_ADM_APPROVED"))) {
				new Label(com.ndz.zkoss.util.CurrencyFormatter.format(gv.getDouble("fxRate")).toString()).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getDouble("receipts") != null) {
				java.math.BigDecimal receiptsBigDecimal = gv.getBigDecimal("receipts");
				java.math.BigInteger receiptsBigInteger = receiptsBigDecimal.toBigInteger();
				new Label(receiptsBigInteger.toString()).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getDate("reimbDate") != null && (gv.getString("statusId").equals("CL_MGR_APPROVED")||gv.getString("statusId").equals("CL_ADM_APPROVED"))) {
				
				new Label(sdf.format(gv.getDate("reimbDate"))).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getDouble("acceptedAmount") != null) {
				new Label(com.ndz.zkoss.util.CurrencyFormatter.format(gv.getDouble("acceptedAmount")).toString() + " " + gv.getString("admincurrencyUomId")).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getDouble("rejectedAmount") != null) {
				new Label((com.ndz.zkoss.util.CurrencyFormatter.format(gv.getDouble("rejectedAmount"))+ " " + gv.getString("admincurrencyUomId")).toString()).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getString("employeeComment") != null) {
				new Label(gv.getString("employeeComment").toString()).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getString("hr_comment") != null) {
				new Label(gv.getString("hr_comment").toString()).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getString("adminComment") != null) {
				new Label(gv.getString("adminComment").toString()).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getString("updatedBy") != null) {
				org.ofbiz.entity.GenericValue personGV1 = delegator.findByPrimaryKey("Person",UtilMisc.toMap("partyId",gv.getString("updatedBy")));
		        new Label(personGV1.getString("firstName") + " " + personGV1.getString("lastName")).setParent(row);
			}else{
				new Label("").setParent(row);
			}
			if (gv.getTimestamp("updateDate") != null) {
			java.text.SimpleDateFormat formater = new java.text.SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
				new Label(formater.format(gv.getTimestamp("updateDate")).toString()).setParent(row);
				
			}else{
				new Label("").setParent(row);
			}
			Button img = new com.ndz.zkoss.HrmsButton();
			if ((gv.getString("statusId")).equals("CL_SAVED")) {
				img.setLabel("Delete");
				img.setParent(row);
				img.setTooltiptext("Click here to delete");
				img.setSclass("btnDelete");
				img.addEventListener("onClick", new EventListener() {
					public void onEvent(Event event) throws Exception {
						claimManagementController.deleteClaim(event, gv,
								searchButton);
					}
				});
				row.addEventListener("onDoubleClick", new EventListener() {
					public void onEvent(Event event) throws Exception {
						claimManagementController.showUpdateClaimWindow(event,
								gv);
					}
				});
			}else{
			new Label("").setParent(row);
			}
			
		}
	}
	RowRenderer tableRenderer = new MyRowRenderer();
	]]></zscript>
		<separator />
		<div id="results" visible="false" width="100%">
			<h:table style="border:0px" cellspacing="0px" cellpadding="0px">
				<h:tr>
					<h:td width="90%">
						<label value="${c:l('HRMS_SEARCHRESULTS') }"></label>
					</h:td>
					<h:td width="10%" style="text-align:right">
						<paging id="paging"/>
					</h:td>
				</h:tr>
			</h:table>
			<grid id="dataGrid"
				rowRenderer="${tableRenderer }">
				<columns menupopup="auto" >
					<column label="${c:l('Hrms_ClaimId') }" 
						sortDirection="ascending" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Employee Id - Name" 
						 onDrop="move(event.dragged)"
						draggable="col" droppable="col" visible="false" />
					<column label="${c:l('Hrms_ClaimType') }" 
						 onDrop="move(event.dragged)"
						draggable="col" droppable="col" />
					<column	label="${c:l('HumanResLeaveSummaryFromDate')}" 
						 onDrop="move(event.dragged)"
						draggable="col" droppable="col" />
					<column
						label="${c:l('HumanResLeaveSummaryThruDate')}" 
						onDrop="move(event.dragged)"
						draggable="col" droppable="col" />
					<column label="${c:l('FormFieldTitle_amount') }" 
						onDrop="move(event.dragged)"
						draggable="col" droppable="col" />
					
					<column label="Status" 
						 onDrop="move(event.dragged)"
						draggable="col" droppable="col" />
					<column label="${c:l('Hrms_BaseCurrencyAmount') }" 
						visible="false" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_FixRate') }" 
						visible="false" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_Receipts') }" 
						visible="false" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_ReimbursementDate') }" 
						visible="false" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_AcceptedAmount') }" 
						visible="false" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_RejectedAmount') }" 
						visible="false" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Employee Comments" 
						visible="false"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Manager Comments" 
						visible="false"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Admin Comments" 
						visible="false"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_UpdatedBy') }" 
						visible="false"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_UpdateDate') }" 
						visible="false" 
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Action" 
						 onDrop="move(event.dragged)"
						draggable="col" droppable="col" />
				</columns>
			</grid>
		</div>
		<zscript><![CDATA[
	void move(Component dragged) {
		if (dragged.getClass().getName().endsWith("Column")) {
			int maxRows = dragged.getGrid().getRows().getChildren().size();
			int i = dragged.getParent().getChildren().indexOf(dragged);
			int j = self.getParent().getChildren().indexOf(self);

			//move celles for each row 
			for (int k = 0; k < maxRows; k++)
				self.getGrid().getCell(k, j).parent.insertBefore(self.getGrid()
						.getCell(k, i), self.getGrid().getCell(k, j));
		}

		self.parent.insertBefore(dragged, self);
	}
]]></zscript>
	</window>
</zk>