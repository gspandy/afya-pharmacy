<?component name="findbox" macroURI="../macros/textFindIgnoreCase.zul" id="macro1"?>
<?component name="fromDatebox" macroURI="../macros/datefindMacro.zul" id="macro2"?>
<?component name="thruDatebox" macroURI="../macros/datefindMacro.zul" id="macro3"?>
<?component name="selectbox" macroURI="../macros/findselectbox.zul" id="macro4"?>
<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<zk xmlns:h="http://www.zkoss.org/2005/zk/native">
	<zscript>
	import com.ndz.controller.*;
	SearchController controller = new SearchController();
	Toolbarbutton budgetItemToolbarButton = Executions.getCurrent().getArg().get("budgetItemToolbarButton");
	GenericValue userLogin = (GenericValue) Executions.getCurrent().getDesktop().getSession().getAttribute("userLogin");
	org.ofbiz.security.Security security =requestScope.get("security");
	boolean isAdmin = security.hasPermission("HUMANRES_ADMIN", userLogin);
</zscript>
	<window id="searchPanel" apply="${controller}" border="normal" onOK="activateSearch()">
	<caption label="${c:l('HRMS_BUDGETITEM') }">
	<div align="right">
					<toolbarbutton label="${c:l('HRMS_NEW') }" image="/images/icon/update.png" style="font-weight:bold;color:#FFFFFF" if="${isAdmin}">
					<attribute name="onClick" >
						{
							final Window win = (Window) Executions.createComponents(
									"/zul/budget/addBudgetItem.zul", null, null);
							win.setMaximizable(true);
							win.doModal();
						}
					</attribute>
					</toolbarbutton>
				</div>
	</caption>
		<custom-attributes entityName="BudgetItem"></custom-attributes>
		<separator height="10px"></separator>
		<h:table style="margin-left:20%">
			<div align="center">
				<h:tr height="50px">
					<h:td>
						<findbox fieldLabel="${c:l('FormFieldTitle_budgetItemId') }"
							name="budgetItemSeqId" type="text" cols="40" />
					</h:td>
				</h:tr>
			</div>
		</h:table>
		<box width="100%" height="30px" align="center">
			<hbox>
				<button label="${c:l('HumanResSearch') }" mold="os"
					id="searchButton"
					onClick="results.setVisible(true);results.setFocus(true)">
				</button>
				<button label="${c:l('HRMS_ResetButton') }"
					onClick='Events.postEvent("onClick",budgetItemToolbarButton,null)' />
			</hbox>
		</box>
		<zscript>
	void activateSearch() {
		Events.postEvent("onClick", searchPerCompany, null);
	}
</zscript> 
		<zscript>
		<![CDATA[
	import org.zkoss.util.resource.Labels;
	import org.ofbiz.base.util.*;
	import org.zkoss.zk.ui.event.EventListener;
	import org.ofbiz.entity.*;
	class MyRowRenderer implements RowRenderer {

		MyRowRenderer() {
		}

		public void render(Row row, Object data) {
			org.ofbiz.entity.GenericValue gv = ((org.ofbiz.entity.GenericValue) data);
			if(isAdmin){
			row.setTooltiptext("DoubleClick To Edit");
			}
			new Label(gv.getString("budgetId")).setParent(row);
			new Label(gv.getString("budgetItemSeqId")).setParent(row);
			GenericValue budgetTypeGv = delegator.findByPrimaryKey(
					"BudgetItemType", UtilMisc.toMap("budgetItemTypeId", gv
							.getString("budgetItemTypeId")));
			String budgetItemType = budgetTypeGv.getString("description");
			new Label(budgetItemType).setParent(row);
			new Label(gv.getString("amount")).setParent(row);
			new Label(gv.getString("purpose")).setParent(row);
			new Label(gv.getString("justification")).setParent(row);
			if(isAdmin){
				Button btn = new com.ndz.zkoss.HrmsButton();
				btn.setParent(row);
				btn.setLabel("Delete");
				btn.setTooltiptext("Click here to delete");
				btn.setSclass("btnDelete");
				btn.addEventListener("onClick", new EventListener() {

				public void onEvent(Event event) throws Exception {
					com.ndz.controller.BudgetManagementController.deleteBudgetItem(
							event, gv);
				}
			});
			}
			Map arg = new HashMap();
			arg.put("gv", gv);
			if(isAdmin){
			row.addEventListener("onDoubleClick", new EventListener() {

				public void onEvent(Event event) throws Exception {
					Window win = (Window) Executions.createComponents(
							"/zul/Budget/editBudgetItem.zul", null, arg);
					win.doModal();
				}
			});
			}

		}
	}
	RowRenderer tableRenderer = new MyRowRenderer();
]]>
</zscript>
<separator/>
		<div id="results" visible="false">
			<h:table width="100%" style="border:0px" cellspacing="0px" cellpadding="0px">
				<h:tr>
					<h:td width="90%">
						<label value="${c:l('HRMS_SEARCHRESULTS') }" ></label>
					</h:td>
					<h:td width="10%" style="text-align:right">
						<paging id="paging" />
					</h:td>
				</h:tr>
			</h:table>
			<grid width="100%" id="dataGrid"
				rowRenderer="${tableRenderer}">
				<columns menupopup="auto">
					<column label="${c:l('FormFieldTitle_budgetId') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col"
						style="font-weight:bold" sortDirection="ascending" />
					<column label="${c:l('FormFieldTitle_budgetItemId') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col"
						style="font-weight:bold" sortDirection="ascending" />
					<column label="${c:l('FormFieldTitle_budgetItemType') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col"
						style="font-weight:bold" />
					<column label="${c:l('FormFieldTitle_amount') }" onDrop="move(event.dragged)"
						draggable="col" droppable="col" style="font-weight:bold" />
					<column label="${c:l('FormFieldTitle_purpose') }" onDrop="move(event.dragged)"
						draggable="col" droppable="col" style="font-weight:bold" />
					<column label="${c:l('FormFieldTitle_justification') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col"
						style="font-weight:bold" />
					<column label="${c:l('FormFieldTitle_Action') }" onDrop="move(event.dragged)"
						draggable="col" droppable="col" style="font-weight:bold" align="center" if="${isAdmin}"/>
				</columns>
			</grid>
		</div>
		<zscript><![CDATA[
	void move(Component dragged) {
		if (dragged.getClass().getName().endsWith("Column")) {
			int maxRows = dragged.getGrid().getRows().getChildren().size();
			int i = dragged.getParent().getChildren().indexOf(dragged);
			int j = self.getParent().getChildren().indexOf(self);

			//move celles for each row 
			for (int k = 0; k < maxRows; k++)
				self.getGrid().getCell(k, j).parent.insertBefore(self.getGrid()
						.getCell(k, i), self.getGrid().getCell(k, j));
		}

		self.parent.insertBefore(dragged, self);
	}
]]></zscript>
	</window>
</zk>