<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<?component name="findbox" macroURI="../macros/textFindIgnoreCase.zul" id="macro1"?>
<?component name="fromDatebox" macroURI="../macros/fromDateMacro.zul" id="macro2"?>
<?component name="thruDatebox" macroURI="../macros/thruDateMacro.zul" id="macro3"?>
<?component list="${loanTypesList}" renderer="${loanTypeItemRenderer}" name="selectbox" macroURI="../macros/findselectbox.zul" id="macro4" ?>
<zk xmlns:h="http://www.zkoss.org/2005/zk/native">
	<zscript>
	import com.ndz.controller.*;
	import org.ofbiz.entity.*;
	import org.ofbiz.base.util.*;
	Toolbarbutton myLoanBtn = arg.get("myLoanBtn");
	List loanTypes = null;
	GenericDelegator delegator = com.ndz.zkoss.util.HrmsInfrastructure.getDelegator();//GenericDelegator.getGenericDelegator("default");
	loanTypes = delegator.findByAnd("Enumeration", UtilMisc.toMap("enumTypeId",
			"ELOAN_TYPE"));
	loanTypes.add(0, null);
	loanTypesArray = loanTypes.toArray(new GenericValue[loanTypes.size()]);
	SimpleListModel loanTypesList = new SimpleListModel(loanTypesArray);
	public class LoanTypeItemRenderer implements ListitemRenderer {

		public LoanTypeItemRenderer() {
		}

		public void render(Listitem li, Object data) {
			if (data instanceof GenericValue) {
				GenericValue val = (GenericValue) data;
				li.setLabel(val.getString("description"));
				li.setValue(val.getString("enumId"));
			}
		}
	}
	ListitemRenderer loanTypeItemRenderer = new LoanTypeItemRenderer();
	SearchController controller = new SearchController();
	org.ofbiz.security.Security security = requestScope.get("security");
	boolean isManager = security.hasPermission("HUMANRES_MGR", userLogin);
	
</zscript>
	<window id="searchPanel" apply="${controller}" width="100%"
		onOK="activateSearch()">
		<custom-attributes entityName="MaxELoanDetail"></custom-attributes>
		<separator height="10px"></separator>
		<div style="margin-left:120px">
		<h:table>
			<h:tr>
				<h:td style="text-align:left">
					<findbox fieldLabel="${c:l('Hrms_LoanId') }" name="loanId" type="text" cols="20" />
				</h:td>
				<h:td>
					<selectbox value="${values}" fieldLabel="${c:l('Hrms_LoanType') }" name="loanType" />
				</h:td>
			</h:tr>
			<h:tr>
				<h:td>
					<div align="left">
						<fromDatebox fieldLabel="${c:l('HumanResLeaveSummaryFromDate') }"
							name="fromDate" type="date" />
					</div>
				</h:td>
				<h:td style="text-align:left">
					<thruDatebox fieldLabel="${c:l('HumanResLeaveSummaryThruDate') }"
						name="thruDate" type="date" />
				</h:td>
			</h:tr>
			<h:tr>
                <h:td style="text-align:left" >
                        <hbox>
                            <div width="150px" align="right">
                                <label value="${c:l('HRMS_EmployeeId') }" visible="${isManager}"/>
                            </div>
                            <div align="left" style="margin-left:8px">
                                <employeebox visible="${isManager}" >
                                    <attribute name="onChange"><![CDATA[
                                        controller.employeeId=self.getValue();
						]]></attribute>
                                </employeebox>
                            </div>
                        </hbox>
                </h:td>
            </h:tr>
			
		</h:table>
		</div>
		<box width="100%" height="30px" align="center">
			<hbox>
				<button label="${c:l('HumanResSearch') }" mold="os"
					id="searchButton"
					onClick="results.setVisible(true);results.setFocus(true)">
				</button>
				<button label="${c:l('HRMS_ResetButton') }"
					onClick='Events.postEvent("onClick",myLoanBtn,null)' />
			</hbox>
		</box>
		<zscript>
	void activateSearch() {
		Events.postEvent("onClick", searchButton, null);
	}
</zscript>
		<zscript>
	import org.zkoss.util.resource.Labels;
	import org.ofbiz.base.util.*;
	import org.zkoss.zk.ui.event.EventListener;
	ApplyLoanManagementController loanManagementController = new ApplyLoanManagementController();
	ClaimManagementController claimManagementController = new ClaimManagementController();
	class MyRowRenderer implements RowRenderer {

		MyRowRenderer() {
		}

		public void render(Row row, Object data) {
			org.ofbiz.entity.GenericValue gv = ((org.ofbiz.entity.GenericValue) data);
			row.setTooltiptext("DoubleClick To Edit/Submit");
			new Label(gv.getString("loanId")).setParent(row);
			org.ofbiz.entity.GenericValue personGV = delegator
					.findByPrimaryKey("Person", UtilMisc.toMap("partyId", gv
							.getString("partyId")));
			new Label(gv.getString("partyId") + " " + "-" + " "
					+ personGV.getString("firstName") + " "
					+ personGV.getString("lastName")).setParent(row);
			//new Label(gv.getString("loanType")).setParent(row);
			GenericValue loanTypeGV = delegator.findByPrimaryKey("Enumeration",
					UtilMisc.toMap("enumId", gv.getString("loanType")));
			new Label(loanTypeGV.getString("description")).setParent(row);
			java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd-MM-yyyy");
			
			
			if (gv.getDate("fromDate") != null) {
				new Label(sdf.format(gv.getDate("fromDate"))).setParent(row);
			} else {
				new Label(" ").setParent(row);
			}
			if (gv.getDate("thruDate") != null) {
				new Label(sdf.format(gv.getDate("thruDate"))).setParent(row);
			} else {
				new Label(" ").setParent(row);
			}
			//new Label(gv.getString("currencyUomId")).setParent(row);
			if (gv.getBigDecimal("loanAmount") != null) {
				new Label(com.ndz.zkoss.util.CurrencyFormatter.format(
						gv.getDouble("loanAmount")).toString()
						+ " " + gv.getString("currencyUomId")).setParent(row);
			} else {
				new Label(" ").setParent(row);
			}
			GenericValue statusIdGV = delegator.findByPrimaryKey("StatusItem",
					UtilMisc.toMap("statusId", gv.getString("statusId")));
			new Label(statusIdGV.getString("description")).setParent(row);
			if (gv.getBigDecimal("emi") != null) {
				new Label(com.ndz.zkoss.util.CurrencyFormatter.format(
						gv.getDouble("emi")).toString()).setParent(row);
			} else {
				new Label(" ").setParent(row);
			}
			if (gv.getString("employeeComment") != null) {
				new Label(gv.getString("employeeComment")).setParent(row);
			} else {
				new Label("").setParent(row);
			}
			if (gv.getString("hr_comment") != null) {
				new Label(gv.getString("hr_comment")).setParent(row);
			} else {
				new Label("").setParent(row);
			}
			if (gv.getString("adminComment") != null) {
				new Label(gv.getString("adminComment").toString())
						.setParent(row);
			} else {
				new Label("").setParent(row);
			}

			if (gv.getDouble("hr_period") != null) {
				Integer hrPeriod = gv.getDouble("hr_period").intValue();
				new Label(hrPeriod.toString()).setParent(row);
			} else {
				new Label("").setParent(row);
			}
			
			if(gv.getDouble("acceptedAmount") != null){
			new Label(com.ndz.zkoss.util.CurrencyFormatter.format(
					gv.getDouble("acceptedAmount")).toString()
					+ " " + gv.getString("currencyUomId")).setParent(row);
					}else{
					new Label("").setParent(row);
					}
			if(gv.getDouble("rejectedAmount") != null){
			new Label(com.ndz.zkoss.util.CurrencyFormatter.format(
					gv.getDouble("rejectedAmount")).toString()
					+ " " + gv.getString("currencyUomId")).setParent(row);
					}else{
					new Label("").setParent(row);
					}
			new Label(com.ndz.zkoss.util.CurrencyFormatter.format(
					gv.getDouble("interest")).toString()).setParent(row);
			org.ofbiz.entity.GenericValue personGV1 = delegator
					.findByPrimaryKey("Person", UtilMisc.toMap("partyId", gv
							.getString("updatedBy")));
			new Label(personGV1.getString("firstName") + " "
					+ personGV1.getString("lastName")).setParent(row);
			String updatedDate = null;
			if (gv.getTimestamp("updateDate") != null) {
				java.text.SimpleDateFormat formater = new java.text.SimpleDateFormat(
						"dd-MM-yyyy HH:mm:ss");
				updatedDate = formater.format(gv.getTimestamp("updateDate"));
				new Label(updatedDate.toString()).setParent(row);
			} else {
				new Label("").setParent(row);
			}

			if ((gv.getString("statusId")).equals("EL_SAVED")) {
				Button img = new com.ndz.zkoss.HrmsButton();
				img.setLabel("Delete");
				img.setParent(row);
				img.setTooltiptext("Click here to delete");
				img.setSclass("btnDelete");
				img.addEventListener("onClick", new EventListener() {

					public void onEvent(Event event) throws Exception {
						loanManagementController.deleteLoan(event, gv,
								searchButton);
					}
				});
				row.addEventListener("onDoubleClick", new EventListener() {
					public void onEvent(Event event) throws Exception {
						loanManagementController.showLoanWindow(event, gv);
					}
				});
			} else {
                    if(gv.getString("statusId").equals("EL_ADM_APPROVED")){
                            Toolbarbutton actionToolbarbutton =  new Toolbarbutton("EMI Info");
                            actionToolbarbutton.addEventListener("onClick", new EventListener() {
                            public void onEvent(Event event) throws Exception {
                            ApplyLoanManagementController.showEMIInfo(event,gv);
                            }
                            });
                            actionToolbarbutton.setParent(row);
                    }
                    else{
                            new Label("").setParent(row);
                    }
                    }
		        }
	}
	RowRenderer tableRenderer = new MyRowRenderer();
</zscript>
		<separator />
		<div id="results" visible="false">
			<h:table width="99%" style="border:0px" cellspacing="0px"
				cellpadding="0px">
				<h:tr>
					<h:td width="90%">
						<label value="${c:l('HRMS_SEARCHRESULTS') }"></label>
					</h:td>
					<h:td width="10%" style="text-align:right">
						<paging id="paging" width="100%" />
					</h:td>
				</h:tr>
			</h:table>
			<grid id="dataGrid" rowRenderer="${tableRenderer }">
				<columns menupopup="auto">
					<column label="${c:l('Hrms_LoanId') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Employee Id - Name"
						onDrop="move(event.dragged)" draggable="col" droppable="col"
						visible="false" />
					<column label="${c:l('Hrms_LoanType') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column
						label="${c:l('HumanResLeaveSummaryFromDate')}"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column
						label="${c:l('HumanResLeaveSummaryThruDate')}"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_LoanAmount') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_LoanStatus') }"
						width="100px" onDrop="move(event.dragged)" draggable="col"
						droppable="col" />
					<column label="${c:l('Hrms_EMI') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Employee Comments"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Manager Comments"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Admin Comments" visible="false"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="${c:l('Hrms_Period') }"
						visible="false" />
					<column label="${c:l('Hrms_AcceptedAmount') }"
						visible="false" />
					<column label="${c:l('Hrms_RejectedAmount') }"
						visible="false" />
					<column label="${c:l('Hrms_Interest') }"
						visible="false" />
					<column label="${c:l('Hrms_UpdatedBy') }"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Updated Date" visible="false"
						onDrop="move(event.dragged)" draggable="col" droppable="col" />
					<column label="Action" onDrop="move(event.dragged)"
						draggable="col" droppable="col" />
				</columns>
			</grid>
		</div>
		<zscript><![CDATA[
	void move(Component dragged) {
		if (dragged.getClass().getName().endsWith("Column")) {
			int maxRows = dragged.getGrid().getRows().getChildren().size();
			int i = dragged.getParent().getChildren().indexOf(dragged);
			int j = self.getParent().getChildren().indexOf(self);

			//move celles for each row 
			for (int k = 0; k < maxRows; k++)
				self.getGrid().getCell(k, j).parent.insertBefore(self.getGrid()
						.getCell(k, i), self.getGrid().getCell(k, j));
		}

		self.parent.insertBefore(dragged, self);
	}
	Events.postEvent("onClick", searchPanel.getFellow("searchButton"), null);
]]></zscript>
	</window>
</zk>