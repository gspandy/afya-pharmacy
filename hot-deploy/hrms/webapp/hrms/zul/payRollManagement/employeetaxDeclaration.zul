<?taglib uri="http://www.zkoss.org/dsp/web/core" prefix="c"?>
<?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" root="./taxDeclarationWindow"?>
<zk xmlns:n="http://www.zkoss.org/2005/zk/native">
    <zscript>
        <![CDATA[
	import com.hrms.payroll.composer.*;
	import org.ofbiz.entity.GenericValue;
	TaxDeclarationComposer taxComposer = new TaxDeclarationComposer();
	GenericValue userLogin = (GenericValue) Executions.getCurrent().getDesktop().getSession().getAttribute("userLogin");
	boolean isAdmin = security.hasPermission("HUMANRES_ADMIN", userLogin);
	boolean isManager = security.hasPermission("HUMANRES_MGR", userLogin);
	boolean isManagerViewSubOrdinate = com.ndz.zkoss.HrmsUtil.isManagerViewSubOrdinatePayroll();
]]>
    </zscript>
    <window title="${c:l('HRMS_TAX_DECLARATIONS') }" id="taxDeclarationWindow"
            apply="${taxComposer}">
        <separator height="10px"></separator>
        <n:table width="100%" CELLSPACING="12">
            <n:tr>
                <n:td style="text-align:right">
                    <label value="${c:l('FormFieldTitle_EmployeeId') }"
                           if="${isAdmin||isManager}" visible="${isManagerViewSubOrdinate}"/>
                </n:td>
                <n:td>
                    <employeebox id="employeeId" constraint="no empty"
                                 if="${isAdmin||isManager}"
                                 onSelect="saveTaxDeclaration.setDisabled(true);employee.setValue(self.selectedItem.description);taxComposer.setEmployeeId(self.selectedItem.label);
							enableSave(self.selectedItem.value);" visible="${isManagerViewSubOrdinate}"/>
                    <label id="employee"></label>
                </n:td>
            </n:tr>
            <n:tr>
                <n:td style="text-align:right">
                    <label value="${c:l('HRMS_FISCAL_YEAR') }"></label>
                </n:td>
                <n:td>
                    <combobox id="fiscalYearBox"
                              model="@{taxComposer.validTaxDeclList}" readonly="true">
                        <comboitem self="@{each='zk1'}" value="@{zk1}"
                                   label="@{zk1.hrName}">
                        </comboitem>
                    </combobox>
                    <!-- selectedItem=@{taxComposer.validTaxDecl} -->
                </n:td>
            </n:tr>
        </n:table>
        <separator></separator>
        <zscript>
            <![CDATA[
	void enableSave(String employeeId) {
	if (employeeId != null) {
		if (isAdmin && !employeeId.equals(userLogin.getString("partyId"))) {
			saveTaxDeclaration.setDisabled(false);
		} else
			if (isManager && employeeId.equals(userLogin.getString("partyId"))) {
				saveTaxDeclaration.setDisabled(false);
			}

		if (org.ofbiz.humanresext.util.HumanResUtil.checkPermission(employeeId, "HUMANRES_ADMIN",userLogin.getDelegator())) {
			saveTaxDeclaration.setDisabled(true);
		}
	} else {
		saveTaxDeclaration.setDisabled(false);
	}

	}
]]>
        </zscript>
        <zscript>
            <![CDATA[
	import com.nthdimenzion.humanres.taxdecl.TaxItem;
	class TableRowRenderer implements RowRenderer {
		public TableRowRenderer() {
		}

		public void render(Row row, Object data) {
		TaxItem ti = (TaxItem) data;
		System.out.println(" Composer " + taxComposer.isEditable());
		new Label(ti.getItemName()).setParent(row);
		if (taxComposer.isEditable()) {
			if ("NUMERIC".equals(ti.getItemTypeId())) {
				Decimalbox decimalBox = new Decimalbox();
				decimalBox.setFormat("###.##");
				decimalBox.setCols(20);
				decimalBox.setValue(new java.math.BigDecimal(ti.getNumValue()));
				AnnotateDataBinder binder = new AnnotateDataBinder(decimalBox);
				binder.bindBean("zk", ti);
				binder.addBinding(decimalBox, "value", "zk.numValue");
				binder.loadAll();
				decimalBox.setParent(row);
				Constraint constraint = new Constraint() {
					public void validate(Component comp, Object value) throws WrongValueException {
					if (value != null) {
						double valEntered = ((java.math.BigDecimal) value).doubleValue();
						if (value == null || valEntered > ti.getMaxAmount() || valEntered < 0)
							throw new WrongValueException(comp, "Cannot exceed " + ti.getMaxAmount() + "0");
					}
					}
				};
				decimalBox.setConstraint(constraint);
			} else
				if ("BOOLEAN".equals(ti.getItemTypeId())) {
					Checkbox checkbox = new Checkbox();
					checkbox.setChecked(Boolean.parseBoolean(ti.getStringValue()));
					checkbox.setParent(row);
					AnnotateDataBinder binder = new AnnotateDataBinder(checkbox);
					binder.bindBean("zk", ti);
					binder.addBinding(checkbox, "value", "zk.stringValue");
					binder.loadAll();
				} else
					if ("TEXT".equals(ti.getItemTypeId())) {
						Textbox textbox = new Textbox();
						textbox.setParent(row);
						textbox.setValue(ti.getStringValue());
						AnnotateDataBinder binder = new AnnotateDataBinder(textbox);
						binder.bindBean("zk", ti);
						binder.addBinding(textbox, "value", "zk.stringValue");
						binder.loadAll();
					} else
						if ("DATE".equals(ti.getItemTypeId())) {
							Vbox vbox = new Vbox();
							Datebox datebox = new Datebox();
							datebox.setParent(vbox);
							datebox.setFormat("MMM dd,yyyy");
							java.text.SimpleDateFormat dateFormatter = new java.text.SimpleDateFormat("MMM dd, yyyy");
							AnnotateDataBinder binder = new AnnotateDataBinder(datebox);
							binder.bindBean("zk", ti);
							binder.addBinding(datebox, "value", "zk.stringValue");
							binder.loadAll();

							Label l = new Label();
							if (ti.getStringValue() != null)
								l.setValue(dateFormatter.parse(ti.getStringValue()).toString());
							l.setParent(vbox);

							vbox.setParent(row);
						} else
							if ("LONGTEXT".equals(ti.getItemTypeId())) {
								Textbox textbox = new Textbox();
								textbox.setRows(3);
								textbox.setParent(row);
								textbox.setValue(ti.getStringValue());
								AnnotateDataBinder binder = new AnnotateDataBinder(textbox);
								binder.bindBean("zk", ti);
								binder.addBinding(textbox, "value", "zk.stringValue");
								binder.loadAll();
							}
		} else {
			System.out.println(ti.getNumValue());
			Label l = new Label(String.valueOf(ti.getNumValue()));
			AnnotateDataBinder binder = new AnnotateDataBinder(l);
			binder.bindBean("zk", ti);
			binder.addBinding(l, "value", "zk.stringValue");
			binder.loadAll();
			l.setParent(row);
		}
		}
	}
	TableRowRenderer taxItemRenderer = new TableRowRenderer();
]]>
        </zscript>
        <separator></separator>
        <panel id="taxDeclPanel">
            <caption label="${c:l('HRMS_MY_TAX_DECLARATION') }"></caption>
            <panelchildren>
                <grid model="@{taxComposer.taxCategoryModel}"
                      id="taxCategoryGrid" mold="paging" pageSize="2">
                    <columns>
                        <column width="250px"></column>
                        <column></column>
                    </columns>
                    <rows>
                        <row self="@{each='tc'}">
                            <div>
                                <label value="@{tc.categoryName}"></label>
                                <separator></separator>
                                <label value="@{tc.description}"
                                       style="font-size:10px;margin-left:20px">
                                </label>
                            </div>
                            <grid model="@{tc.taxItems}"
                                  rowRenderer="${taxItemRenderer}">
                            </grid>
                        </row>
                    </rows>
                </grid>
            </panelchildren>
        </panel>
        <box width="100%" style="text-align:center" align="center">
            <hbox>
                <toolbarbutton id="saveTaxDeclaration"
                               label="${c:l('HRMS_SAVE_TAX_DECLARATION') }" disabled="${isAdmin}">
                </toolbarbutton>
                <toolbarbutton id="approveTaxDeclaration"
                               label="${c:l('HRMS_APPROVE_TAX_DECLARATION') }" if="${isAdmin}"/>
            </hbox>
        </box>
    </window>

</zk>