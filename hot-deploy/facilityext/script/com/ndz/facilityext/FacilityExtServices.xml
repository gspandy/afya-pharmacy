<?xml version="1.0" encoding="UTF-8"?>
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="facilityGenericPermission" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Main permission logic" use-transaction="true">
        <set field="mainAction" from="parameters.mainAction" set-if-empty="true" set-if-null="false"/>
        <if-empty field="mainAction">
            <add-error error-list-name="error_list">
                <fail-message message="In the permission-service element for the facilityGenericPermission service the main-action attribute was missing but is required"/>
            </add-error>
            <check-errors error-code="error" error-list-name="error_list"/>
        </if-empty>
        <set field="callingMethodName" from="parameters.resourceDescription" set-if-empty="true" set-if-null="false"/>
        <set field="checkAction" from="parameters.mainAction" set-if-empty="true" set-if-null="false"/>
        <call-simple-method method-name="checkFacilityRelatedPermission"/>
        <if-empty field="error_list">
            <set field="hasPermission" set-if-empty="true" set-if-null="false" type="Boolean" value="true"/>
            <field-to-result field="hasPermission"/>
            <else>
                <property-to-field field="failMessage" no-locale="false" property="ProductFacilityPermissionError" resource="ProductUiLabels"/>
                <set field="hasPermission" set-if-empty="true" set-if-null="false" type="Boolean" value="false"/>
                <field-to-result field="hasPermission"/>
                <field-to-result field="failMessage"/>
            </else>
        </if-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="listInventoryItems" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Get all Inventory Items for a GRN" use-transaction="true">
        <entity-condition distinct="false" entity-name="ShipmentReceipt" filter-by-date="false" list="receipts" use-cache="false">
            <condition-expr field-name="grnId" from-field="parameters.grnId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
        </entity-condition>
        <set field="inventoryItems" set-if-empty="true" set-if-null="false" type="List"/>
        <log level="always" message="RECEIPTS ${receipts}"/>
        <iterate entry="receipt" list="receipts">
            <entity-condition distinct="false" entity-name="ShipmentReceiptInvTransfer" filter-by-date="false" list="invTransfers" use-cache="false">
                <condition-expr field-name="receiptId" from-field="receipt.receiptId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </entity-condition>
            <log level="always" message="invTransfers ${invTransfers}"/>
            <call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="getFirst" ret-field="invTransfer">
                <field field="invTransfers" type="List"/>
            </call-class-method>
            <log level="always" message="INV TRANSER (********** ${invTransfer}"/>
            <if-not-empty field="invTransfer">
                <entity-one auto-field-map="true" entity-name="InventoryTransfer" use-cache="false" value-field="invItem">
                    <field-map field-name="inventoryTransferId" from-field="invTransfer.inventoryTransferId"/>
                </entity-one>
                <field-to-list field="invItem.inventoryItemId" list="inventoryItems"/>
            </if-not-empty>
            <entity-one auto-field-map="true" entity-name="ShipmentReceipt" use-cache="false" value-field="invItem">
                <field-map field-name="receiptId" from-field="receipt.receiptId"/>
            </entity-one>
            <field-to-list field="invItem.inventoryItemId" list="inventoryItems"/>
        </iterate>
        <field-to-result field="inventoryItems" result-name="inventoryItems"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="getSupplierForOrder" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-condition distinct="false" entity-name="OrderRole" filter-by-date="false" list="orderRoles" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="roleTypeId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals" value="SUPPLIER_AGENT"/>
                <condition-expr field-name="orderId" from-field="parameters.orderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </condition-list>
        </entity-condition>
        <first-from-list entry="orderRole" list="orderRoles"/>
        <entity-one auto-field-map="true" entity-name="PartyGroup" use-cache="false" value-field="partyGroup">
            <field-map field-name="partyId" from-field="orderRole.partyId"/>
        </entity-one>
        <log level="info" message="*********** PARTY GROUP ******** ${partyGroup}"/>
        <field-to-result field="partyGroup" result-name="partyGroup"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="checkGRNIfComplete" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Checks if all the Inventory Items are Putaway if yes completes the GRN" use-transaction="true">
        <set field="allNonPalletItemsComplete" set-if-empty="true" set-if-null="false" type="Boolean" value="true"/>
        <set field="allPalletItemsComplete" set-if-empty="true" set-if-null="false" type="Boolean" value="true"/>
        <entity-condition distinct="false" entity-name="ShipmentReceipt" filter-by-date="false" list="putawayreceipts" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="grnId" from-field="parameters.grnId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="palletize" from-field="'Y'" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="not-equals"/>
            </condition-list>
        </entity-condition>
        <iterate entry="putawayReceipt" list="putawayreceipts">
            <get-related-one relation-name="InventoryItem" to-value-field="invItem" use-cache="false" value-field="putawayReceipt"/>
            <if-compare field="invItem.putaway" operator="equals" type="String" value="N">
                <log level="info" message="Not all Inventory Items are Putaway"/>
                <set field="allNonPalletItemsComplete" set-if-empty="true" set-if-null="false" type="Boolean" value="false"/>
            </if-compare>
        </iterate>
        <entity-condition distinct="false" entity-name="ShipmentReceipt" filter-by-date="false" list="palletreceipts" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="grnId" from-field="parameters.grnId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="palletize" from-field="'Y'" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </condition-list>
        </entity-condition>
        <iterate entry="palletReceipt" list="palletreceipts">
            <entity-condition distinct="false" entity-name="ShipmentReceiptInvTransfer" filter-by-date="false" list="invXfrs" use-cache="false">
                <condition-expr field-name="receiptId" from-field="palletReceipt.receiptId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </entity-condition>
            <iterate entry="receiptXfr" list="invXfrs">
                <get-related-one relation-name="InventoryTransfer" to-value-field="invXfr" use-cache="false" value-field="receiptXfr"/>
                <get-related-one relation-name="InventoryItem" to-value-field="invItem" use-cache="false" value-field="invXfr"/>
                <if-compare field="invItem.putaway" operator="equals" type="String" value="N">
                    <log level="info" message="Not all Inventory Items are Putaway"/>
                    <set field="allPalletItemsComplete" set-if-empty="true" set-if-null="false" type="Boolean" value="false"/>
                </if-compare>
            </iterate>
        </iterate>
        <if>
            <condition>
                <and>
                    <if-compare field="allPalletItemsComplete" operator="equals" type="Boolean" value="true"/>
                    <if-compare field="allNonPalletItemsComplete" operator="equals" type="Boolean" value="true"/>
                </and>
            </condition>
            <then>
                <log level="info" message="All INVENTORY ITEMS HAVE BEEN PUTAWAY. THE GRN STATUS IS TO BE MARKED AS COMPLETE"/>
                <entity-one auto-field-map="true" entity-name="ShipmentGrn" use-cache="false" value-field="grn">
                    <field-map field-name="grnId" from-field="parameters.grnId"/>
                </entity-one>
                <set field="grn.statusId" set-if-empty="true" set-if-null="false" value="GRN_COMPLETED"/>
                <store-value do-cache-clear="true" value-field="grn"/>
            </then>
        </if>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="updateSupplierProduct" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ShipmentGrn" use-cache="false" value-field="grn">
            <field-map field-name="grnId" from-field="parameters.grnId"/>
        </entity-one>
        <if>
            <condition>
                <if-compare field="grn.grnTypeId" operator="not-equals" type="String" value="STOCK_TRANSFER"/>
            </condition>
            <then>
                <entity-condition distinct="false" entity-name="SupplierProduct" filter-by-date="false" list="suppProducts" use-cache="false">
                    <condition-list combine="and">
                        <condition-expr field-name="productId" from-field="parameters.productId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                        <condition-expr field-name="partyId" from-field="parameters.supplierPartyId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    </condition-list>
                </entity-condition>
                <iterate entry="suppProduct" list="suppProducts">
                    <log level="info" message="SUPP PRODUCT CODE===${parameters.suppProductCode}"/>
                    <set field="suppProduct.supplierProductName" from="parameters.suppProductCode" set-if-empty="true" set-if-null="false"/>
                    <set field="suppProduct.supplierProductId" from="parameters.suppProductCode" set-if-empty="true" set-if-null="false"/>
                    <store-value do-cache-clear="true" value-field="suppProduct"/>
                </iterate>
            </then>
        </if>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="mergeInventory" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="InventoryItem" use-cache="false" value-field="fromInventory">
            <field-map field-name="inventoryItemId" from-field="parameters.fromInventoryItemId"/>
        </entity-one>
        <entity-one auto-field-map="true" entity-name="InventoryItem" use-cache="false" value-field="toInventory">
            <field-map field-name="inventoryItemId" from-field="parameters.toInventoryItemId"/>
        </entity-one>
        <if-compare-field field="toInventory.productId" operator="not-equals" to-field="fromInventory.productId" type="String">
            <string-to-list list="error_list" string="Inventory Item should have same Product."/>
        </if-compare-field>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!--<call-class-method method-name="getPackedAndLooseQty"
			class-name="com.ndz.transformation.ProductTransformationActions"
			ret-field="packedAndLoose">
			<field field="fromInventory.availableToPromiseTotal" type="BigDecimal" />
			<field field="fromInventory.productId" type="String" />
			<field field="baseUom.uomId" type="String" />
			<field field="delegator" type="org.ofbiz.entity.Delegator" />
		</call-class-method>

		-->
        <set field="fromPacked" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
        <!-- value="${packedAndLoose[0]}" -->
        <set field="fromLoose" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
        <!-- value="${packedAndLoose[1]}" -->
        <log level="info" message="**********From packed* is ====== ${fromPacked} + ++++++++++++++++++   ++++++++++"/>
        <log level="info" message="**********From Loose*  is ====== ${fromLoose} +++++++++++++++++++++++++++++++++++++++"/>
        <if-empty field="fromLoose">
            <string-to-list list="error_list" string="The 'From Inventory Item' does not have loose quantity."/>
        </if-empty>
        <check-errors error-code="error" error-list-name="error_list"/>
        <!--<call-class-method method-name="getPackedAndLooseQty"
			class-name="com.ndz.transformation.ProductTransformationActions"
			ret-field="packedAndLoose">
			<field field="toInventory.availableToPromiseTotal" type="BigDecimal" />
			<field field="toInventory.productId" type="String" />
			<field field="baseUom.uomId" type="String" />
			<field field="delegator" type="org.ofbiz.entity.Delegator" />
		</call-class-method>

		-->
        <set field="toPacked" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
        <!-- value="${packedAndLoose[0]}" -->
        <set field="toLoose" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
        <!-- value="${packedAndLoose[1]}" -->
        <if-empty field="toLoose">
            <string-to-list list="error_list" string="The 'To Inventory Item' does not have loose quantity."/>
        </if-empty>
        <set field="limit" from="baseUom.packFactor" set-if-empty="true" set-if-null="false"/>
        <log level="info" message=" ******** Inside Less Block ********* "/>
        <set field="createInventoryItemDetailInMap.inventoryItemId" from="fromInventory.inventoryItemId" set-if-empty="true" set-if-null="false"/>
        <calculate decimal-scale="2" field="availableToPromiseTotal" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="fromInventory.availableToPromiseTotal" operator="negative"/>
        </calculate>
        <calculate decimal-scale="2" field="quantityOnHandDiff" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="fromInventory.quantityOnHandTotal" operator="negative"/>
        </calculate>
        <set field="createInventoryItemDetailInMap.availableToPromiseDiff" from="availableToPromiseTotal" set-if-empty="true" set-if-null="false"/>
        <set field="createInventoryItemDetailInMap.quantityOnHandDiff" from="quantityOnHandDiff" set-if-empty="true" set-if-null="false"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createInventoryItemDetailInMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
        <clear-field field="createInventoryItemDetailInMap"/>
        <set field="createInventoryItemDetailInMap.inventoryItemId" from="toInventory.inventoryItemId" set-if-empty="true" set-if-null="false"/>
        <set field="createInventoryItemDetailInMap.availableToPromiseDiff" from="fromInventory.availableToPromiseTotal" set-if-empty="true" set-if-null="false"/>
        <set field="createInventoryItemDetailInMap.quantityOnHandDiff" from="fromInventory.quantityOnHandTotal" set-if-empty="true" set-if-null="false"/>
        <call-service break-on-error="true" error-code="error" in-map-name="createInventoryItemDetailInMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
        <calculate decimal-scale="2" field="mergedQty" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="toInventory.availableToPromiseTotal" operator="get"/>
            <calcop field="fromInventory.availableToPromiseTotal" operator="add"/>
        </calculate>
        <!--
			<if-compare operator="greater-equals" value="${limit}"
			field="mergedQty" type="BigDecimal"> <set
			field="xferMap.inventoryItemId"
			from-field="toInventory.inventoryItemId" /> <set
			field="xferMap.facilityId" from-field="toInventory.facilityId" />
			<set field="xferMap.facilityIdTo" from-field="toInventory.facilityId"
			/> <set field="xferMap.locationSeqId"
			from-field="toInventory.locationSeqId" /> <set
			field="xferMap.locationSeqIdTo"
			from-field="parameters.locationSeqIdTo" /> <set
			field="xferMap.xferQty" from-field="limit" /> <set
			field="xferMap.statusId" value="IXF_COMPLETE" /> <call-service
			service-name="createInventoryTransfer"
			in-map-name="xferMap"></call-service> </if-compare>
		-->
        <string-to-list list="successMessageList" string="Action completed successfully."/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="createWhmPhysicalAndItemVariance" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <set field="parameters.generalComments" set-if-empty="true" set-if-null="false" value="cc_"/>
        <string-append field="parameters.generalComments" string="${parameters.varianceReasonId}"/>
        <call-service break-on-error="true" error-code="error" in-map-name="parameters" include-user-login="true" require-new-transaction="false" service-name="createPhysicalInventoryAndVariance" success-code="success">
            <results-to-map map-name="outMap"/>
        </call-service>
        <field-to-result field="outMap.physicalInventoryId" result-name="physicalInventoryId"/>
        <string-to-list list="successMessageList" string="Action completed successfully."/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="createPurchaseReturn" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <call-service break-on-error="true" error-code="error" in-map-name="parameters" include-user-login="true" require-new-transaction="false" service-name="createPhysicalInventoryAndVariance" success-code="success">
            <results-to-map map-name="outMap"/>
        </call-service>
        <field-to-result field="outMap.physicalInventoryId" result-name="physicalInventoryId"/>
        <string-to-list list="successMessageList" string="Action completed successfully."/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="reduceInvQoh" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-condition distinct="false" entity-name="ProductBundleTxnDetail" filter-by-date="false" list="txns" use-cache="false">
            <condition-expr field-name="productBundleTxnId" from-field="parameters.productBundleTxnId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
        </entity-condition>
        <iterate entry="txn" list="txns">
            <calculate decimal-scale="2" field="quantityOnHandDiff" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="txn.quantityToUse" operator="negative"/>
            </calculate>
            <entity-one auto-field-map="true" entity-name="InventoryItem" use-cache="false" value-field="inv">
                <field-map field-name="inventoryItemId" from-field="txn.inventoryItemId"/>
            </entity-one>
            <log level="info" message="************ quantityOnHandDiff ======== ${quantityOnHandDiff}"/>
            <set field="createInventoryItemDetailInMap.inventoryItemId" from="txn.inventoryItemId" set-if-empty="true" set-if-null="false"/>
            <log level="info" message="************ txn.inventoryItemId ======== ${txn.inventoryItemId}"/>
            <set field="createInventoryItemDetailInMap.quantityOnHandDiff" from="quantityOnHandDiff" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="createInventoryItemDetailInMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
            <clear-field field="createInventoryItemDetailInMap"/>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="getCustomerForOrder" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-condition distinct="false" entity-name="OrderRole" filter-by-date="false" list="orderRoles" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="roleTypeId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals" value="END_USER_CUSTOMER"/>
                <condition-expr field-name="orderId" from-field="parameters.orderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </condition-list>
        </entity-condition>
        <first-from-list entry="orderRole" list="orderRoles"/>
        <entity-one auto-field-map="true" entity-name="PartyGroup" use-cache="false" value-field="partyGroup">
            <field-map field-name="partyId" from-field="orderRole.partyId"/>
        </entity-one>
        <log level="info" message="*********** PARTY GROUP ******** ${partyGroup}"/>
        <field-to-result field="partyGroup" result-name="partyGroup"/>
    </simple-method>
    <!-- Updates the product bundling status. -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="updateProductBundlingStatus" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Updates the status of ProductBundle in database." use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ProductBundle" use-cache="false" value-field="productBundle">
            <field-map field-name="productBundleId" from-field="parameters.productBundleId"/>
        </entity-one>
        <calculate decimal-scale="2" field="productBundle.pendingQuantity" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="productBundle.pendingQuantity" operator="subtract">
                <calcop field="parameters.quantityToBundle" operator="get"/>
            </calcop>
        </calculate>
        <if-compare field="productBundle.pendingQuantity" operator="less" type="BigDecimal" value="0">
            <string-to-list list="error_list" string="Insufficient quantity to bundle."/>
        </if-compare>
        <check-errors error-code="error" error-list-name="error_list"/>
        <if-compare field="productBundle.pendingQuantity" operator="equals" type="BigDecimal" value="0">
            <set field="productBundle.statusId" set-if-empty="true" set-if-null="false" value="COMPLETE"/>
        </if-compare>
        <store-value do-cache-clear="true" value-field="productBundle"/>
    </simple-method>
    <!-- Updates the product bundling status. -->

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="updateProductSplittingStatus" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Updates the status of Splitting in database." use-transaction="true">
        <log level="always" message="INV TRANSER (********** ${parameters.quantityDone}"/>
        <entity-one auto-field-map="true" entity-name="ProductTransfer" use-cache="false" value-field="productTransfer">
            <field-map field-name="productTransferId" from-field="parameters.productTransferId"/>
        </entity-one>
        <calculate decimal-scale="2" field="productTransfer.pendingQuantity" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="productTransfer.pendingQuantity" operator="subtract">
                <calcop field="parameters.quantityDone" operator="get"/>
            </calcop>
        </calculate>
        <if-compare field="productTransfer.pendingQuantity" operator="less" type="BigDecimal" value="0">
            <string-to-list list="error_list" string="Insufficient quantity to Split."/>
        </if-compare>
        <check-errors error-code="error" error-list-name="error_list"/>
        <if-compare field="productTransfer.pendingQuantity" operator="equals" type="BigDecimal" value="0">
            <set field="productTransfer.statusId" set-if-empty="true" set-if-null="false" value="COMPLETED"/>
        </if-compare>
        <store-value do-cache-clear="true" value-field="productTransfer"/>
    </simple-method>


    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="getReserveOrderItemDetails" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-condition distinct="false" entity-name="ReserveOrderItem" filter-by-date="false" list="reserveOrderItems" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="orderId" from-field="parameters.reserveOrderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="productId" from-field="parameters.productId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </condition-list>
        </entity-condition>
        <set field="atp" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0"/>
        <set field="reserveOrderItemSeqId" set-if-empty="true" set-if-null="false" value="N/A"/>
        <if-not-empty field="reserveOrderItems">
            <first-from-list entry="reserveOrderItem" list="reserveOrderItems"/>
            <set field="reserveOrderItemSeqId" from="reserveOrderItem.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
            <if-not-empty field="reserveOrderItem.quantityReleased">
                <calculate decimal-scale="2" field="atp" rounding-mode="HalfEven" type="BigDecimal">
                    <calcop field="reserveOrderItem.quantity" operator="subtract">
                        <calcop field="reserveOrderItem.quantityReleased" operator="get"/>
                    </calcop>
                </calculate>
                <else>
                    <set field="atp" from="reserveOrderItem.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
                </else>
            </if-not-empty>
        </if-not-empty>
        <field-to-result field="reserveOrderItemSeqId" result-name="reserveOrderItemSeqId"/>
        <field-to-result field="atp" result-name="atp"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="getReserveOrderItemBalQty" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
        <entity-one auto-field-map="true" entity-name="OrderItem" use-cache="false" value-field="orderItem"/>
        <call-bsh>
                    orderReadHelper = new org.ofbiz.order.order.OrderReadHelper(orderHeader);
					itemQuantity = orderReadHelper.getOrderItemQuantity(orderItem);
					itemReservedQuantity = orderReadHelper.getItemReservedQuantity(orderItem);
                    parameters.put("quantityToReserve",itemQuantity.subtract(itemReservedQuantity));
    		 
		</call-bsh>
        <field-to-result field="parameters.quantityToReserve" result-name="quantityToReserve"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_"
     event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true"
      method-name="createReserveOrderHeader" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Create Reserve Order Header" use-transaction="true">
        <make-value entity-name="ReserveOrderHeader" value-field="newEntity"/>
        <if-not-empty field="parameters.orderId">
            <set field="newEntity.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
            <else>
                <sequenced-id field="newEntity.orderId" get-long-only="false" sequence-name="ReserveOrderHeader"/>
            </else>
        </if-not-empty>
        <field-to-result field="newEntity.orderId" result-name="orderId"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="createReserveOrderItem" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Create Reserve Order Item" use-transaction="true">
        <entity-condition distinct="false" entity-name="ReserveOrderItem" filter-by-date="false" list="orderItems" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="orderId" from-field="parameters.orderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="productId" from-field="parameters.productId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </condition-list>
        </entity-condition>
        <if-not-empty field="orderItems">
            <first-from-list entry="existingEntity" list="orderItems"/>
            <calculate decimal-scale="2" field="existingEntity.quantity" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="parameters.quantity" operator="add"/>
                <calcop field="existingEntity.quantity" operator="get"/>
            </calculate>
            <store-value do-cache-clear="true" value-field="existingEntity"/>
        </if-not-empty>
        <if-empty field="orderItems">
            <make-value entity-name="ReserveOrderItem" value-field="newEntity"/>
            <if-not-empty field="parameters.orderItemSeqId">
                <set field="newEntity.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                <else>
                    <sequenced-id field="newEntity.orderItemSeqId" get-long-only="false" sequence-name="ReserveOrderItem"/>
                </else>
            </if-not-empty>
            <set field="newEntity.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
            <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
            <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        </if-empty>
        <field-to-result field="parameters.orderId" result-name="orderId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="cancelReserveOrderReservation" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-condition distinct="false" entity-name="ReserveOrderItemInvRes" filter-by-date="false" list="reservedInvs" use-cache="false">
            <condition-list combine="and">
                <condition-expr field-name="reserveOrderId" from-field="parameters.reserveOrderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                <condition-expr field-name="reserveOrderItemSeqId" from-field="parameters.reserveOrderItemSeqId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
            </condition-list>
        </entity-condition>
        <iterate entry="reservedInv" list="reservedInvs">
            <set field="createDetailMap.inventoryItemId" from="reservedInv.inventoryItemId" set-if-empty="true" set-if-null="false"/>
            <set field="createDetailMap.availableToPromiseDiff" from="reservedInv.quantity" set-if-empty="true" set-if-null="false"/>
            <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
            <remove-value do-cache-clear="true" value-field="reservedInv"/>
        </iterate>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="reserveForInventoryItemInline" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Does a reservation for one InventoryItem, meant to be called in-line" use-transaction="true">
        <!--
			only do something with this inventoryItem if there is more inventory
			to reserve
		-->
        <if-compare field="parameters.quantityNotReserved" operator="greater" type="BigDecimal" value="0">
            <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" type="String" value="SERIALIZED_INV_ITEM">
                <if-compare field="inventoryItem.statusId" operator="equals" type="String" value="INV_AVAILABLE">
                    <!-- change status on inventoryItem -->
                    <set field="inventoryItem.statusId" set-if-empty="true" set-if-null="false" value="INV_PROMISED"/>
                    <store-value do-cache-clear="true" value-field="inventoryItem"/>
                    <!-- store ReserveOrderItemInvRes record -->
                    <call-simple-method method-name="getPromisedDateTimeForRO"/>
                    <set field="reserveOisgirMap.reserveOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                    <set field="reserveOisgirMap.reserveOrderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                    <set field="reserveOisgirMap.inventoryItemId" from="lastNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                    <set field="reserveOisgirMap.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="reserveOisgirMap" include-user-login="true" require-new-transaction="false" service-name="reserveOrderItemInventoryForRO" success-code="success"/>
                    <clear-field field="reserveOisgirMap"/>
                    <calculate decimal-scale="2" field="parameters.quantityNotReserved" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="parameters.quantityNotReserved" operator="subtract">
                            <number value="1.0"/>
                        </calcop>
                    </calculate>
                </if-compare>
            </if-compare>
            <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" type="String" value="NON_SERIAL_INV_ITEM">
                <!-- check reasonenumId reserve for ebay inventory  -->
                <if-not-empty field="parameters.reserveReasonEnumId">
                    <if-compare field="parameters.reserveReasonEnumId" operator="equals" type="String" value="EBAY_INV_RES">
                        <set field="ebayReserveReasonEnumId" from="parameters.reserveReasonEnumId" set-if-empty="true" set-if-null="false"/>
                    </if-compare>
                </if-not-empty>
                <!--
					reduce atp on inventoryItem if availableToPromise greater than 0,
					if not the code at the end of this method will handle it
				-->
                <if>
                    <condition>
                        <and>
                            <if-compare field="inventoryItem.statusId" operator="not-equals" type="String" value="INV_NS_ON_HOLD"/>
                            <if-compare field="inventoryItem.statusId" operator="not-equals" type="String" value="INV_NS_DEFECTIVE"/>
                            <not>
                                <if-empty field="inventoryItem.availableToPromiseTotal"/>
                            </not>
                            <if-compare field="inventoryItem.availableToPromiseTotal" operator="greater" type="BigDecimal" value="0"/>
                        </and>
                    </condition>
                    <then>
                        <if-compare-field field="parameters.quantityNotReserved" operator="greater" to-field="inventoryItem.availableToPromiseTotal" type="BigDecimal">
                            <set field="parameters.deductAmount" from="inventoryItem.availableToPromiseTotal" set-if-empty="true" set-if-null="false"/>
                            <else>
                                <set field="parameters.deductAmount" from="parameters.quantityNotReserved" set-if-empty="true" set-if-null="false"/>
                            </else>
                        </if-compare-field>
                        <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
                        <set field="createDetailMap.inventoryItemId" from="inventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                        <set field="createDetailMap.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                        <set field="createDetailMap.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                        <calculate decimal-scale="2" field="createDetailMap.availableToPromiseDiff" rounding-mode="HalfEven" type="BigDecimal">
                            <calcop field="parameters.deductAmount" operator="negative"/>
                        </calculate>
                        <if-not-empty field="ebayReserveReasonEnumId">
                            <set field="createDetailMap.reasonEnumId" from="parameters.reserveReasonEnumId" set-if-empty="true" set-if-null="false"/>
                        </if-not-empty>
                        <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
                        <clear-field field="createDetailMap"/>
                        <!--
							create ReserveOrderItemInvRes record and check for reserved from
							ebay don't need shipgroup
						-->
                        <if-empty field="ebayReserveReasonEnumId">
                            <call-simple-method method-name="getPromisedDateTimeForRO"/>
                            <set field="reserveOisgirMap.reserveOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                            <set field="reserveOisgirMap.reserveOrderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                            <set field="reserveOisgirMap.inventoryItemId" from="lastNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                            <set field="reserveOisgirMap.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
                            <call-service break-on-error="true" error-code="error" in-map-name="reserveOisgirMap" include-user-login="true" require-new-transaction="false" service-name="reserveOrderItemInventoryForRO" success-code="success"/>
                            <clear-field field="reserveOisgirMap"/>
                        </if-empty>
                        <calculate decimal-scale="2" field="parameters.quantityNotReserved" rounding-mode="HalfEven" type="BigDecimal">
                            <calcop field="parameters.quantityNotReserved" operator="subtract">
                                <calcop field="parameters.deductAmount" operator="get"/>
                            </calcop>
                        </calculate>
                    </then>
                </if>
                <!--
					keep track of the last non-serialized inventory item for use if
					inventory is not required for purchase
				-->
                <!-- use env variable named lastNonSerInventoryItem -->
                <set field="lastNonSerInventoryItem" from="inventoryItem" set-if-empty="true" set-if-null="false"/>
            </if-compare>
        </if-compare>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="reserveOrderForInventoryItemInline" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Does a reservation for one InventoryItem, meant to be called in-line" use-transaction="true">
        <!--
			only do something with this inventoryItem if there is more inventory
			to reserve
		-->
        <if-compare field="parameters.quantityNotReserved" operator="greater" type="BigDecimal" value="0">
            <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" type="String" value="SERIALIZED_INV_ITEM">
                <if-compare field="inventoryItem.statusId" operator="equals" type="String" value="INV_AVAILABLE">
                    <!-- change status on inventoryItem -->
                    <set field="inventoryItem.statusId" set-if-empty="true" set-if-null="false" value="INV_PROMISED"/>
                    <store-value do-cache-clear="true" value-field="inventoryItem"/>
                    <!-- store ReserveOrderItemInvRes record -->
                    <call-simple-method method-name="getPromisedDateTimeForRO"/>
                    <set field="reserveOisgirMap.reserveOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                    <set field="reserveOisgirMap.reserveOrderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                    <set field="reserveOisgirMap.inventoryItemId" from="lastNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                    <set field="reserveOisgirMap.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="reserveOisgirMap" include-user-login="true" require-new-transaction="false" service-name="reserveOrderItemInventoryForRO" success-code="success"/>
                    <clear-field field="reserveOisgirMap"/>
                    <calculate decimal-scale="2" field="parameters.quantityNotReserved" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="parameters.quantityNotReserved" operator="subtract">
                            <number value="1.0"/>
                        </calcop>
                    </calculate>
                </if-compare>
            </if-compare>
            <if-compare field="inventoryItem.inventoryItemTypeId" operator="equals" type="String" value="NON_SERIAL_INV_ITEM">
                <!-- check reasonenumId reserve for ebay inventory  -->
                <if-not-empty field="parameters.reserveReasonEnumId">
                    <if-compare field="parameters.reserveReasonEnumId" operator="equals" type="String" value="EBAY_INV_RES">
                        <set field="ebayReserveReasonEnumId" from="parameters.reserveReasonEnumId" set-if-empty="true" set-if-null="false"/>
                    </if-compare>
                </if-not-empty>
                <!--
					reduce atp on inventoryItem if availableToPromise greater than 0,
					if not the code at the end of this method will handle it
				-->
                <if>
                    <condition>
                        <and>
                            <if-compare field="inventoryItem.statusId" operator="not-equals" type="String" value="INV_NS_ON_HOLD"/>
                            <if-compare field="inventoryItem.statusId" operator="not-equals" type="String" value="INV_NS_DEFECTIVE"/>
                            <not>
                                <if-empty field="inventoryItem.availableToPromiseTotal"/>
                            </not>
                            <if-compare field="inventoryItem.availableToPromiseTotal" operator="greater" type="BigDecimal" value="0"/>
                        </and>
                    </condition>
                    <then>
                        <if-compare-field field="parameters.quantityNotReserved" operator="greater" to-field="inventoryItem.availableToPromiseTotal" type="BigDecimal">
                            <set field="parameters.deductAmount" from="inventoryItem.availableToPromiseTotal" set-if-empty="true" set-if-null="false"/>
                            <else>
                                <set field="parameters.deductAmount" from="parameters.quantityNotReserved" set-if-empty="true" set-if-null="false"/>
                            </else>
                        </if-compare-field>
                        <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
                        <set field="createDetailMap.inventoryItemId" from="inventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                        <set field="createDetailMap.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                        <set field="createDetailMap.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                        <calculate decimal-scale="2" field="createDetailMap.availableToPromiseDiff" rounding-mode="HalfEven" type="BigDecimal">
                            <calcop field="parameters.deductAmount" operator="negative"/>
                        </calculate>
                        <if-not-empty field="ebayReserveReasonEnumId">
                            <set field="createDetailMap.reasonEnumId" from="parameters.reserveReasonEnumId" set-if-empty="true" set-if-null="false"/>
                        </if-not-empty>
                        <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
                        <clear-field field="createDetailMap"/>
                        <!--
							create ReserveOrderItemInvRes record and check for reserved from
							ebay don't need shipgroup
						-->
                        <if-empty field="ebayReserveReasonEnumId">
                            <call-simple-method method-name="getPromisedDateTimeForRO"/>
                            <set field="reserveOisgirMap.reserveOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                            <set field="reserveOisgirMap.reserveOrderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                            <set field="reserveOisgirMap.inventoryItemId" from="lastNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                            <set field="reserveOisgirMap.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
                            <call-service break-on-error="true" error-code="error" in-map-name="reserveOisgirMap" include-user-login="true" require-new-transaction="false" service-name="reserveOrderItemInventoryForRO" success-code="success"/>
                            <clear-field field="reserveOisgirMap"/>
                        </if-empty>
                        <calculate decimal-scale="2" field="parameters.quantityNotReserved" rounding-mode="HalfEven" type="BigDecimal">
                            <calcop field="parameters.quantityNotReserved" operator="subtract">
                                <calcop field="parameters.deductAmount" operator="get"/>
                            </calcop>
                        </calculate>
                    </then>
                </if>
                <!--
					keep track of the last non-serialized inventory item for use if
					inventory is not required for purchase
				-->
                <!-- use env variable named lastNonSerInventoryItem -->
                <set field="lastNonSerInventoryItem" from="inventoryItem" set-if-empty="true" set-if-null="false"/>
            </if-compare>
        </if-compare>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="reserveReserveOrderItemInventory" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Reserve Order Item Inventory" use-transaction="true">
        <make-value entity-name="ReserveOrderItemInvRes" value-field="newEntity"/>
        <set field="newEntity.reserveOrderId" from="parameters.reserveOrderId" set-if-empty="true" set-if-null="false"/>
        <set field="newEntity.reserveOrderItemSeqId" from="parameters.reserveOrderItemSeqId" set-if-empty="true" set-if-null="false"/>
        <set field="newEntity.inventoryItemId" from="parameters.inventoryItemId" set-if-empty="true" set-if-null="false"/>
        <set field="newEntity.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false"/>
        <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
        <log level="always" message="created new OtherDataResource: ${newEntity}"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="releaseInventories" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <log level="info" message=" ************** INVOKING RELEASE INVENTORIES FROM RESERVE ORDER  ${parameters}"/>
        <entity-one auto-field-map="false" entity-name="OrderItem" use-cache="false" value-field="orderItem">
            <field-map field-name="orderId" from-field="parameters.orderId"/>
            <field-map field-name="orderItemSeqId" from-field="parameters.orderItemSeqId"/>
        </entity-one>
        <get-related-one relation-name="OrderHeader" to-value-field="orderHeader" use-cache="false" value-field="orderItem"/>
        <set field="itemQuantityToReserve" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0"/>
        <call-bsh>
		
                    import java.math.BigDecimal;
                    import org.ofbiz.order.order.OrderReadHelper;
                    orderReadHelper = new OrderReadHelper(orderHeader);
					itemQuantity = orderReadHelper.getOrderItemQuantity(orderItem);
					System.out.println("**** Order Quantity *****"+itemQuantity);
					itemReservedQuantity = orderReadHelper.getItemReservedQuantity(orderItem);
					
					itemQuantityToReserve = itemQuantity.subtract(itemReservedQuantity);
					parameters.put("itemQuantityToReserve",itemQuantityToReserve);
					System.out.println("**** itemQuantityToReserve *****"+itemQuantityToReserve);
    	
		</call-bsh>
        <set field="itemQuantityToReserve" from="parameters.itemQuantityToReserve" set-if-empty="true" set-if-null="false"/>
        <log level="info" message="itemQuantityToReserve == ${itemQuantityToReserve}"/>
        <entity-one auto-field-map="true" entity-name="ReserveOrderItem" use-cache="false" value-field="reserveOrderItem">
            <field-map field-name="orderId" from-field="parameters.reserveOrderId"/>
            <field-map field-name="orderItemSeqId" from-field="parameters.reserveOrderItemSeqId"/>
        </entity-one>
        <if-empty field="reserveOrderItem.quantityReleased">
            <set field="reserveOrderItem.quantityReleased" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0"/>
        </if-empty>
        <log level="info" message="reserveOrderItem.quantityReleased == ${reserveOrderItem.quantityReleased}"/>
        <calculate decimal-scale="2" field="quantityAvailable" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="reserveOrderItem.quantity" operator="subtract">
                <calcop field="reserveOrderItem.quantityReleased" operator="get"/>
            </calcop>
        </calculate>
        <log level="info" message="quantityAvailable == ${quantityAvailable}"/>
        <set field="quantityReleased" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0"/>
        <if-compare-field field="quantityAvailable" operator="greater-equals" to-field="itemQuantityToReserve" type="BigDecimal">
            <log level="info" message=" IF Block "/>
            <set field="quantityReleased" from="itemQuantityToReserve" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
            <else>
                <log level="info" message=" ELSE Block "/>
                <set field="quantityReleased" from="quantityAvailable" set-if-empty="true" set-if-null="false"/>
            </else>
        </if-compare-field>
        <log level="info" message="Quantity That can be released == ${quantityReleased}"/>
        <if-compare-field field="reserveOrderItem.quantity" operator="equals" to-field="quantityReleased" type="String">
            <log level="info" message="Setting status for Reserved Order Item to Complete."/>
            <set field="reserveOrderItem.statusId" set-if-empty="true" set-if-null="false" value="ITEM_COMPLETED"/>
        </if-compare-field>
        <calculate decimal-scale="2" field="reserveOrderItem.quantityReleased" rounding-mode="HalfEven" type="BigDecimal">
            <calcop field="reserveOrderItem.quantityReleased" operator="add">
                <calcop field="quantityReleased" operator="get"/>
            </calcop>
        </calculate>
        <log level="info" message="New: Quantity Released ${reserveOrderItem.quantityReleased}"/>
        <store-value do-cache-clear="true" value-field="reserveOrderItem"/>
        <if-compare field="quantityReleased" operator="greater" type="BigDecimal" value="0">
            <set field="quantityToAllocate" from="quantityReleased" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
            <entity-condition distinct="false" entity-name="ReserveOrderItemInventory" filter-by-date="false" list="inventories" use-cache="false">
                <condition-list combine="and">
                    <condition-expr field-name="reserveOrderId" from-field="parameters.reserveOrderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                    <condition-expr field-name="reserveOrderItemSeqId" from-field="parameters.reserveOrderItemSeqId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                </condition-list>
                <order-by field-name="expireDate DESC"/>
            </entity-condition>
            <iterate entry="inventory" list="inventories">
                <log level="info" message="Quantity TO Allocate ********** ${quantityToAllocate}"/>
                <if-compare field="quantityToAllocate" operator="greater" type="BigDecimal" value="0">
                    <log level="info" message=" Quantity Left is  greater than Zero "/>
                    <make-value entity-name="OrderItemShipGrpInvRes" value-field="oisgir"/>
                    <set field="oisgir.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                    <set field="oisgir.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                    <set field="oisgir.inventoryItemId" from="inventory.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                    <now-timestamp field="oisgir.reservedDatetime"/>
                    <set field="oisgir.stockReserveId" set-if-empty="true" set-if-null="false" value="RESERVE_ORDER"/>
                    <entity-condition distinct="false" entity-name="OrderItemShipGroupAssoc" filter-by-date="false" list="oisgas" use-cache="false">
                        <condition-list combine="and">
                            <condition-expr field-name="orderId" from-field="parameters.orderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                            <condition-expr field-name="orderItemSeqId" from-field="parameters.orderItemSeqId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                        </condition-list>
                    </entity-condition>
                    <first-from-list entry="oisga" list="oisgas"/>
                    <set field="oisgir.shipGroupSeqId" from="oisga.shipGroupSeqId" set-if-empty="true" set-if-null="false"/>
                    <if-compare-field field="quantityToAllocate" operator="less-equals" to-field="inventory.quantity" type="BigDecimal">
                        <set field="oisgir.quantity" from="quantityToAllocate" set-if-empty="true" set-if-null="false"/>
                        <log level="info" message="Quantity to Allocate is smaller or equal to the Inventory Quantity"/>
                        <else>
                            <log level="info" message=" Inventory Quantity is less than Quantity to Allocate"/>
                            <set field="oisgir.quantity" from="inventory.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
                            <calculate decimal-scale="2" field="quantityToAllocate" rounding-mode="HalfEven" type="BigDecimal">
                                <calcop field="quantityToAllocate" operator="subtract">
                                    <calcop field="inventory.quantity" operator="get"/>
                                </calcop>
                            </calculate>
                        </else>
                    </if-compare-field>
                    <entity-one auto-field-map="true" entity-name="OrderItemShipGrpInvRes" use-cache="false" value-field="existingOisgir">
                        <field-map field-name="orderId" from-field="parameters.orderId"/>
                        <field-map field-name="orderItemSeqId" from-field="parameters.orderItemSeqId"/>
                        <field-map field-name="inventoryItemId" from-field="inventory.inventoryItemId"/>
                        <field-map field-name="shipGroupSeqId" from-field="oisga.shipGroupSeqId"/>
                    </entity-one>
                    <log level="info" message=" ********* EXISTING OISGIR ********** ${existingOisgir}"/>
                    <if-empty field="existingOisgir">
                        <create-value do-cache-clear="true" or-store="false" value-field="oisgir"/>
                        <else>
                            <calculate decimal-scale="2" field="existingOisgir.quantity" rounding-mode="HalfEven" type="BigDecimal">
                                <calcop field="oisgir.quantity" operator="add">
                                    <calcop field="existingOisgir.quantity" operator="get"/>
                                </calcop>
                            </calculate>
                            <store-value do-cache-clear="true" value-field="existingOisgir"/>
                        </else>
                    </if-empty>
                </if-compare>
            </iterate>
            <entity-one auto-field-map="true" entity-name="ReserveOrderDetails" use-cache="false" value-field="existingReservedOrderDetail">
                <field-map field-name="orderId" from-field="parameters.orderId"/>
                <field-map field-name="orderItemSeqId" from-field="parameters.orderItemSeqId"/>
                <field-map field-name="reserveOrderId" from-field="parameters.reserveOrderId"/>
                <field-map field-name="reserveOrderItemSeqId" from-field="parameters.reserveOrderItemSeqId"/>
            </entity-one>
            <log level="verbose" message="Reserve Order Details ********** ${existingReservedOrderDetail}"/>
            <if-empty field="existingReservedOrderDetail">
                <make-value entity-name="ReserveOrderDetails" value-field="newEntity"/>
                <set-nonpk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                <set-pk-fields map="parameters" set-if-null="true" value-field="newEntity"/>
                <set field="newEntity.quantity" from="quantityToAllocate" set-if-empty="true" set-if-null="false"/>
                <log level="info" message=" Reserve Order Detail ${newEntity}"/>
                <create-value do-cache-clear="true" or-store="false" value-field="newEntity"/>
                <else>
                    <calculate decimal-scale="2" field="existingReservedOrderDetail.quantity" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="existingReservedOrderDetail.quantity" operator="add">
                            <calcop field="itemQuantityToReserve" operator="get"/>
                        </calcop>
                    </calculate>
                    <store-value do-cache-clear="true" value-field="existingReservedOrderDetail"/>
                </else>
            </if-empty>
            <call-simple-method method-name="checkForReserveOrderCompleteness"/>
        </if-compare>
        <log level="info" message="${parameters.orderId}"/>
        <field-to-result field="parameters.orderId" result-name="orderId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="checkForReserveOrderCompleteness" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <log level="info" message="${parameters}"/>
        <entity-condition distinct="false" entity-name="ReserveOrderItem" filter-by-date="false" list="reserveOrderItems" use-cache="false">
            <condition-expr field-name="orderId" from-field="parameters.reserveOrderId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
        </entity-condition>
        <set field="allComplete" set-if-empty="true" set-if-null="false" type="Boolean" value="true"/>
        <iterate entry="reserveOI" list="reserveOrderItems">
            <if-compare field="reserveOI.statusId" operator="not-equals" type="String" value="COMPLETE">
                <set field="allComplete" set-if-empty="true" set-if-null="false" type="Boolean" value="false"/>
            </if-compare>
        </iterate>
        <if-compare field="allComplete" operator="equals" type="Boolean" value="true">
            <entity-one auto-field-map="true" entity-name="ReserveOrderHeader" use-cache="false" value-field="reserveOH">
                <field-map field-name="orderId" from-field="parameters.reserveOrderId"/>
            </entity-one>
            <set field="reserveOH.statusId" set-if-empty="true" set-if-null="false" value="ORDER_COMPLETED"/>
            <log level="info" message="Updating the Reserve Order Status to Complete"/>
            <store-value do-cache-clear="true" value-field="reserveOH"/>
        </if-compare>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="reserveProductInventoryForRO" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Reserve Inventory for a Product" use-transaction="true">
        <now-timestamp field="nowTimestamp"/>
        <!-- check the product; make sure its a physical item -->
        <entity-one auto-field-map="true" entity-name="Product" use-cache="false" value-field="product"/>
        <entity-one auto-field-map="true" entity-name="Facility" use-cache="true" value-field="facility"/>
        <get-related-one relation-name="ProductType" to-value-field="productType" use-cache="false" value-field="product"/>
        <if-compare field="productType.isPhysical" operator="equals" type="String" value="N">
            <set field="parameters.quantityNotReserved" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0"/>
            <else>
                <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
                <if-compare field="parameters.reserveOrderEnumId" operator="equals" type="String" value="INVRO_GUNIT_COST">
                    <set field="orderByString" set-if-empty="true" set-if-null="false" value="-unitCost"/>
                    <else>
                        <if-compare field="parameters.reserveOrderEnumId" operator="equals" type="String" value="INVRO_LUNIT_COST">
                            <set field="orderByString" set-if-empty="true" set-if-null="false" value="+unitCost"/>
                            <else>
                                <if-compare field="parameters.reserveOrderEnumId" operator="equals" type="String" value="INVRO_FIFO_EXP">
                                    <set field="orderByString" set-if-empty="true" set-if-null="false" value="+expireDate"/>
                                    <else>
                                        <if-compare field="parameters.reserveOrderEnumId" operator="equals" type="String" value="INVRO_LIFO_EXP">
                                            <set field="orderByString" set-if-empty="true" set-if-null="false" value="-expireDate"/>
                                            <else>
                                                <if-compare field="parameters.reserveOrderEnumId" operator="equals" type="String" value="INVRO_LIFO_REC">
                                                    <set field="orderByString" set-if-empty="true" set-if-null="false" value="-datetimeReceived"/>
                                                    <else>
                                                        <!--
															the default reserveOrderEnumId is INVRO_FIFO_REC, ie FIFO
															based on date received
														-->
                                                        <set field="orderByString" set-if-empty="true" set-if-null="false" value="+datetimeReceived"/>
                                                        <set field="parameters.reserveOrderEnumId" set-if-empty="true" set-if-null="false" value="INVRO_FIFO_REC"/>
                                                    </else>
                                                </if-compare>
                                            </else>
                                        </if-compare>
                                    </else>
                                </if-compare>
                            </else>
                        </if-compare>
                    </else>
                </if-compare>
                <set field="parameters.quantityNotReserved" from="parameters.quantity" set-if-empty="true" set-if-null="false"/>
                <!--
					first reserve against InventoryItems in FLT_PICKLOC type locations,
					then FLT_BULK locations, then InventoryItems with no locations
				-->
                <entity-condition distinct="false" entity-name="InventoryItemAndLocation" filter-by-date="false" list="inventoryItemAndLocations" use-cache="false">
                    <condition-list combine="and">
                        <condition-expr field-name="productId" from-field="parameters.productId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                        <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="true" operator="equals"/>
                        <condition-expr field-name="containerId" from-field="parameters.containerId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="true" operator="equals"/>
                        <condition-expr field-name="quantityOnHandTotal" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="greater" value="0.0"/>
                        <condition-expr field-name="locationTypeEnumId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals" value="FLT_PICKLOC"/>
                    </condition-list>
                    <order-by field-name="${orderByString}"/>
                </entity-condition>
                <iterate entry="inventoryItemAndLocation" list="inventoryItemAndLocations">
                    <if-compare field="parameters.quantityNotReserved" operator="greater" type="Double" value="0">
                        <!--
							this is a little trick to get the InventoryItem value object
							without doing a query, possible since all fields on InventoryItem
							are also on InventoryItemAndLocation with the same names
						-->
                        <make-value entity-name="InventoryItem" map="inventoryItemAndLocation" value-field="inventoryItem"/>
                        <call-simple-method method-name="reserveForInventoryItemInline"/>
                    </if-compare>
                </iterate>
                <!-- still some left? try the FLT_BULK locations -->
                <if-compare field="parameters.quantityNotReserved" operator="greater" type="BigDecimal" value="0">
                    <entity-condition distinct="false" entity-name="InventoryItemAndLocation" filter-by-date="false" list="inventoryItemAndLocations" use-cache="false">
                        <condition-list combine="and">
                            <condition-expr field-name="productId" from-field="parameters.productId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                            <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="true" operator="equals"/>
                            <condition-expr field-name="containerId" from-field="parameters.containerId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="true" operator="equals"/>
                            <condition-expr field-name="quantityOnHandTotal" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="greater" value="0.0"/>
                            <condition-expr field-name="locationTypeEnumId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals" value="FLT_BULK"/>
                        </condition-list>
                        <order-by field-name="${orderByString}"/>
                    </entity-condition>
                    <iterate entry="inventoryItemAndLocation" list="inventoryItemAndLocations">
                        <if-compare field="parameters.quantityNotReserved" operator="greater" type="Double" value="0">
                            <!--
								this is a little trick to get the InventoryItem value object
								without doing a query, possible since all fields on
								InventoryItem are also on InventoryItemAndLocation with the same
								names
							-->
                            <make-value entity-name="InventoryItem" map="inventoryItemAndLocation" value-field="inventoryItem"/>
                            <call-simple-method method-name="reserveForInventoryItemInline"/>
                        </if-compare>
                    </iterate>
                </if-compare>
                <!--
					last of all try reserving in InventoryItems that have no
					locationSeqId, ie are not in any particular location
				-->
                <if-compare field="parameters.quantityNotReserved" operator="greater" type="BigDecimal" value="0">
                    <entity-condition distinct="false" entity-name="InventoryItem" filter-by-date="false" list="inventoryItems" use-cache="false">
                        <condition-list combine="and">
                            <condition-expr field-name="productId" from-field="parameters.productId" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                            <condition-expr field-name="facilityId" from-field="parameters.facilityId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="true" operator="equals"/>
                            <condition-expr field-name="containerId" from-field="parameters.containerId" ignore="false" ignore-case="false" ignore-if-empty="true" ignore-if-null="true" operator="equals"/>
                            <condition-expr field-name="quantityOnHandTotal" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="greater" value="0.0"/>
                            <condition-expr field-name="locationSeqId" from-field="nullField" ignore="false" ignore-case="false" ignore-if-empty="false" ignore-if-null="false" operator="equals"/>
                        </condition-list>
                        <order-by field-name="${orderByString}"/>
                    </entity-condition>
                    <iterate entry="inventoryItem" list="inventoryItems">
                        <if>
                            <condition>
                                <and>
                                    <if-compare field="parameters.quantityNotReserved" operator="greater" type="Double" value="0"/>
                                    <if-empty field="inventoryItem.locationSeqId"/>
                                </and>
                            </condition>
                            <then>
                                <call-simple-method method-name="reserveForInventoryItemInline"/>
                            </then>
                        </if>
                    </iterate>
                </if-compare>
                <if-compare field="parameters.quantityNotReserved" operator="not-equals" type="BigDecimal" value="0">
                    <if-compare field="parameters.requireInventory" operator="equals" type="String" value="Y">
                        <!--
							use this else pattern to accomplish the anything but Y logic, ie
							if not specified default to inventory NOT required
						-->
                        <else>
                            <if-not-empty field="lastNonSerInventoryItem">
                                <!--
									subtract from quantityNotReserved from the availableToPromise
									of existing inventory item
								-->
                                <!-- instead of updating InventoryItem, add an InventoryItemDetail -->
                                <set field="createDetailMap.inventoryItemId" from="lastNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                                <set field="createDetailMap.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                                <set field="createDetailMap.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                                <calculate decimal-scale="2" field="createDetailMap.availableToPromiseDiff" rounding-mode="HalfEven" type="BigDecimal">
                                    <calcop field="parameters.quantityNotReserved" operator="negative"/>
                                </calculate>
                                <if-not-empty field="parameters.reserveReasonEnumId">
                                    <set field="createDetailMap.reasonEnumId" from="parameters.reserveReasonEnumId" set-if-empty="true" set-if-null="false"/>
                                </if-not-empty>
                                <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
                                <clear-field field="createDetailMap"/>
                                <!-- get the promiseDatetime -->
                                <get-related-one relation-name="ProductFacility" to-value-field="productFacility" use-cache="false" value-field="lastNonSerInventoryItem"/>
                                <clear-field field="daysToShip"/>
                                <set field="daysToShip" from="productFacility.daysToShip" set-if-empty="true" set-if-null="false"/>
                                <if-empty field="daysToShip">
                                    <!--
										if the product does not have its own days to ship, use
										Facility.defaultDaysToShip, if not then use 30 days as a USA
										industry default
									-->
                                    <if-not-empty field="facility.defaultDaysToShip">
                                        <set field="daysToShip" from="facility.defaultDaysToShip" set-if-empty="true" set-if-null="false" type="Long"/>
                                        <else>
                                            <set field="daysToShip" set-if-empty="true" set-if-null="false" type="Long" value="30"/>
                                        </else>
                                    </if-not-empty>
                                </if-empty>
                                <!-- TODO: Convert this to a <set-calendar> operation -->
                                <call-bsh><![CDATA[
                            java.sql.Timestamp orderDate = orderHeader.getTimestamp("orderDate");
                            com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance();
                            cal.setTimeInMillis(orderDate.getTime());
                            cal.add(com.ibm.icu.util.Calendar.DAY_OF_YEAR, daysToShip.intValue());
                            return org.ofbiz.base.util.UtilMisc.toMap("promisedDatetime", new java.sql.Timestamp(cal.getTimeInMillis()));
                            ]]></call-bsh>
                                <!-- create or update ReserveOrderItemInvRes record -->
                                <set field="reserveOisgirMap.reserveOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                                <set field="reserveOisgirMap.reserveOrderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                                <set field="reserveOisgirMap.inventoryItemId" from="lastNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                                <set field="reserveOisgirMap.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
                                <call-service break-on-error="true" error-code="error" in-map-name="reserveOisgirMap" include-user-login="true" require-new-transaction="false" service-name="reserveOrderItemInventoryForRO" success-code="success"/>
                                <clear-field field="reserveOisgirMap"/>
                                <else>
                                    <!--
										no non-ser inv item, create a non-ser InventoryItem with
										availableToPromise = -quantityNotReserved
									-->
                                    <clear-field field="createInventoryItemInMap"/>
                                    <clear-field field="createInventoryItemOutMap"/>
                                    <!--
										the createInventoryItem service is run by the the system user
										here
									-->
                                    <entity-one auto-field-map="true" entity-name="UserLogin" use-cache="false" value-field="permUserLogin">
                                        <field-map field-name="userLoginId" value="system"/>
                                    </entity-one>
                                    <set field="createInventoryItemInMap.productId" from="parameters.productId" set-if-empty="true" set-if-null="false"/>
                                    <set field="createInventoryItemInMap.facilityId" from="parameters.facilityId" set-if-empty="true" set-if-null="false"/>
                                    <set field="createInventoryItemInMap.containerId" from="parameters.containerId" set-if-empty="true" set-if-null="false"/>
                                    <set field="createInventoryItemInMap.inventoryItemTypeId" set-if-empty="true" set-if-null="false" value="NON_SERIAL_INV_ITEM"/>
                                    <set field="createInventoryItemInMap.userLogin" from="permUserLogin" set-if-empty="true" set-if-null="false"/>
                                    <call-service break-on-error="true" error-code="error" in-map-name="createInventoryItemInMap" include-user-login="false" require-new-transaction="false" service-name="createInventoryItem" success-code="success">
                                        <result-to-field field="createInventoryItemOutMap.inventoryItemId" result-name="inventoryItemId"/>
                                    </call-service>
                                    <entity-one auto-field-map="true" entity-name="InventoryItem" use-cache="false" value-field="newNonSerInventoryItem">
                                        <field-map field-name="inventoryItemId" from-field="createInventoryItemOutMap.inventoryItemId"/>
                                    </entity-one>
                                    <!-- also create a detail record with the quantities -->
                                    <set field="createDetailMap.inventoryItemId" from="newNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                                    <set field="createDetailMap.orderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                                    <set field="createDetailMap.orderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                                    <calculate decimal-scale="2" field="createDetailMap.availableToPromiseDiff" rounding-mode="HalfEven" type="BigDecimal">
                                        <calcop field="parameters.quantityNotReserved" operator="negative"/>
                                    </calculate>
                                    <if-not-empty field="parameters.reserveReasonEnumId">
                                        <set field="createDetailMap.reasonEnumId" from="parameters.reserveReasonEnumId" set-if-empty="true" set-if-null="false"/>
                                    </if-not-empty>
                                    <call-service break-on-error="true" error-code="error" in-map-name="createDetailMap" include-user-login="true" require-new-transaction="false" service-name="createInventoryItemDetail" success-code="success"/>
                                    <clear-field field="createDetailMap"/>
                                    <!-- get the promiseDatetime -->
                                    <get-related-one relation-name="ProductFacility" to-value-field="productFacility" use-cache="false" value-field="newNonSerInventoryItem"/>
                                    <clear-field field="daysToShip"/>
                                    <set field="daysToShip" from="productFacility.daysToShip" set-if-empty="true" set-if-null="false"/>
                                    <if-empty field="daysToShip">
                                        <!--
											if the product does not have its own days to ship, use
											Facility.defaultDaysToShip, if not then use 30 days as a USA
											industry default
										-->
                                        <if-not-empty field="facility.defaultDaysToShip">
                                            <set field="daysToShip" from="facility.defaultDaysToShip" set-if-empty="true" set-if-null="false" type="Long"/>
                                            <else>
                                                <set field="daysToShip" set-if-empty="true" set-if-null="false" type="Long" value="30"/>
                                            </else>
                                        </if-not-empty>
                                    </if-empty>
                                    <!-- TODO: Convert this to a <set-calendar> operation -->
                                    <call-bsh><![CDATA[
                            java.sql.Timestamp orderDate = orderHeader.getTimestamp("orderDate");
                            com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance();
                            cal.setTimeInMillis(orderDate.getTime());
                            cal.add(com.ibm.icu.util.Calendar.DAY_OF_YEAR, daysToShip.intValue());
                            return org.ofbiz.base.util.UtilMisc.toMap("promisedDatetime", new java.sql.Timestamp(cal.getTimeInMillis()));
                            ]]></call-bsh>
                                    <!-- create ReserveOrderItemInvRes record -->
                                    <set field="reserveOisgirMap.reserveOrderId" from="parameters.orderId" set-if-empty="true" set-if-null="false"/>
                                    <set field="reserveOisgirMap.reserveOrderItemSeqId" from="parameters.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                                    <set field="reserveOisgirMap.inventoryItemId" from="lastNonSerInventoryItem.inventoryItemId" set-if-empty="true" set-if-null="false"/>
                                    <set field="reserveOisgirMap.quantity" from="parameters.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
                                    <call-service break-on-error="true" error-code="error" in-map-name="reserveOisgirMap" include-user-login="true" require-new-transaction="false" service-name="reserveOrderItemInventoryForRO" success-code="success"/>
                                    <clear-field field="reserveOisgirMap"/>
                                </else>
                            </if-not-empty>
                            <set field="parameters.quantityNotReserved" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0"/>
                        </else>
                    </if-compare>
                </if-compare>
            </else>
        </if-compare>
        <field-to-result field="parameters.quantityNotReserved" result-name="quantityNotReserved"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="getPromisedDateTimeForRO" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Get Inventory Promised Date/Time" use-transaction="true">
        <!-- get the promiseDatetime -->
        <get-related-one relation-name="ProductFacility" to-value-field="productFacility" use-cache="false" value-field="inventoryItem"/>
        <set field="daysToShip" from="productFacility.daysToShip" set-if-empty="true" set-if-null="false"/>
        <if-empty field="daysToShip">
            <!--
				if the product does not have its own days to ship, use
				Facility.defaultDaysToShip, if not then use 30 days as a USA
				industry default
			-->
            <set field="daysToShip" from="facility.defaultDaysToShip" set-if-empty="true" set-if-null="false" type="Long"/>
        </if-empty>
        <if-empty field="daysToShip">
            <set field="daysToShip" set-if-empty="true" set-if-null="false" type="Long" value="30"/>
        </if-empty>
        <!-- TODO: Convert this to a <set-calendar> operation -->
        <call-bsh><![CDATA[
        java.sql.Timestamp orderDate = orderHeader.getTimestamp("orderDate");
        com.ibm.icu.util.Calendar cal = com.ibm.icu.util.Calendar.getInstance();
        cal.setTimeInMillis(orderDate.getTime());
        cal.add(com.ibm.icu.util.Calendar.DAY_OF_YEAR, daysToShip.intValue());
        return org.ofbiz.base.util.UtilMisc.toMap("promisedDatetime", new java.sql.Timestamp(cal.getTimeInMillis()));
        ]]></call-bsh>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="updateReserveOrderItem" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Reserve Order Item" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ReserveOrderItem" use-cache="false" value-field="lookedUpValue">
            <field-map field-name="orderId" from-field="parameters.orderId"/>
            <field-map field-name="orderItemSeqId" from-field="parameters.orderItemSeqId"/>
        </entity-one>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
        <field-to-result field="lookedUpValue.orderId" result-name="orderId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="updateReserveOrderHeader" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Reserve Order Header" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="ReserveOrderHeader" use-cache="false" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" set-if-null="true" value-field="lookedUpValue"/>
        <store-value do-cache-clear="true" value-field="lookedUpValue"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="removeReserveOrderItem" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="Reserve Order Item" use-transaction="true">
        <entity-and entity-name="ReserveOrderItemInvRes" filter-by-date="false" list="reservedItems" use-cache="false">
            <field-map field-name="reserveOrderId" from-field="parameters.orderId"/>
            <field-map field-name="reserveOrderItemSeqId" from-field="parameters.orderItemSeqId"/>
        </entity-and>
        <remove-list do-cache-clear="true" list="reservedItems"/>
        <entity-one auto-field-map="true" entity-name="ReserveOrderItem" use-cache="false" value-field="lookedUpValue">
            <field-map field-name="orderId" from-field="parameters.orderId"/>
            <field-map field-name="orderItemSeqId" from-field="parameters.orderItemSeqId"/>
        </entity-one>
        <remove-value do-cache-clear="true" value-field="lookedUpValue"/>
        <string-to-list list="messageList" string="Successfully added Product ${parameters.productId} to Order ${parameters.orderId}."/>
        <field-to-result field="lookedUpValue.orderId" result-name="orderId"/>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="LoadInventoryItemFactForReports" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <set field="InventoryItem" from="parameters.InventoryItem" set-if-empty="true" set-if-null="false"/>
        <set field="inventoryItemId" from="parameters.inventoryItemId" set-if-empty="true" set-if-null="false"/>
        <make-value entity-name="InventoryItemFact" map="InventoryItem" value-field="invItmFact"/>
        <entity-one auto-field-map="false" entity-name="InventoryItemFact" use-cache="false" value-field="check">
            <field-map field-name="inventoryItemId" from-field="inventoryItemId"/>
        </entity-one>
        <if-empty field="check">
            <create-value do-cache-clear="true" or-store="false" value-field="invItmFact"/>
            <else>
                <store-value do-cache-clear="true" value-field="invItmFact"/>
            </else>
        </if-empty>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="loadPurchaseOrderFact" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
        <!--<if-empty field="${parameters.orderId}">
			<add-error>
				<fail-message message="Order with id [${parameters.orderId}] doesn't exist." />
			</add-error>
		</if-empty>-->
        <check-errors error-code="error" error-list-name="error_list"/>
        <if-compare field="orderHeader.orderTypeId" operator="equals" type="String" value="PURCHASE_ORDER">
            <set field="andConditions.orderItemTypeId" set-if-empty="true" set-if-null="false" value="PRODUCT_ORDER_ITEM"/>
            <get-related list="orderItems" map="andConditions" relation-name="OrderItem" use-cache="false" value-field="orderHeader"/>
            <iterate entry="orderItem" list="orderItems">
                <clear-field field="inMap"/>
                <set field="inMap.orderHeader" from="orderHeader" set-if-empty="true" set-if-null="false"/>
                <set field="inMap.orderItem" from="orderItem" set-if-empty="true" set-if-null="false"/>
                <set field="inMap.orderAdjustment" from="orderAdjustment" set-if-empty="true" set-if-null="false"/>
                <call-service break-on-error="true" error-code="error" in-map-name="inMap" include-user-login="true" require-new-transaction="false" service-name="loadPurchaseOrderItemFact" success-code="success"/>
            </iterate>
        </if-compare>
    </simple-method>

    <simple-method default-error-code="error" default-success-code="success" event-error-message-name="_error_message_" event-event-message-name="_event_message_" event-request-object-name="request" event-response-code-name="_response_code_" event-response-object-name="response" login-required="true" method-name="loadPurchaseOrderItemFact" service-error-message-list-name="errorMessageList" service-error-message-map-name="errorMessageMap" service-error-message-name="errorMessage" service-response-message-name="responseMessage" service-success-message-list-name="successMessageList" service-success-message-name="successMessage" short-description="" use-transaction="true">
        <set field="orderHeader" from="parameters.orderHeader" set-if-empty="true" set-if-null="false"/>
        <set field="orderItem" from="parameters.orderItem" set-if-empty="true" set-if-null="false"/>
        <set field="orderAdjustment" from="parameters.orderAdjustment" set-if-empty="true" set-if-null="false"/>
        <if-empty field="orderHeader">
            <entity-one auto-field-map="true" entity-name="OrderHeader" use-cache="false" value-field="orderHeader"/>
        </if-empty>
        <if-empty field="orderItem">
            <entity-one auto-field-map="true" entity-name="OrderItem" use-cache="false" value-field="orderItem"/>
        </if-empty>
        <if-empty field="orderAdjustment">
            <entity-and entity-name="OrderAdjustment" filter-by-date="false" list="orderAdjustments" use-cache="false">
                <field-map field-name="orderId" from-field="orderItem.orderId"/>
            </entity-and>
        </if-empty>
        <!--<if-empty field="orderHeader">
			<add-error>
				<fail-message
					message="Order with id [${orderHeader.orderId}] doesn't exist." />
			</add-error>
		</if-empty>-->
        <!--<if-empty field="orderItem">
			<add-error>
				<fail-message
					message="The Orders Item with id [${orderItem.orderItemSeqId}] doesn't exist." />
			</add-error>
		</if-empty>-->
        <check-errors error-code="error" error-list-name="error_list"/>
        <if-compare field="orderHeader.orderTypeId" operator="equals" type="String" value="PURCHASE_ORDER">
            <entity-one auto-field-map="false" entity-name="PurchaseOrderItemFact" use-cache="false" value-field="fact">
                <field-map field-name="orderId" from-field="orderItem.orderId"/>
                <field-map field-name="orderItemSeqId" from-field="orderItem.orderItemSeqId"/>
            </entity-one>
            <!-- key handling -->
            <if-empty field="fact">
                <make-value entity-name="PurchaseOrderItemFact" value-field="fact"/>
                <set field="fact.orderId" from="orderHeader.orderId" set-if-empty="true" set-if-null="false"/>
                <set field="fact.orderItemSeqId" from="orderItem.orderItemSeqId" set-if-empty="true" set-if-null="false"/>
                <set field="fact.salesChannelEnumId" from="orderHeader.salesChannelEnumId" set-if-empty="true" set-if-null="false"/>
                <set field="fact.orderDate" from="orderHeader.orderDate" set-if-empty="true" set-if-null="false" type="Timestamp"/>
                <!-- conversion of the order date -->
                <if-not-empty field="orderHeader.orderDate">
                    <clear-field field="inMap"/>
                    <set field="inMap.dimensionEntityName" set-if-empty="true" set-if-null="false" value="DateDimension"/>
                    <set field="inMap.naturalKeyFields.dateValue" from="orderHeader.orderDate" set-if-empty="true" set-if-null="false" type="Date"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="inMap" include-user-login="true" require-new-transaction="false" service-name="getDimensionIdFromNaturalKey" success-code="success">
                        <result-to-field field="fact.orderDateDimId" result-name="dimensionId"/>
                    </call-service>
                    <if-empty field="fact.orderDateDimId">
                        <set field="fact.orderDateDimId" set-if-empty="true" set-if-null="false" value="_NF_"/>
                    </if-empty>
                    <else>
                        <set field="fact.orderDateDimId" set-if-empty="true" set-if-null="false" value="_NA_"/>
                    </else>
                </if-not-empty>
                <!-- conversion of the product id -->
                <if-not-empty field="orderItem.productId">
                    <clear-field field="inMap"/>
                    <set field="inMap.dimensionEntityName" set-if-empty="true" set-if-null="false" value="ProductDimension"/>
                    <set field="inMap.naturalKeyFields.productId" from="orderItem.productId" set-if-empty="true" set-if-null="false"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="inMap" include-user-login="true" require-new-transaction="false" service-name="getDimensionIdFromNaturalKey" success-code="success">
                        <result-to-field field="fact.productDimId" result-name="dimensionId"/>
                    </call-service>
                    <if-empty field="fact.productDimId">
                        <set field="fact.productDimId" set-if-empty="true" set-if-null="false" value="_NF_"/>
                    </if-empty>
                    <else>
                        <set field="fact.productDimId" set-if-empty="true" set-if-null="false" value="_NA_"/>
                    </else>
                </if-not-empty>
                <!-- conversion of the order currency -->
                <if-not-empty field="orderHeader.currencyUom">
                    <clear-field field="inMap"/>
                    <set field="inMap.dimensionEntityName" set-if-empty="true" set-if-null="false" value="CurrencyDimension"/>
                    <set field="inMap.naturalKeyFields.currencyId" from="orderHeader.currencyUom" set-if-empty="true" set-if-null="false"/>
                    <call-service break-on-error="true" error-code="error" in-map-name="inMap" include-user-login="true" require-new-transaction="false" service-name="getDimensionIdFromNaturalKey" success-code="success">
                        <result-to-field field="fact.origCurrencyDimId" result-name="dimensionId"/>
                    </call-service>
                    <if-empty field="fact.origCurrencyDimId">
                        <set field="fact.origCurrencyDimId" set-if-empty="true" set-if-null="false" value="_NF_"/>
                    </if-empty>
                    <else>
                        <set field="fact.origCurrencyDimId" set-if-empty="true" set-if-null="false" value="_NA_"/>
                    </else>
                </if-not-empty>
                <!-- TODO -->
                <set field="fact.billToCustomerDimId" set-if-empty="true" set-if-null="false" value="_NA_"/>
                <create-value do-cache-clear="true" or-store="false" value-field="fact"/>
            </if-empty>
            <!-- =============== -->
            <!-- facts handling  -->
            <!-- =============== -->
            <set field="fact.quantity" from="orderItem.quantity" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
            <set field="fact.extGrossAmount" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.extDiscountAmount" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.extNetAmount" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.extShippingAmount" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.extTaxAmount" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.GrossSales" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.GrossMerchandizeSales" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.GrossMerchandizeProfit" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.GrossShippingProfit" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <set field="fact.GrossProfit" set-if-empty="true" set-if-null="false" type="BigDecimal" value="0.0"/>
            <!--
				<set field="fact.AverageMerchandizeProfit" value="0.0"
				type="BigDecimal"/> <set field="fact.AverageGrossProfit" value="0.0"
				type="BigDecimal"/>
			-->
            <!-- amount -->
            <calculate decimal-scale="2" field="fact.extGrossAmount" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="fact.quantity" operator="multiply">
                    <calcop field="orderItem.unitPrice" operator="get"/>
                </calcop>
            </calculate>
            <!-- cost -->
            <entity-and entity-name="SupplierProduct" filter-by-date="false" list="costs" use-cache="false">
                <field-map field-name="productId" from-field="orderItem.productId"/>
            </entity-and>
            <iterate entry="cost" list="costs">
                <if-compare field="cost.minimumOrderQuantity" operator="equals" type="String" value="0">
                    <calculate decimal-scale="2" field="fact.extGrossCost" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="fact.quantity" operator="multiply">
                            <calcop field="cost.lastPrice" operator="get"/>
                        </calcop>
                    </calculate>
                </if-compare>
            </iterate>
            <!-- shipping -->
            <iterate entry="shipping" list="orderAdjustments">
                <if-compare field="shipping.orderAdjustmentTypeId" operator="equals" type="String" value="SHIPPING_CHARGES">
                    <calculate decimal-scale="2" field="fact.extShippingAmount" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="fact.extShippingAmount" operator="add">
                            <calcop field="shipping.amount" operator="get"/>
                        </calcop>
                    </calculate>
                </if-compare>
            </iterate>
            <!-- taxes -->
            <iterate entry="tax" list="orderAdjustments">
                <if-compare field="tax.orderAdjustmentTypeId" operator="equals" type="String" value="SALES_TAX">
                    <calculate decimal-scale="2" field="fact.extTaxAmount" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="fact.extTaxAmount" operator="add">
                            <calcop field="tax.amount" operator="get"/>
                        </calcop>
                    </calculate>
                </if-compare>
            </iterate>
            <!-- discounts -->
            <iterate entry="discount" list="orderAdjustments">
                <if-compare field="discount.orderAdjustmentTypeId" operator="equals" type="String" value="PROMOTION_ADJUSTMENT">
                    <calculate decimal-scale="2" field="fact.extDiscountAmount" rounding-mode="HalfEven" type="BigDecimal">
                        <calcop field="fact.extDiscountAmount" operator="add">
                            <calcop field="discount.amount" operator="get"/>
                        </calcop>
                    </calculate>
                    <!-- product promo code -->
                    <entity-and entity-name="ProductPromoCode" filter-by-date="false" list="productPromo" use-cache="false">
                        <field-map field-name="productPromoId" from-field="discount.productPromoId"/>
                    </entity-and>
                    <first-from-list entry="productPromoCode" list="productPromo"/>
                    <if-not-empty field="productPromoCode">
                        <set field="fact.productPromoCode" from="productPromoCode.productPromoCodeId" set-if-empty="true" set-if-null="false"/>
                        <else>
                            <set field="fact.productPromoCode" set-if-empty="true" set-if-null="false" value="Not require code"/>
                        </else>
                    </if-not-empty>
                </if-compare>
            </iterate>
            <!-- net -->
            <calculate decimal-scale="2" field="fact.extNetAmount" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="fact.extGrossAmount" operator="subtract">
                    <calcop field="fact.extDiscountAmount" operator="get"/>
                </calcop>
            </calculate>
            <!-- Gross Sales -->
            <calculate decimal-scale="2" field="fact.GrossSales" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="fact.extGrossAmount" operator="add">
                    <calcop field="fact.extShippingAmount" operator="get"/>
                </calcop>
            </calculate>
            <!-- Gross Merchandize Sales -->
            <calculate decimal-scale="2" field="fact.GrossMerchandizeSales" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="fact.GrossMerchandizeSales" operator="add">
                    <calcop field="fact.extGrossAmount" operator="get"/>
                </calcop>
            </calculate>
            <!-- Gross Merchandize Profit -->
            <calculate decimal-scale="2" field="fact.GrossMerchandizeProfit" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="fact.GrossMerchandizeSales" operator="subtract">
                    <calcop field="fact.extGrossCost" operator="get"/>
                </calcop>
            </calculate>
            <!-- Product Store -->
            <if-not-empty field="orderHeader.productStoreId">
                <set field="fact.productStoreId" from="orderHeader.productStoreId" set-if-empty="true" set-if-null="false"/>
            </if-not-empty>
            <!-- Sale Channel -->
            <if-not-empty field="orderHeader.salesChannelEnumId">
                <entity-one auto-field-map="true" entity-name="Enumeration" use-cache="false" value-field="enumeration">
                    <field-map field-name="enumId" from-field="orderHeader.salesChannelEnumId"/>
                </entity-one>
                <if-not-empty field="enumeration">
                    <set field="fact.saleChannel" from="enumeration.description" set-if-empty="true" set-if-null="false"/>
                </if-not-empty>
            </if-not-empty>
            <!-- Order status -->
            <if-not-empty field="orderHeader.statusId">
                <entity-one auto-field-map="true" entity-name="StatusItem" use-cache="false" value-field="statusItem">
                    <field-map field-name="statusId" from-field="orderHeader.statusId"/>
                </entity-one>
                <if-not-empty field="statusItem">
                    <set field="fact.orderStatus" from="statusItem.description" set-if-empty="true" set-if-null="false"/>
                </if-not-empty>
            </if-not-empty>
            <!-- Order visit and referrer -->
            <if-not-empty field="orderHeader.visitId">
                <entity-one auto-field-map="true" entity-name="Visit" use-cache="false" value-field="visit">
                    <field-map field-name="visitId" from-field="orderHeader.visitId"/>
                </entity-one>
                <if-not-empty field="visit">
                    <set field="fact.visitId" from="visit.visitId" set-if-empty="true" set-if-null="false"/>
                    <set field="fact.initialReferrer" from="visit.initialReferrer" set-if-empty="true" set-if-null="false"/>
                </if-not-empty>
            </if-not-empty>
            <!-- Gross Shipping Profit -->
            <!-- Gross Profit -->
            <calculate decimal-scale="2" field="fact.GrossProfit" rounding-mode="HalfEven" type="BigDecimal">
                <calcop field="fact.GrossMerchandizeProfit" operator="subtract">
                    <calcop field="fact.GrossShippingProfit" operator="get"/>
                </calcop>
            </calculate>
            <!-- Average Merchandize Profit -->
            <!-- Average Gross Profit -->
            <!-- TODO: prorate order header discounts and shipping charges -->
            <!-- TODO: costs -->
            <!--
				<set field="fact.extManFixedCost" value="0.0" type="BigDecimal"/>
				<set field="fact.extManVarCost" value="0.0" type="BigDecimal"/> <set
				field="fact.extStorageCost" value="0.0" type="BigDecimal"/> <set
				field="fact.extDistributionCost" value="0.0" type="BigDecimal"/>

				<calculate field="fact.contributionAmount"> <calcop
				field="fact.extNetAmount" operator="subtract"> <calcop
				field="fact.extManFixedCost" operator="get"/> <calcop
				field="fact.extManVarCost" operator="get"/> <calcop
				field="fact.extStorageCost" operator="get"/> <calcop
				field="fact.extDistributionCost" operator="get"/> </calcop>
				</calculate>
			-->
            <!-- eBay -->
            <set field="fact.eBay" set-if-empty="true" set-if-null="false" type="BigDecimal" value="7"/>
            <!-- RRC -->
            <set field="fact.RRC" set-if-empty="true" set-if-null="false" type="BigDecimal" value="2"/>
            <!-- Others -->
            <set field="fact.OtherFree" set-if-empty="true" set-if-null="false" type="BigDecimal" value="5"/>
            <!-- Others -->
            <calculate decimal-scale="2" field="fees" rounding-mode="HalfEven" type="BigDecimal">
                <calcop operator="add">
                    <calcop field="fact.eBay" operator="get"/>
                    <calcop field="fact.RRC" operator="get"/>
                    <calcop field="fact.OtherFree" operator="get"/>
                </calcop>
            </calculate>
            <!-- NBO -->
            <calculate decimal-scale="2" field="NBO" rounding-mode="HalfEven" type="BigDecimal">
                <calcop operator="subtract">
                    <calcop field="fact.GrossProfit" operator="get"/>
                    <calcop field="fees" operator="get"/>
                </calcop>
            </calculate>
            <set field="fact.NBO" from="NBO" set-if-empty="true" set-if-null="false"/>
            <!-- CountDate -->
            <set field="fact.CountDate" set-if-empty="true" set-if-null="false" type="BigDecimal" value="1"/>
            <!-- Category -->
            <if-not-empty field="orderItem.productId">
                <clear-field field="defaultTopCategoryId"/>
                <entity-one auto-field-map="true" entity-name="Product" use-cache="false" value-field="product">
                    <field-map field-name="productId" from-field="orderItem.productId"/>
                </entity-one>
                <set field="defaultTopCategoryId.topCategory" from="product.primaryProductCategoryId" set-if-empty="true" set-if-null="false"/>
                <call-service break-on-error="true" error-code="error" in-map-name="defaultTopCategoryId" include-user-login="true" require-new-transaction="false" service-name="getAllCategories" success-code="success">
                    <result-to-field field="categories" result-name="categories"/>
                </call-service>
                <first-from-list entry="category" list="categories"/>
                <set field="fact.categoryName" from="category.categoryName" set-if-empty="true" set-if-null="false"/>
                <set field="fact.productId" from="orderItem.productId" set-if-empty="true" set-if-null="false"/>
                <set field="fact.description" from="product.internalName" set-if-empty="true" set-if-null="false"/>
                <set field="fact.quantityUomId" from="product.quantityUomId" set-if-empty="true" set-if-null="false"/>
                <entity-and entity-name="OrderRole" filter-by-date="false" list="getSupplier" use-cache="false">
                    <field-map field-name="orderId" from-field="orderHeader.orderId"/>
                    <field-map field-name="roleTypeId" value="BILL_FROM_VENDOR"/>
                </entity-and>
                <if-not-empty field="orderHeader.orderId">
                    <call-bsh><![CDATA[
                	import java.math.BigDecimal;
                    import org.ofbiz.order.order.OrderReadHelper;
                    import org.ofbiz.entity.GenericValue;
                    import org.ofbiz.base.util.UtilValidate;

                    orderReadHelper = new OrderReadHelper(orderHeader);
                    GenericValue groupNameComp = orderReadHelper.getSupplierAgent();
                    BigDecimal qtyOrdered = orderReadHelper.getOrderItemQuantity(orderItem);
			        BigDecimal qtyOutstanding=  orderReadHelper.getTotalOrderItemsOrderedQuantity().subtract(orderReadHelper.getShippableQuantity());
			        BigDecimal qtyShipped =orderReadHelper.getOrderItemShipping(orderItem);
			        String groupName = getSupplier.get(0).getString("partyId");
			        if(UtilValidate.isNotEmpty(categories)){
     			        String longDescription = categories.get(0).getString("productCategoryTypeId");
       			        parameters.put("longDescription",  longDescription);
			        }
			        parameters.put("groupName", groupName);
			        parameters.put("qtyOrdered", qtyOrdered);
			        parameters.put("qtyShipped", qtyShipped);

            ]]></call-bsh>
                </if-not-empty>
            </if-not-empty>
            <set field="fact.groupName" from="parameters.groupName" set-if-empty="true" set-if-null="false" type="String"/>
            <set field="fact.qtyOrdered" from="parameters.qtyOrdered" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
            <set field="fact.qtyShipped" from="parameters.qtyShipped" set-if-empty="true" set-if-null="false" type="BigDecimal"/>
            <store-value do-cache-clear="true" value-field="fact"/>
        </if-compare>
    </simple-method>
</simple-methods>
